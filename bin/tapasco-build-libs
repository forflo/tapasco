#!/usr/bin/python
import argparse
import sys
import subprocess
from   socket import gethostname
import os

parser = argparse.ArgumentParser()
parser.add_argument('--mode', help='build mode (default: %(default)s)', default='release', choices=['clean', 'release', 'debug', 'driver_debug'])
parser.add_argument('--rebuild', help='force rebuild libs (default: %(default)s)', action='store_true')
parser.add_argument('--shared', help='build shared library instead of static', action='store_true')
args = parser.parse_args()

clean        = args.mode == 'clean'
debug        = args.mode == 'debug' or args.mode == 'driver_debug'
driver_debug = args.mode == 'driver_debug'

print 'Build mode: ' + args.mode

if not 'TAPASCO_PLATFORM' in os.environ:
	print('Environment variable TAPASCO_PLATFORM is not set, guessing Platform ...')
	if gethostname() in ['zed', 'zedboard', 'zc706', 'zynq', 'pynq']:
		os.environ['TAPASCO_PLATFORM'] = 'zynq'
	elif gethostname() in ['zynqmp']:
		os.environ['TAPASCO_PLATFORM'] = 'zynqmp'
	else:
		os.environ['TAPASCO_PLATFORM'] = 'pcie'

print('Platform: ' + os.environ['TAPASCO_PLATFORM'])

moddir = os.environ['TAPASCO_HOME'] + '/platform/' + os.environ['TAPASCO_PLATFORM'] + '/module'

bdir   = os.environ['TAPASCO_HOME'] + '/build'

if clean or args.rebuild:
	subprocess.call(['rm -rf ' + bdir], shell=True)
	subprocess.call(['cd ' + moddir + ' && make clean'], shell=True)

if not clean:
	if debug:
		print('Building debug mode libraries...')
	else:
		print('Building release mode libraries, pass "debug" as first argument to build debug libs...')

	if 'LINUX_HOME' in os.environ:
		subprocess.call(['make -C ' + os.environ['LINUX_HOME'] + ' scripts'], shell=True)
	if os.environ['TAPASCO_PLATFORM'] is 'pcie':
		print 'cd ' + moddir + ' && make ' + ('DEBUG_VERBOSE=y ' if driver_debug else ' ')
		subprocess.call(['cd ' + moddir + ' && make ' + ('DEBUG_VERBOSE=y ' if driver_debug else ' ')], shell=True)
	else:
		subprocess.call(['cd ' + moddir + ' && make ' + ('' if driver_debug else 'release ')], shell=True)
	if args.shared:
		libtype = "ON"
	else:
		libtype = "OFF"
	buildtype = "Release"
	if args.mode == 'debug' or args.mode == 'driver_debug':
		buildtype = "Debug"
	subprocess.call(['mkdir -p ' + bdir + ' && cd ' + bdir + ' && cmake '
		+ ' -DCMAKE_BUILD_TYPE={} '.format(buildtype)
		+ ' -DPLATFORM:STRING={} -DBUILD_SHARED_LIBS:BOOL={} .. \
		&& make && make DESTDIR={}/install install && make package'.format(os.environ['TAPASCO_PLATFORM'], libtype, bdir)], shell=True)
