//
// Generated by Bluespec Compiler, version 2017.07.A (build 1da80f1, 2017-07-21)
//
// On Tue Feb  5 15:29:39 CET 2019
//
//
// Ports:
// Name                         I/O  size props
// S_AXI_arready                  O     1 reg
// S_AXI_rvalid                   O     1 reg
// S_AXI_rdata                    O    64
// S_AXI_rresp                    O     2
// S_AXI_awready                  O     1
// S_AXI_wready                   O     1
// S_AXI_bvalid                   O     1 reg
// S_AXI_bresp                    O     2
// m64_axi_arvalid                O     1 reg
// m64_axi_arid                   O     1
// m64_axi_araddr                 O    64
// m64_axi_arlen                  O     8
// m64_axi_arsize                 O     3
// m64_axi_arburst                O     2
// m64_axi_arlock                 O     1
// m64_axi_arcache                O     4
// m64_axi_arprot                 O     3
// m64_axi_arqos                  O     4
// m64_axi_arregion               O     4
// m64_axi_rready                 O     1 reg
// m64_axi_awvalid                O     1 reg
// m64_axi_awid                   O     1
// m64_axi_awaddr                 O    64
// m64_axi_awlen                  O     8
// m64_axi_awsize                 O     3
// m64_axi_awburst                O     2
// m64_axi_awlock                 O     1
// m64_axi_awcache                O     4
// m64_axi_awprot                 O     3
// m64_axi_awqos                  O     4
// m64_axi_awregion               O     4
// m64_axi_wvalid                 O     1 reg
// m64_axi_wdata                  O   512
// m64_axi_wstrb                  O    64
// m64_axi_wlast                  O     1
// m64_axi_bready                 O     1 reg
// m32_axi_arvalid                O     1 reg
// m32_axi_arid                   O     1
// m32_axi_araddr                 O    64
// m32_axi_arlen                  O     8
// m32_axi_arsize                 O     3
// m32_axi_arburst                O     2
// m32_axi_arlock                 O     1
// m32_axi_arcache                O     4
// m32_axi_arprot                 O     3
// m32_axi_arqos                  O     4
// m32_axi_arregion               O     4
// m32_axi_rready                 O     1 reg
// m32_axi_awvalid                O     1 reg
// m32_axi_awid                   O     1
// m32_axi_awaddr                 O    64
// m32_axi_awlen                  O     8
// m32_axi_awsize                 O     3
// m32_axi_awburst                O     2
// m32_axi_awlock                 O     1
// m32_axi_awcache                O     4
// m32_axi_awprot                 O     3
// m32_axi_awqos                  O     4
// m32_axi_awregion               O     4
// m32_axi_wvalid                 O     1 reg
// m32_axi_wdata                  O   512
// m32_axi_wstrb                  O    64
// m32_axi_wlast                  O     1
// m32_axi_bready                 O     1 reg
// IRQ_write                      O     1 reg
// IRQ_read                       O     1 reg
// m32_axi_aclk                   I     1 clock
// m32_axi_aresetn                I     1 reset
// m64_axi_aclk                   I     1 clock
// m64_axi_aresetn                I     1 reset
// s_axi_aclk                     I     1 clock
// s_axi_aresetn                  I     1 reset
// S_AXI_arvalid                  I     1
// S_AXI_araddr                   I    64 reg
// S_AXI_arprot                   I     3 reg
// S_AXI_rready                   I     1
// S_AXI_awvalid                  I     1
// S_AXI_awaddr                   I    64
// S_AXI_awprot                   I     3
// S_AXI_wvalid                   I     1
// S_AXI_wdata                    I    64
// S_AXI_wstrb                    I     8
// S_AXI_bready                   I     1
// m64_axi_arready                I     1
// m64_axi_rvalid                 I     1
// m64_axi_rid                    I     1 reg
// m64_axi_rdata                  I   512 reg
// m64_axi_rresp                  I     2 reg
// m64_axi_rlast                  I     1 reg
// m64_axi_awready                I     1
// m64_axi_wready                 I     1
// m64_axi_bvalid                 I     1
// m64_axi_bresp                  I     2 reg
// m64_axi_bid                    I     1 reg
// m32_axi_arready                I     1
// m32_axi_rvalid                 I     1
// m32_axi_rid                    I     1 reg
// m32_axi_rdata                  I   512 reg
// m32_axi_rresp                  I     2 reg
// m32_axi_rlast                  I     1 reg
// m32_axi_awready                I     1
// m32_axi_wready                 I     1
// m32_axi_bvalid                 I     1
// m32_axi_bresp                  I     2 reg
// m32_axi_bid                    I     1 reg
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkBlueDMAVivado(m32_axi_aclk,
		       m32_axi_aresetn,
		       m64_axi_aclk,
		       m64_axi_aresetn,
		       s_axi_aclk,
		       s_axi_aresetn,

		       S_AXI_arready,

		       S_AXI_arvalid,

		       S_AXI_araddr,

		       S_AXI_arprot,

		       S_AXI_rvalid,

		       S_AXI_rready,

		       S_AXI_rdata,

		       S_AXI_rresp,

		       S_AXI_awready,

		       S_AXI_awvalid,

		       S_AXI_awaddr,

		       S_AXI_awprot,

		       S_AXI_wready,

		       S_AXI_wvalid,

		       S_AXI_wdata,

		       S_AXI_wstrb,

		       S_AXI_bvalid,

		       S_AXI_bready,

		       S_AXI_bresp,

		       m64_axi_arvalid,

		       m64_axi_arready,

		       m64_axi_arid,

		       m64_axi_araddr,

		       m64_axi_arlen,

		       m64_axi_arsize,

		       m64_axi_arburst,

		       m64_axi_arlock,

		       m64_axi_arcache,

		       m64_axi_arprot,

		       m64_axi_arqos,

		       m64_axi_arregion,

		       m64_axi_rready,

		       m64_axi_rvalid,

		       m64_axi_rid,
		       m64_axi_rdata,
		       m64_axi_rresp,
		       m64_axi_rlast,

		       m64_axi_awready,

		       m64_axi_awvalid,

		       m64_axi_awid,

		       m64_axi_awaddr,

		       m64_axi_awlen,

		       m64_axi_awsize,

		       m64_axi_awburst,

		       m64_axi_awlock,

		       m64_axi_awcache,

		       m64_axi_awprot,

		       m64_axi_awqos,

		       m64_axi_awregion,

		       m64_axi_wready,

		       m64_axi_wvalid,

		       m64_axi_wdata,

		       m64_axi_wstrb,

		       m64_axi_wlast,

		       m64_axi_bvalid,

		       m64_axi_bready,

		       m64_axi_bresp,
		       m64_axi_bid,

		       m32_axi_arvalid,

		       m32_axi_arready,

		       m32_axi_arid,

		       m32_axi_araddr,

		       m32_axi_arlen,

		       m32_axi_arsize,

		       m32_axi_arburst,

		       m32_axi_arlock,

		       m32_axi_arcache,

		       m32_axi_arprot,

		       m32_axi_arqos,

		       m32_axi_arregion,

		       m32_axi_rready,

		       m32_axi_rvalid,

		       m32_axi_rid,
		       m32_axi_rdata,
		       m32_axi_rresp,
		       m32_axi_rlast,

		       m32_axi_awready,

		       m32_axi_awvalid,

		       m32_axi_awid,

		       m32_axi_awaddr,

		       m32_axi_awlen,

		       m32_axi_awsize,

		       m32_axi_awburst,

		       m32_axi_awlock,

		       m32_axi_awcache,

		       m32_axi_awprot,

		       m32_axi_awqos,

		       m32_axi_awregion,

		       m32_axi_wready,

		       m32_axi_wvalid,

		       m32_axi_wdata,

		       m32_axi_wstrb,

		       m32_axi_wlast,

		       m32_axi_bvalid,

		       m32_axi_bready,

		       m32_axi_bresp,
		       m32_axi_bid,

		       IRQ_write,

		       IRQ_read);
  input  m32_axi_aclk;
  input  m32_axi_aresetn;
  input  m64_axi_aclk;
  input  m64_axi_aresetn;
  input  s_axi_aclk;
  input  s_axi_aresetn;

  // value method s_rd_arready
  output S_AXI_arready;

  // action method s_rd_parvalid
  input  S_AXI_arvalid;

  // action method s_rd_paraddr
  input  [63 : 0] S_AXI_araddr;

  // action method s_rd_parprot
  input  [2 : 0] S_AXI_arprot;

  // value method s_rd_rvalid
  output S_AXI_rvalid;

  // action method s_rd_prready
  input  S_AXI_rready;

  // value method s_rd_rdata
  output [63 : 0] S_AXI_rdata;

  // value method s_rd_rresp
  output [1 : 0] S_AXI_rresp;

  // value method s_wr_awready
  output S_AXI_awready;

  // action method s_wr_pawvalid
  input  S_AXI_awvalid;

  // action method s_wr_pawaddr
  input  [63 : 0] S_AXI_awaddr;

  // action method s_wr_pawprot
  input  [2 : 0] S_AXI_awprot;

  // value method s_wr_wready
  output S_AXI_wready;

  // action method s_wr_pwvalid
  input  S_AXI_wvalid;

  // action method s_wr_pwdata
  input  [63 : 0] S_AXI_wdata;

  // action method s_wr_pwstrb
  input  [7 : 0] S_AXI_wstrb;

  // value method s_wr_bvalid
  output S_AXI_bvalid;

  // action method s_wr_pbready
  input  S_AXI_bready;

  // value method s_wr_bresp
  output [1 : 0] S_AXI_bresp;

  // value method pcie_rd_arvalid
  output m64_axi_arvalid;

  // action method pcie_rd_parready
  input  m64_axi_arready;

  // value method pcie_rd_arid
  output m64_axi_arid;

  // value method pcie_rd_araddr
  output [63 : 0] m64_axi_araddr;

  // value method pcie_rd_arlen
  output [7 : 0] m64_axi_arlen;

  // value method pcie_rd_arsize
  output [2 : 0] m64_axi_arsize;

  // value method pcie_rd_arburst
  output [1 : 0] m64_axi_arburst;

  // value method pcie_rd_arlock
  output m64_axi_arlock;

  // value method pcie_rd_arcache
  output [3 : 0] m64_axi_arcache;

  // value method pcie_rd_arprot
  output [2 : 0] m64_axi_arprot;

  // value method pcie_rd_arqos
  output [3 : 0] m64_axi_arqos;

  // value method pcie_rd_arregion
  output [3 : 0] m64_axi_arregion;

  // value method pcie_rd_aruser

  // value method pcie_rd_rready
  output m64_axi_rready;

  // action method pcie_rd_prvalid
  input  m64_axi_rvalid;

  // action method pcie_rd_prchannel
  input  m64_axi_rid;
  input  [511 : 0] m64_axi_rdata;
  input  [1 : 0] m64_axi_rresp;
  input  m64_axi_rlast;

  // action method pcie_wr_pawready
  input  m64_axi_awready;

  // value method pcie_wr_awvalid
  output m64_axi_awvalid;

  // value method pcie_wr_awid
  output m64_axi_awid;

  // value method pcie_wr_awaddr
  output [63 : 0] m64_axi_awaddr;

  // value method pcie_wr_awlen
  output [7 : 0] m64_axi_awlen;

  // value method pcie_wr_awsize
  output [2 : 0] m64_axi_awsize;

  // value method pcie_wr_awburst
  output [1 : 0] m64_axi_awburst;

  // value method pcie_wr_awlock
  output m64_axi_awlock;

  // value method pcie_wr_awcache
  output [3 : 0] m64_axi_awcache;

  // value method pcie_wr_awprot
  output [2 : 0] m64_axi_awprot;

  // value method pcie_wr_awqos
  output [3 : 0] m64_axi_awqos;

  // value method pcie_wr_awregion
  output [3 : 0] m64_axi_awregion;

  // value method pcie_wr_awuser

  // action method pcie_wr_pwready
  input  m64_axi_wready;

  // value method pcie_wr_wvalid
  output m64_axi_wvalid;

  // value method pcie_wr_wdata
  output [511 : 0] m64_axi_wdata;

  // value method pcie_wr_wstrb
  output [63 : 0] m64_axi_wstrb;

  // value method pcie_wr_wlast
  output m64_axi_wlast;

  // value method pcie_wr_wuser

  // action method pcie_wr_pbvalid
  input  m64_axi_bvalid;

  // value method pcie_wr_bready
  output m64_axi_bready;

  // action method pcie_wr_bin
  input  [1 : 0] m64_axi_bresp;
  input  m64_axi_bid;

  // value method fpga_rd_arvalid
  output m32_axi_arvalid;

  // action method fpga_rd_parready
  input  m32_axi_arready;

  // value method fpga_rd_arid
  output m32_axi_arid;

  // value method fpga_rd_araddr
  output [63 : 0] m32_axi_araddr;

  // value method fpga_rd_arlen
  output [7 : 0] m32_axi_arlen;

  // value method fpga_rd_arsize
  output [2 : 0] m32_axi_arsize;

  // value method fpga_rd_arburst
  output [1 : 0] m32_axi_arburst;

  // value method fpga_rd_arlock
  output m32_axi_arlock;

  // value method fpga_rd_arcache
  output [3 : 0] m32_axi_arcache;

  // value method fpga_rd_arprot
  output [2 : 0] m32_axi_arprot;

  // value method fpga_rd_arqos
  output [3 : 0] m32_axi_arqos;

  // value method fpga_rd_arregion
  output [3 : 0] m32_axi_arregion;

  // value method fpga_rd_aruser

  // value method fpga_rd_rready
  output m32_axi_rready;

  // action method fpga_rd_prvalid
  input  m32_axi_rvalid;

  // action method fpga_rd_prchannel
  input  m32_axi_rid;
  input  [511 : 0] m32_axi_rdata;
  input  [1 : 0] m32_axi_rresp;
  input  m32_axi_rlast;

  // action method fpga_wr_pawready
  input  m32_axi_awready;

  // value method fpga_wr_awvalid
  output m32_axi_awvalid;

  // value method fpga_wr_awid
  output m32_axi_awid;

  // value method fpga_wr_awaddr
  output [63 : 0] m32_axi_awaddr;

  // value method fpga_wr_awlen
  output [7 : 0] m32_axi_awlen;

  // value method fpga_wr_awsize
  output [2 : 0] m32_axi_awsize;

  // value method fpga_wr_awburst
  output [1 : 0] m32_axi_awburst;

  // value method fpga_wr_awlock
  output m32_axi_awlock;

  // value method fpga_wr_awcache
  output [3 : 0] m32_axi_awcache;

  // value method fpga_wr_awprot
  output [2 : 0] m32_axi_awprot;

  // value method fpga_wr_awqos
  output [3 : 0] m32_axi_awqos;

  // value method fpga_wr_awregion
  output [3 : 0] m32_axi_awregion;

  // value method fpga_wr_awuser

  // action method fpga_wr_pwready
  input  m32_axi_wready;

  // value method fpga_wr_wvalid
  output m32_axi_wvalid;

  // value method fpga_wr_wdata
  output [511 : 0] m32_axi_wdata;

  // value method fpga_wr_wstrb
  output [63 : 0] m32_axi_wstrb;

  // value method fpga_wr_wlast
  output m32_axi_wlast;

  // value method fpga_wr_wuser

  // action method fpga_wr_pbvalid
  input  m32_axi_bvalid;

  // value method fpga_wr_bready
  output m32_axi_bready;

  // action method fpga_wr_bin
  input  [1 : 0] m32_axi_bresp;
  input  m32_axi_bid;

  // value method interrupt_write
  output IRQ_write;

  // value method interrupt_read
  output IRQ_read;

  // signals for module outputs
  wire [511 : 0] m32_axi_wdata, m64_axi_wdata;
  wire [63 : 0] S_AXI_rdata,
		m32_axi_araddr,
		m32_axi_awaddr,
		m32_axi_wstrb,
		m64_axi_araddr,
		m64_axi_awaddr,
		m64_axi_wstrb;
  wire [7 : 0] m32_axi_arlen, m32_axi_awlen, m64_axi_arlen, m64_axi_awlen;
  wire [3 : 0] m32_axi_arcache,
	       m32_axi_arqos,
	       m32_axi_arregion,
	       m32_axi_awcache,
	       m32_axi_awqos,
	       m32_axi_awregion,
	       m64_axi_arcache,
	       m64_axi_arqos,
	       m64_axi_arregion,
	       m64_axi_awcache,
	       m64_axi_awqos,
	       m64_axi_awregion;
  wire [2 : 0] m32_axi_arprot,
	       m32_axi_arsize,
	       m32_axi_awprot,
	       m32_axi_awsize,
	       m64_axi_arprot,
	       m64_axi_arsize,
	       m64_axi_awprot,
	       m64_axi_awsize;
  wire [1 : 0] S_AXI_bresp,
	       S_AXI_rresp,
	       m32_axi_arburst,
	       m32_axi_awburst,
	       m64_axi_arburst,
	       m64_axi_awburst;
  wire IRQ_read,
       IRQ_write,
       S_AXI_arready,
       S_AXI_awready,
       S_AXI_bvalid,
       S_AXI_rvalid,
       S_AXI_wready,
       m32_axi_arid,
       m32_axi_arlock,
       m32_axi_arvalid,
       m32_axi_awid,
       m32_axi_awlock,
       m32_axi_awvalid,
       m32_axi_bready,
       m32_axi_rready,
       m32_axi_wlast,
       m32_axi_wvalid,
       m64_axi_arid,
       m64_axi_arlock,
       m64_axi_arvalid,
       m64_axi_awid,
       m64_axi_awlock,
       m64_axi_awvalid,
       m64_axi_bready,
       m64_axi_rready,
       m64_axi_wlast,
       m64_axi_wvalid;

  // inlined wires
  reg [3 : 0] blueDMA_readChannel_fromMaster_master_rd_warcache$wget,
	      blueDMA_readChannel_toMaster_master_wr_wawcache$wget,
	      blueDMA_writeChannel_fromMaster_master_rd_warcache$wget,
	      blueDMA_writeChannel_toMaster_master_wr_wawcache$wget;
  wire [1023 : 0] blueDMA_readChannel_byteAlignerFrom_buffer$port0__write_1,
		  blueDMA_readChannel_byteAlignerFrom_buffer$port1__read,
		  blueDMA_readChannel_byteAlignerFrom_buffer$port1__write_1,
		  blueDMA_readChannel_byteAlignerFrom_buffer$port2__read,
		  blueDMA_readChannel_byteAlignerTo_buffer$port0__write_1,
		  blueDMA_readChannel_byteAlignerTo_buffer$port1__read,
		  blueDMA_readChannel_byteAlignerTo_buffer$port1__write_1,
		  blueDMA_readChannel_byteAlignerTo_buffer$port2__read,
		  blueDMA_writeChannel_byteAlignerFrom_buffer$port0__write_1,
		  blueDMA_writeChannel_byteAlignerFrom_buffer$port1__read,
		  blueDMA_writeChannel_byteAlignerFrom_buffer$port1__write_1,
		  blueDMA_writeChannel_byteAlignerFrom_buffer$port2__read,
		  blueDMA_writeChannel_byteAlignerTo_buffer$port0__write_1,
		  blueDMA_writeChannel_byteAlignerTo_buffer$port1__read,
		  blueDMA_writeChannel_byteAlignerTo_buffer$port1__write_1,
		  blueDMA_writeChannel_byteAlignerTo_buffer$port2__read;
  wire [515 : 0] blueDMA_readChannel_fromMaster_master_rd_rinpkg$wget,
		 blueDMA_writeChannel_fromMaster_master_rd_rinpkg$wget;
  wire [72 : 0] blueDMA_s_config_writeSlave_dataIn_rv$port0__write_1,
		blueDMA_s_config_writeSlave_dataIn_rv$port1__read,
		blueDMA_s_config_writeSlave_dataIn_rv$port2__read;
  wire [67 : 0] blueDMA_s_config_writeSlave_addrIn_rv$port0__write_1,
		blueDMA_s_config_writeSlave_addrIn_rv$port1__read,
		blueDMA_s_config_writeSlave_addrIn_rv$port2__read;
  wire [6 : 0] blueDMA_readChannel_byteAlignerFrom_bytes_left_in_buffer$port0__write_1,
	       blueDMA_readChannel_byteAlignerFrom_bytes_left_in_buffer$port1__write_1,
	       blueDMA_readChannel_byteAlignerFrom_bytes_left_in_buffer$port2__read,
	       blueDMA_readChannel_byteAlignerTo_bytes_left_in_buffer$port0__write_1,
	       blueDMA_readChannel_byteAlignerTo_bytes_left_in_buffer$port1__write_1,
	       blueDMA_readChannel_byteAlignerTo_bytes_left_in_buffer$port2__read,
	       blueDMA_writeChannel_byteAlignerFrom_bytes_left_in_buffer$port0__write_1,
	       blueDMA_writeChannel_byteAlignerFrom_bytes_left_in_buffer$port1__write_1,
	       blueDMA_writeChannel_byteAlignerFrom_bytes_left_in_buffer$port2__read,
	       blueDMA_writeChannel_byteAlignerTo_bytes_left_in_buffer$port0__write_1,
	       blueDMA_writeChannel_byteAlignerTo_bytes_left_in_buffer$port1__write_1,
	       blueDMA_writeChannel_byteAlignerTo_bytes_left_in_buffer$port2__read;
  wire [2 : 0] blueDMA_readChannel_toMaster_master_wr_rinpkg$wget,
	       blueDMA_writeChannel_toMaster_master_wr_rinpkg$wget;
  wire blueDMA_readChannel_byteAlignerFrom_buffer$EN_port0__write,
       blueDMA_readChannel_byteAlignerFrom_bytes_left_in_buffer$EN_port0__write,
       blueDMA_readChannel_byteAlignerFrom_fetchedDatum$EN_port0__write,
       blueDMA_readChannel_byteAlignerFrom_fetchedDatum$port1__read,
       blueDMA_readChannel_byteAlignerFrom_fetchedDatum$port2__read,
       blueDMA_readChannel_byteAlignerTo_buffer$EN_port0__write,
       blueDMA_readChannel_byteAlignerTo_bytes_left_in_buffer$EN_port0__write,
       blueDMA_readChannel_byteAlignerTo_fetchedDatum$EN_port0__write,
       blueDMA_readChannel_byteAlignerTo_fetchedDatum$port1__read,
       blueDMA_readChannel_byteAlignerTo_fetchedDatum$port2__read,
       blueDMA_s_config_readIsHandled$whas,
       blueDMA_s_config_writeIsHandled$whas,
       blueDMA_s_config_writeSlave_addrIn_rv$EN_port0__write,
       blueDMA_s_config_writeSlave_addrIn_rv$EN_port1__write,
       blueDMA_s_config_writeSlave_dataIn_rv$EN_port0__write,
       blueDMA_s_config_writeSlave_dataIn_rv$EN_port1__write,
       blueDMA_writeChannel_byteAlignerFrom_buffer$EN_port0__write,
       blueDMA_writeChannel_byteAlignerFrom_bytes_left_in_buffer$EN_port0__write,
       blueDMA_writeChannel_byteAlignerFrom_fetchedDatum$EN_port0__write,
       blueDMA_writeChannel_byteAlignerFrom_fetchedDatum$port1__read,
       blueDMA_writeChannel_byteAlignerFrom_fetchedDatum$port2__read,
       blueDMA_writeChannel_byteAlignerTo_buffer$EN_port0__write,
       blueDMA_writeChannel_byteAlignerTo_bytes_left_in_buffer$EN_port0__write,
       blueDMA_writeChannel_byteAlignerTo_fetchedDatum$EN_port0__write,
       blueDMA_writeChannel_byteAlignerTo_fetchedDatum$port1__read,
       blueDMA_writeChannel_byteAlignerTo_fetchedDatum$port2__read;

  // register blueDMA_fpga_addr
  reg [63 : 0] blueDMA_fpga_addr;
  wire [63 : 0] blueDMA_fpga_addr$D_IN;
  wire blueDMA_fpga_addr$EN;

  // register blueDMA_host_addr
  reg [63 : 0] blueDMA_host_addr;
  wire [63 : 0] blueDMA_host_addr$D_IN;
  wire blueDMA_host_addr$EN;

  // register blueDMA_id
  reg [63 : 0] blueDMA_id;
  wire [63 : 0] blueDMA_id$D_IN;
  wire blueDMA_id$EN;

  // register blueDMA_readChannel_byteAlignerFrom_buffer
  reg [1023 : 0] blueDMA_readChannel_byteAlignerFrom_buffer;
  wire [1023 : 0] blueDMA_readChannel_byteAlignerFrom_buffer$D_IN;
  wire blueDMA_readChannel_byteAlignerFrom_buffer$EN;

  // register blueDMA_readChannel_byteAlignerFrom_bytes_in
  reg [31 : 0] blueDMA_readChannel_byteAlignerFrom_bytes_in;
  wire [31 : 0] blueDMA_readChannel_byteAlignerFrom_bytes_in$D_IN;
  wire blueDMA_readChannel_byteAlignerFrom_bytes_in$EN;

  // register blueDMA_readChannel_byteAlignerFrom_bytes_left_in_buffer
  reg [6 : 0] blueDMA_readChannel_byteAlignerFrom_bytes_left_in_buffer;
  wire [6 : 0] blueDMA_readChannel_byteAlignerFrom_bytes_left_in_buffer$D_IN;
  wire blueDMA_readChannel_byteAlignerFrom_bytes_left_in_buffer$EN;

  // register blueDMA_readChannel_byteAlignerFrom_bytes_out
  reg [31 : 0] blueDMA_readChannel_byteAlignerFrom_bytes_out;
  reg [31 : 0] blueDMA_readChannel_byteAlignerFrom_bytes_out$D_IN;
  wire blueDMA_readChannel_byteAlignerFrom_bytes_out$EN;

  // register blueDMA_readChannel_byteAlignerFrom_bytes_out_needed
  reg [6 : 0] blueDMA_readChannel_byteAlignerFrom_bytes_out_needed;
  wire [6 : 0] blueDMA_readChannel_byteAlignerFrom_bytes_out_needed$D_IN;
  wire blueDMA_readChannel_byteAlignerFrom_bytes_out_needed$EN;

  // register blueDMA_readChannel_byteAlignerFrom_bytes_total
  reg [31 : 0] blueDMA_readChannel_byteAlignerFrom_bytes_total;
  wire [31 : 0] blueDMA_readChannel_byteAlignerFrom_bytes_total$D_IN;
  wire blueDMA_readChannel_byteAlignerFrom_bytes_total$EN;

  // register blueDMA_readChannel_byteAlignerFrom_fetchedDatum
  reg blueDMA_readChannel_byteAlignerFrom_fetchedDatum;
  wire blueDMA_readChannel_byteAlignerFrom_fetchedDatum$D_IN,
       blueDMA_readChannel_byteAlignerFrom_fetchedDatum$EN;

  // register blueDMA_readChannel_byteAlignerTo_buffer
  reg [1023 : 0] blueDMA_readChannel_byteAlignerTo_buffer;
  wire [1023 : 0] blueDMA_readChannel_byteAlignerTo_buffer$D_IN;
  wire blueDMA_readChannel_byteAlignerTo_buffer$EN;

  // register blueDMA_readChannel_byteAlignerTo_bytes_in
  reg [31 : 0] blueDMA_readChannel_byteAlignerTo_bytes_in;
  wire [31 : 0] blueDMA_readChannel_byteAlignerTo_bytes_in$D_IN;
  wire blueDMA_readChannel_byteAlignerTo_bytes_in$EN;

  // register blueDMA_readChannel_byteAlignerTo_bytes_left_in_buffer
  reg [6 : 0] blueDMA_readChannel_byteAlignerTo_bytes_left_in_buffer;
  wire [6 : 0] blueDMA_readChannel_byteAlignerTo_bytes_left_in_buffer$D_IN;
  wire blueDMA_readChannel_byteAlignerTo_bytes_left_in_buffer$EN;

  // register blueDMA_readChannel_byteAlignerTo_bytes_out
  reg [31 : 0] blueDMA_readChannel_byteAlignerTo_bytes_out;
  reg [31 : 0] blueDMA_readChannel_byteAlignerTo_bytes_out$D_IN;
  wire blueDMA_readChannel_byteAlignerTo_bytes_out$EN;

  // register blueDMA_readChannel_byteAlignerTo_bytes_out_needed
  reg [6 : 0] blueDMA_readChannel_byteAlignerTo_bytes_out_needed;
  wire [6 : 0] blueDMA_readChannel_byteAlignerTo_bytes_out_needed$D_IN;
  wire blueDMA_readChannel_byteAlignerTo_bytes_out_needed$EN;

  // register blueDMA_readChannel_byteAlignerTo_bytes_total
  reg [31 : 0] blueDMA_readChannel_byteAlignerTo_bytes_total;
  wire [31 : 0] blueDMA_readChannel_byteAlignerTo_bytes_total$D_IN;
  wire blueDMA_readChannel_byteAlignerTo_bytes_total$EN;

  // register blueDMA_readChannel_byteAlignerTo_fetchedDatum
  reg blueDMA_readChannel_byteAlignerTo_fetchedDatum;
  wire blueDMA_readChannel_byteAlignerTo_fetchedDatum$D_IN,
       blueDMA_readChannel_byteAlignerTo_fetchedDatum$EN;

  // register blueDMA_readChannel_cycleCounter
  reg [31 : 0] blueDMA_readChannel_cycleCounter;
  wire [31 : 0] blueDMA_readChannel_cycleCounter$D_IN;
  wire blueDMA_readChannel_cycleCounter$EN;

  // register blueDMA_readChannel_doneInterruptReg
  reg blueDMA_readChannel_doneInterruptReg;
  wire blueDMA_readChannel_doneInterruptReg$D_IN,
       blueDMA_readChannel_doneInterruptReg$EN;

  // register blueDMA_readChannel_fromLastCycle
  reg blueDMA_readChannel_fromLastCycle;
  wire blueDMA_readChannel_fromLastCycle$D_IN,
       blueDMA_readChannel_fromLastCycle$EN;

  // register blueDMA_readChannel_fromMaster_task_data_output_reg
  reg [44 : 0] blueDMA_readChannel_fromMaster_task_data_output_reg;
  wire [44 : 0] blueDMA_readChannel_fromMaster_task_data_output_reg$D_IN;
  wire blueDMA_readChannel_fromMaster_task_data_output_reg$EN;

  // register blueDMA_readChannel_fromMaster_task_data_requests_reg
  reg [112 : 0] blueDMA_readChannel_fromMaster_task_data_requests_reg;
  wire [112 : 0] blueDMA_readChannel_fromMaster_task_data_requests_reg$D_IN;
  wire blueDMA_readChannel_fromMaster_task_data_requests_reg$EN;

  // register blueDMA_readChannel_mimo_words_left
  reg [25 : 0] blueDMA_readChannel_mimo_words_left;
  wire [25 : 0] blueDMA_readChannel_mimo_words_left$D_IN;
  wire blueDMA_readChannel_mimo_words_left$EN;

  // register blueDMA_readChannel_opInProgress
  reg blueDMA_readChannel_opInProgress;
  wire blueDMA_readChannel_opInProgress$D_IN,
       blueDMA_readChannel_opInProgress$EN;

  // register blueDMA_readChannel_perf_cycleCounterCur
  reg [31 : 0] blueDMA_readChannel_perf_cycleCounterCur;
  wire [31 : 0] blueDMA_readChannel_perf_cycleCounterCur$D_IN;
  wire blueDMA_readChannel_perf_cycleCounterCur$EN;

  // register blueDMA_readChannel_perf_cycleCounterCurStart
  reg [31 : 0] blueDMA_readChannel_perf_cycleCounterCurStart;
  wire [31 : 0] blueDMA_readChannel_perf_cycleCounterCurStart$D_IN;
  wire blueDMA_readChannel_perf_cycleCounterCurStart$EN;

  // register blueDMA_readChannel_perf_cycleCounterInterval
  reg [31 : 0] blueDMA_readChannel_perf_cycleCounterInterval;
  wire [31 : 0] blueDMA_readChannel_perf_cycleCounterInterval$D_IN;
  wire blueDMA_readChannel_perf_cycleCounterInterval$EN;

  // register blueDMA_readChannel_perf_cycleCounterIntervalStart
  reg [31 : 0] blueDMA_readChannel_perf_cycleCounterIntervalStart;
  wire [31 : 0] blueDMA_readChannel_perf_cycleCounterIntervalStart$D_IN;
  wire blueDMA_readChannel_perf_cycleCounterIntervalStart$EN;

  // register blueDMA_readChannel_perf_intervalCounter
  reg [11 : 0] blueDMA_readChannel_perf_intervalCounter;
  wire [11 : 0] blueDMA_readChannel_perf_intervalCounter$D_IN;
  wire blueDMA_readChannel_perf_intervalCounter$EN;

  // register blueDMA_readChannel_perf_intervalSet
  reg [11 : 0] blueDMA_readChannel_perf_intervalSet;
  wire [11 : 0] blueDMA_readChannel_perf_intervalSet$D_IN;
  wire blueDMA_readChannel_perf_intervalSet$EN;

  // register blueDMA_readChannel_toLastCycle
  reg blueDMA_readChannel_toLastCycle;
  wire blueDMA_readChannel_toLastCycle$D_IN,
       blueDMA_readChannel_toLastCycle$EN;

  // register blueDMA_readChannel_toMaster_beatsThisRequestCntr
  reg [7 : 0] blueDMA_readChannel_toMaster_beatsThisRequestCntr;
  wire [7 : 0] blueDMA_readChannel_toMaster_beatsThisRequestCntr$D_IN;
  wire blueDMA_readChannel_toMaster_beatsThisRequestCntr$EN;

  // register blueDMA_readChannel_toMaster_outstanding_writes
  reg [7 : 0] blueDMA_readChannel_toMaster_outstanding_writes;
  wire [7 : 0] blueDMA_readChannel_toMaster_outstanding_writes$D_IN;
  wire blueDMA_readChannel_toMaster_outstanding_writes$EN;

  // register blueDMA_readChannel_toMaster_task_data_output_reg
  reg [44 : 0] blueDMA_readChannel_toMaster_task_data_output_reg;
  wire [44 : 0] blueDMA_readChannel_toMaster_task_data_output_reg$D_IN;
  wire blueDMA_readChannel_toMaster_task_data_output_reg$EN;

  // register blueDMA_readChannel_toMaster_task_data_requests_reg
  reg [112 : 0] blueDMA_readChannel_toMaster_task_data_requests_reg;
  wire [112 : 0] blueDMA_readChannel_toMaster_task_data_requests_reg$D_IN;
  wire blueDMA_readChannel_toMaster_task_data_requests_reg$EN;

  // register blueDMA_readChannel_total_requests_reg
  reg [31 : 0] blueDMA_readChannel_total_requests_reg;
  wire [31 : 0] blueDMA_readChannel_total_requests_reg$D_IN;
  wire blueDMA_readChannel_total_requests_reg$EN;

  // register blueDMA_s_config_readBusy
  reg blueDMA_s_config_readBusy;
  wire blueDMA_s_config_readBusy$D_IN, blueDMA_s_config_readBusy$EN;

  // register blueDMA_s_config_writeBusy
  reg blueDMA_s_config_writeBusy;
  wire blueDMA_s_config_writeBusy$D_IN, blueDMA_s_config_writeBusy$EN;

  // register blueDMA_s_config_writeSlave_addrIn_rv
  reg [67 : 0] blueDMA_s_config_writeSlave_addrIn_rv;
  wire [67 : 0] blueDMA_s_config_writeSlave_addrIn_rv$D_IN;
  wire blueDMA_s_config_writeSlave_addrIn_rv$EN;

  // register blueDMA_s_config_writeSlave_dataIn_rv
  reg [72 : 0] blueDMA_s_config_writeSlave_dataIn_rv;
  wire [72 : 0] blueDMA_s_config_writeSlave_dataIn_rv$D_IN;
  wire blueDMA_s_config_writeSlave_dataIn_rv$EN;

  // register blueDMA_transfer_length
  reg [63 : 0] blueDMA_transfer_length;
  wire [63 : 0] blueDMA_transfer_length$D_IN;
  wire blueDMA_transfer_length$EN;

  // register blueDMA_writeChannel_byteAlignerFrom_buffer
  reg [1023 : 0] blueDMA_writeChannel_byteAlignerFrom_buffer;
  wire [1023 : 0] blueDMA_writeChannel_byteAlignerFrom_buffer$D_IN;
  wire blueDMA_writeChannel_byteAlignerFrom_buffer$EN;

  // register blueDMA_writeChannel_byteAlignerFrom_bytes_in
  reg [31 : 0] blueDMA_writeChannel_byteAlignerFrom_bytes_in;
  wire [31 : 0] blueDMA_writeChannel_byteAlignerFrom_bytes_in$D_IN;
  wire blueDMA_writeChannel_byteAlignerFrom_bytes_in$EN;

  // register blueDMA_writeChannel_byteAlignerFrom_bytes_left_in_buffer
  reg [6 : 0] blueDMA_writeChannel_byteAlignerFrom_bytes_left_in_buffer;
  wire [6 : 0] blueDMA_writeChannel_byteAlignerFrom_bytes_left_in_buffer$D_IN;
  wire blueDMA_writeChannel_byteAlignerFrom_bytes_left_in_buffer$EN;

  // register blueDMA_writeChannel_byteAlignerFrom_bytes_out
  reg [31 : 0] blueDMA_writeChannel_byteAlignerFrom_bytes_out;
  reg [31 : 0] blueDMA_writeChannel_byteAlignerFrom_bytes_out$D_IN;
  wire blueDMA_writeChannel_byteAlignerFrom_bytes_out$EN;

  // register blueDMA_writeChannel_byteAlignerFrom_bytes_out_needed
  reg [6 : 0] blueDMA_writeChannel_byteAlignerFrom_bytes_out_needed;
  wire [6 : 0] blueDMA_writeChannel_byteAlignerFrom_bytes_out_needed$D_IN;
  wire blueDMA_writeChannel_byteAlignerFrom_bytes_out_needed$EN;

  // register blueDMA_writeChannel_byteAlignerFrom_bytes_total
  reg [31 : 0] blueDMA_writeChannel_byteAlignerFrom_bytes_total;
  wire [31 : 0] blueDMA_writeChannel_byteAlignerFrom_bytes_total$D_IN;
  wire blueDMA_writeChannel_byteAlignerFrom_bytes_total$EN;

  // register blueDMA_writeChannel_byteAlignerFrom_fetchedDatum
  reg blueDMA_writeChannel_byteAlignerFrom_fetchedDatum;
  wire blueDMA_writeChannel_byteAlignerFrom_fetchedDatum$D_IN,
       blueDMA_writeChannel_byteAlignerFrom_fetchedDatum$EN;

  // register blueDMA_writeChannel_byteAlignerTo_buffer
  reg [1023 : 0] blueDMA_writeChannel_byteAlignerTo_buffer;
  wire [1023 : 0] blueDMA_writeChannel_byteAlignerTo_buffer$D_IN;
  wire blueDMA_writeChannel_byteAlignerTo_buffer$EN;

  // register blueDMA_writeChannel_byteAlignerTo_bytes_in
  reg [31 : 0] blueDMA_writeChannel_byteAlignerTo_bytes_in;
  wire [31 : 0] blueDMA_writeChannel_byteAlignerTo_bytes_in$D_IN;
  wire blueDMA_writeChannel_byteAlignerTo_bytes_in$EN;

  // register blueDMA_writeChannel_byteAlignerTo_bytes_left_in_buffer
  reg [6 : 0] blueDMA_writeChannel_byteAlignerTo_bytes_left_in_buffer;
  wire [6 : 0] blueDMA_writeChannel_byteAlignerTo_bytes_left_in_buffer$D_IN;
  wire blueDMA_writeChannel_byteAlignerTo_bytes_left_in_buffer$EN;

  // register blueDMA_writeChannel_byteAlignerTo_bytes_out
  reg [31 : 0] blueDMA_writeChannel_byteAlignerTo_bytes_out;
  reg [31 : 0] blueDMA_writeChannel_byteAlignerTo_bytes_out$D_IN;
  wire blueDMA_writeChannel_byteAlignerTo_bytes_out$EN;

  // register blueDMA_writeChannel_byteAlignerTo_bytes_out_needed
  reg [6 : 0] blueDMA_writeChannel_byteAlignerTo_bytes_out_needed;
  wire [6 : 0] blueDMA_writeChannel_byteAlignerTo_bytes_out_needed$D_IN;
  wire blueDMA_writeChannel_byteAlignerTo_bytes_out_needed$EN;

  // register blueDMA_writeChannel_byteAlignerTo_bytes_total
  reg [31 : 0] blueDMA_writeChannel_byteAlignerTo_bytes_total;
  wire [31 : 0] blueDMA_writeChannel_byteAlignerTo_bytes_total$D_IN;
  wire blueDMA_writeChannel_byteAlignerTo_bytes_total$EN;

  // register blueDMA_writeChannel_byteAlignerTo_fetchedDatum
  reg blueDMA_writeChannel_byteAlignerTo_fetchedDatum;
  wire blueDMA_writeChannel_byteAlignerTo_fetchedDatum$D_IN,
       blueDMA_writeChannel_byteAlignerTo_fetchedDatum$EN;

  // register blueDMA_writeChannel_cycleCounter
  reg [31 : 0] blueDMA_writeChannel_cycleCounter;
  wire [31 : 0] blueDMA_writeChannel_cycleCounter$D_IN;
  wire blueDMA_writeChannel_cycleCounter$EN;

  // register blueDMA_writeChannel_doneInterruptReg
  reg blueDMA_writeChannel_doneInterruptReg;
  wire blueDMA_writeChannel_doneInterruptReg$D_IN,
       blueDMA_writeChannel_doneInterruptReg$EN;

  // register blueDMA_writeChannel_fromLastCycle
  reg blueDMA_writeChannel_fromLastCycle;
  wire blueDMA_writeChannel_fromLastCycle$D_IN,
       blueDMA_writeChannel_fromLastCycle$EN;

  // register blueDMA_writeChannel_fromMaster_task_data_output_reg
  reg [44 : 0] blueDMA_writeChannel_fromMaster_task_data_output_reg;
  wire [44 : 0] blueDMA_writeChannel_fromMaster_task_data_output_reg$D_IN;
  wire blueDMA_writeChannel_fromMaster_task_data_output_reg$EN;

  // register blueDMA_writeChannel_fromMaster_task_data_requests_reg
  reg [112 : 0] blueDMA_writeChannel_fromMaster_task_data_requests_reg;
  wire [112 : 0] blueDMA_writeChannel_fromMaster_task_data_requests_reg$D_IN;
  wire blueDMA_writeChannel_fromMaster_task_data_requests_reg$EN;

  // register blueDMA_writeChannel_mimo_words_left
  reg [25 : 0] blueDMA_writeChannel_mimo_words_left;
  wire [25 : 0] blueDMA_writeChannel_mimo_words_left$D_IN;
  wire blueDMA_writeChannel_mimo_words_left$EN;

  // register blueDMA_writeChannel_opInProgress
  reg blueDMA_writeChannel_opInProgress;
  wire blueDMA_writeChannel_opInProgress$D_IN,
       blueDMA_writeChannel_opInProgress$EN;

  // register blueDMA_writeChannel_perf_cycleCounterCur
  reg [31 : 0] blueDMA_writeChannel_perf_cycleCounterCur;
  wire [31 : 0] blueDMA_writeChannel_perf_cycleCounterCur$D_IN;
  wire blueDMA_writeChannel_perf_cycleCounterCur$EN;

  // register blueDMA_writeChannel_perf_cycleCounterCurStart
  reg [31 : 0] blueDMA_writeChannel_perf_cycleCounterCurStart;
  wire [31 : 0] blueDMA_writeChannel_perf_cycleCounterCurStart$D_IN;
  wire blueDMA_writeChannel_perf_cycleCounterCurStart$EN;

  // register blueDMA_writeChannel_perf_cycleCounterInterval
  reg [31 : 0] blueDMA_writeChannel_perf_cycleCounterInterval;
  wire [31 : 0] blueDMA_writeChannel_perf_cycleCounterInterval$D_IN;
  wire blueDMA_writeChannel_perf_cycleCounterInterval$EN;

  // register blueDMA_writeChannel_perf_cycleCounterIntervalStart
  reg [31 : 0] blueDMA_writeChannel_perf_cycleCounterIntervalStart;
  wire [31 : 0] blueDMA_writeChannel_perf_cycleCounterIntervalStart$D_IN;
  wire blueDMA_writeChannel_perf_cycleCounterIntervalStart$EN;

  // register blueDMA_writeChannel_perf_intervalCounter
  reg [11 : 0] blueDMA_writeChannel_perf_intervalCounter;
  wire [11 : 0] blueDMA_writeChannel_perf_intervalCounter$D_IN;
  wire blueDMA_writeChannel_perf_intervalCounter$EN;

  // register blueDMA_writeChannel_perf_intervalSet
  reg [11 : 0] blueDMA_writeChannel_perf_intervalSet;
  wire [11 : 0] blueDMA_writeChannel_perf_intervalSet$D_IN;
  wire blueDMA_writeChannel_perf_intervalSet$EN;

  // register blueDMA_writeChannel_toLastCycle
  reg blueDMA_writeChannel_toLastCycle;
  wire blueDMA_writeChannel_toLastCycle$D_IN,
       blueDMA_writeChannel_toLastCycle$EN;

  // register blueDMA_writeChannel_toMaster_beatsThisRequestCntr
  reg [7 : 0] blueDMA_writeChannel_toMaster_beatsThisRequestCntr;
  wire [7 : 0] blueDMA_writeChannel_toMaster_beatsThisRequestCntr$D_IN;
  wire blueDMA_writeChannel_toMaster_beatsThisRequestCntr$EN;

  // register blueDMA_writeChannel_toMaster_outstanding_writes
  reg [7 : 0] blueDMA_writeChannel_toMaster_outstanding_writes;
  wire [7 : 0] blueDMA_writeChannel_toMaster_outstanding_writes$D_IN;
  wire blueDMA_writeChannel_toMaster_outstanding_writes$EN;

  // register blueDMA_writeChannel_toMaster_task_data_output_reg
  reg [44 : 0] blueDMA_writeChannel_toMaster_task_data_output_reg;
  wire [44 : 0] blueDMA_writeChannel_toMaster_task_data_output_reg$D_IN;
  wire blueDMA_writeChannel_toMaster_task_data_output_reg$EN;

  // register blueDMA_writeChannel_toMaster_task_data_requests_reg
  reg [112 : 0] blueDMA_writeChannel_toMaster_task_data_requests_reg;
  wire [112 : 0] blueDMA_writeChannel_toMaster_task_data_requests_reg$D_IN;
  wire blueDMA_writeChannel_toMaster_task_data_requests_reg$EN;

  // register blueDMA_writeChannel_total_requests_reg
  reg [31 : 0] blueDMA_writeChannel_total_requests_reg;
  wire [31 : 0] blueDMA_writeChannel_total_requests_reg$D_IN;
  wire blueDMA_writeChannel_total_requests_reg$EN;

  // ports of submodule blueDMA_cmdsIn
  wire blueDMA_cmdsIn$CLR,
       blueDMA_cmdsIn$DEQ,
       blueDMA_cmdsIn$D_IN,
       blueDMA_cmdsIn$D_OUT,
       blueDMA_cmdsIn$EMPTY_N,
       blueDMA_cmdsIn$ENQ,
       blueDMA_cmdsIn$FULL_N;

  // ports of submodule blueDMA_readChannel_byteAlignerFrom_addr_ff
  wire [159 : 0] blueDMA_readChannel_byteAlignerFrom_addr_ff$dD_OUT,
		 blueDMA_readChannel_byteAlignerFrom_addr_ff$sD_IN;
  wire blueDMA_readChannel_byteAlignerFrom_addr_ff$dDEQ,
       blueDMA_readChannel_byteAlignerFrom_addr_ff$dEMPTY_N,
       blueDMA_readChannel_byteAlignerFrom_addr_ff$sENQ;

  // ports of submodule blueDMA_readChannel_byteAlignerFrom_incoming
  wire [511 : 0] blueDMA_readChannel_byteAlignerFrom_incoming$D_IN,
		 blueDMA_readChannel_byteAlignerFrom_incoming$D_OUT;
  wire blueDMA_readChannel_byteAlignerFrom_incoming$CLR,
       blueDMA_readChannel_byteAlignerFrom_incoming$DEQ,
       blueDMA_readChannel_byteAlignerFrom_incoming$EMPTY_N,
       blueDMA_readChannel_byteAlignerFrom_incoming$ENQ;

  // ports of submodule blueDMA_readChannel_byteAlignerFrom_outgoing
  wire [511 : 0] blueDMA_readChannel_byteAlignerFrom_outgoing$D_IN;
  wire blueDMA_readChannel_byteAlignerFrom_outgoing$CLR,
       blueDMA_readChannel_byteAlignerFrom_outgoing$DEQ,
       blueDMA_readChannel_byteAlignerFrom_outgoing$ENQ,
       blueDMA_readChannel_byteAlignerFrom_outgoing$FULL_N;

  // ports of submodule blueDMA_readChannel_byteAlignerTo_addr_ff
  wire [159 : 0] blueDMA_readChannel_byteAlignerTo_addr_ff$dD_OUT,
		 blueDMA_readChannel_byteAlignerTo_addr_ff$sD_IN;
  wire blueDMA_readChannel_byteAlignerTo_addr_ff$dDEQ,
       blueDMA_readChannel_byteAlignerTo_addr_ff$dEMPTY_N,
       blueDMA_readChannel_byteAlignerTo_addr_ff$sENQ;

  // ports of submodule blueDMA_readChannel_byteAlignerTo_incoming
  wire [511 : 0] blueDMA_readChannel_byteAlignerTo_incoming$D_IN,
		 blueDMA_readChannel_byteAlignerTo_incoming$D_OUT;
  wire blueDMA_readChannel_byteAlignerTo_incoming$CLR,
       blueDMA_readChannel_byteAlignerTo_incoming$DEQ,
       blueDMA_readChannel_byteAlignerTo_incoming$EMPTY_N,
       blueDMA_readChannel_byteAlignerTo_incoming$ENQ;

  // ports of submodule blueDMA_readChannel_byteAlignerTo_outgoing
  wire [511 : 0] blueDMA_readChannel_byteAlignerTo_outgoing$D_IN;
  wire blueDMA_readChannel_byteAlignerTo_outgoing$CLR,
       blueDMA_readChannel_byteAlignerTo_outgoing$DEQ,
       blueDMA_readChannel_byteAlignerTo_outgoing$ENQ,
       blueDMA_readChannel_byteAlignerTo_outgoing$FULL_N;

  // ports of submodule blueDMA_readChannel_clockConverter_fifo
  wire [511 : 0] blueDMA_readChannel_clockConverter_fifo$dD_OUT,
		 blueDMA_readChannel_clockConverter_fifo$sD_IN;
  wire blueDMA_readChannel_clockConverter_fifo$dDEQ,
       blueDMA_readChannel_clockConverter_fifo$dEMPTY_N,
       blueDMA_readChannel_clockConverter_fifo$sENQ,
       blueDMA_readChannel_clockConverter_fifo$sFULL_N;

  // ports of submodule blueDMA_readChannel_cmdIn
  wire [159 : 0] blueDMA_readChannel_cmdIn$D_IN,
		 blueDMA_readChannel_cmdIn$D_OUT;
  wire blueDMA_readChannel_cmdIn$CLR,
       blueDMA_readChannel_cmdIn$DEQ,
       blueDMA_readChannel_cmdIn$EMPTY_N,
       blueDMA_readChannel_cmdIn$ENQ,
       blueDMA_readChannel_cmdIn$FULL_N;

  // ports of submodule blueDMA_readChannel_fromDone
  wire blueDMA_readChannel_fromDone$dDEQ,
       blueDMA_readChannel_fromDone$dEMPTY_N,
       blueDMA_readChannel_fromDone$sD_IN,
       blueDMA_readChannel_fromDone$sENQ,
       blueDMA_readChannel_fromDone$sFULL_N;

  // ports of submodule blueDMA_readChannel_fromMasterReq_ff
  wire [99 : 0] blueDMA_readChannel_fromMasterReq_ff$dD_OUT,
		blueDMA_readChannel_fromMasterReq_ff$sD_IN;
  wire blueDMA_readChannel_fromMasterReq_ff$dDEQ,
       blueDMA_readChannel_fromMasterReq_ff$dEMPTY_N,
       blueDMA_readChannel_fromMasterReq_ff$sENQ,
       blueDMA_readChannel_fromMasterReq_ff$sFULL_N;

  // ports of submodule blueDMA_readChannel_fromMaster_master_rd_in
  wire [93 : 0] blueDMA_readChannel_fromMaster_master_rd_in$D_IN,
		blueDMA_readChannel_fromMaster_master_rd_in$D_OUT;
  wire blueDMA_readChannel_fromMaster_master_rd_in$CLR,
       blueDMA_readChannel_fromMaster_master_rd_in$DEQ,
       blueDMA_readChannel_fromMaster_master_rd_in$EMPTY_N,
       blueDMA_readChannel_fromMaster_master_rd_in$ENQ,
       blueDMA_readChannel_fromMaster_master_rd_in$FULL_N;

  // ports of submodule blueDMA_readChannel_fromMaster_master_rd_out
  wire [515 : 0] blueDMA_readChannel_fromMaster_master_rd_out$D_IN,
		 blueDMA_readChannel_fromMaster_master_rd_out$D_OUT;
  wire blueDMA_readChannel_fromMaster_master_rd_out$CLR,
       blueDMA_readChannel_fromMaster_master_rd_out$DEQ,
       blueDMA_readChannel_fromMaster_master_rd_out$EMPTY_N,
       blueDMA_readChannel_fromMaster_master_rd_out$ENQ,
       blueDMA_readChannel_fromMaster_master_rd_out$FULL_N;

  // ports of submodule blueDMA_readChannel_fromMaster_maxOutstandingFIFO
  wire blueDMA_readChannel_fromMaster_maxOutstandingFIFO$CLR,
       blueDMA_readChannel_fromMaster_maxOutstandingFIFO$DEQ,
       blueDMA_readChannel_fromMaster_maxOutstandingFIFO$D_IN,
       blueDMA_readChannel_fromMaster_maxOutstandingFIFO$EMPTY_N,
       blueDMA_readChannel_fromMaster_maxOutstandingFIFO$ENQ,
       blueDMA_readChannel_fromMaster_maxOutstandingFIFO$FULL_N;

  // ports of submodule blueDMA_readChannel_fromMaster_outgoingBuffer
  wire [511 : 0] blueDMA_readChannel_fromMaster_outgoingBuffer$D_IN,
		 blueDMA_readChannel_fromMaster_outgoingBuffer$D_OUT;
  wire blueDMA_readChannel_fromMaster_outgoingBuffer$CLR,
       blueDMA_readChannel_fromMaster_outgoingBuffer$DEQ,
       blueDMA_readChannel_fromMaster_outgoingBuffer$EMPTY_N,
       blueDMA_readChannel_fromMaster_outgoingBuffer$ENQ,
       blueDMA_readChannel_fromMaster_outgoingBuffer$FULL_N;

  // ports of submodule blueDMA_readChannel_fromMaster_reqGen_incomingBuffer
  wire [99 : 0] blueDMA_readChannel_fromMaster_reqGen_incomingBuffer$D_IN,
		blueDMA_readChannel_fromMaster_reqGen_incomingBuffer$D_OUT;
  wire blueDMA_readChannel_fromMaster_reqGen_incomingBuffer$CLR,
       blueDMA_readChannel_fromMaster_reqGen_incomingBuffer$DEQ,
       blueDMA_readChannel_fromMaster_reqGen_incomingBuffer$EMPTY_N,
       blueDMA_readChannel_fromMaster_reqGen_incomingBuffer$ENQ,
       blueDMA_readChannel_fromMaster_reqGen_incomingBuffer$FULL_N;

  // ports of submodule blueDMA_readChannel_fromMaster_reqGen_intermediateBuffer
  wire [111 : 0] blueDMA_readChannel_fromMaster_reqGen_intermediateBuffer$D_IN,
		 blueDMA_readChannel_fromMaster_reqGen_intermediateBuffer$D_OUT;
  wire blueDMA_readChannel_fromMaster_reqGen_intermediateBuffer$CLR,
       blueDMA_readChannel_fromMaster_reqGen_intermediateBuffer$DEQ,
       blueDMA_readChannel_fromMaster_reqGen_intermediateBuffer$EMPTY_N,
       blueDMA_readChannel_fromMaster_reqGen_intermediateBuffer$ENQ,
       blueDMA_readChannel_fromMaster_reqGen_intermediateBuffer$FULL_N;

  // ports of submodule blueDMA_readChannel_fromMaster_reqGen_intermediateBuffer2
  wire [137 : 0] blueDMA_readChannel_fromMaster_reqGen_intermediateBuffer2$D_IN,
		 blueDMA_readChannel_fromMaster_reqGen_intermediateBuffer2$D_OUT;
  wire blueDMA_readChannel_fromMaster_reqGen_intermediateBuffer2$CLR,
       blueDMA_readChannel_fromMaster_reqGen_intermediateBuffer2$DEQ,
       blueDMA_readChannel_fromMaster_reqGen_intermediateBuffer2$EMPTY_N,
       blueDMA_readChannel_fromMaster_reqGen_intermediateBuffer2$ENQ,
       blueDMA_readChannel_fromMaster_reqGen_intermediateBuffer2$FULL_N;

  // ports of submodule blueDMA_readChannel_fromMaster_reqGen_intermediateBuffer3
  wire [146 : 0] blueDMA_readChannel_fromMaster_reqGen_intermediateBuffer3$D_IN,
		 blueDMA_readChannel_fromMaster_reqGen_intermediateBuffer3$D_OUT;
  wire blueDMA_readChannel_fromMaster_reqGen_intermediateBuffer3$CLR,
       blueDMA_readChannel_fromMaster_reqGen_intermediateBuffer3$DEQ,
       blueDMA_readChannel_fromMaster_reqGen_intermediateBuffer3$EMPTY_N,
       blueDMA_readChannel_fromMaster_reqGen_intermediateBuffer3$ENQ,
       blueDMA_readChannel_fromMaster_reqGen_intermediateBuffer3$FULL_N;

  // ports of submodule blueDMA_readChannel_fromMaster_reqGen_outgoingBuffer
  wire [157 : 0] blueDMA_readChannel_fromMaster_reqGen_outgoingBuffer$D_IN,
		 blueDMA_readChannel_fromMaster_reqGen_outgoingBuffer$D_OUT;
  wire blueDMA_readChannel_fromMaster_reqGen_outgoingBuffer$CLR,
       blueDMA_readChannel_fromMaster_reqGen_outgoingBuffer$DEQ,
       blueDMA_readChannel_fromMaster_reqGen_outgoingBuffer$EMPTY_N,
       blueDMA_readChannel_fromMaster_reqGen_outgoingBuffer$ENQ,
       blueDMA_readChannel_fromMaster_reqGen_outgoingBuffer$FULL_N;

  // ports of submodule blueDMA_readChannel_mimoConv_ff
  wire [63 : 0] blueDMA_readChannel_mimoConv_ff$dD_OUT,
		blueDMA_readChannel_mimoConv_ff$sD_IN;
  wire blueDMA_readChannel_mimoConv_ff$dDEQ,
       blueDMA_readChannel_mimoConv_ff$dEMPTY_N,
       blueDMA_readChannel_mimoConv_ff$sENQ,
       blueDMA_readChannel_mimoConv_ff$sFULL_N;

  // ports of submodule blueDMA_readChannel_mimo_impl
  wire [511 : 0] blueDMA_readChannel_mimo_impl$D_IN,
		 blueDMA_readChannel_mimo_impl$D_OUT;
  wire blueDMA_readChannel_mimo_impl$CLR,
       blueDMA_readChannel_mimo_impl$DEQ,
       blueDMA_readChannel_mimo_impl$EMPTY_N,
       blueDMA_readChannel_mimo_impl$ENQ,
       blueDMA_readChannel_mimo_impl$FULL_N;

  // ports of submodule blueDMA_readChannel_toDone
  wire blueDMA_readChannel_toDone$dDEQ,
       blueDMA_readChannel_toDone$dEMPTY_N,
       blueDMA_readChannel_toDone$sD_IN,
       blueDMA_readChannel_toDone$sENQ,
       blueDMA_readChannel_toDone$sFULL_N;

  // ports of submodule blueDMA_readChannel_toMasterReq_ff
  wire [99 : 0] blueDMA_readChannel_toMasterReq_ff$dD_OUT,
		blueDMA_readChannel_toMasterReq_ff$sD_IN;
  wire blueDMA_readChannel_toMasterReq_ff$dDEQ,
       blueDMA_readChannel_toMasterReq_ff$dEMPTY_N,
       blueDMA_readChannel_toMasterReq_ff$sENQ,
       blueDMA_readChannel_toMasterReq_ff$sFULL_N;

  // ports of submodule blueDMA_readChannel_toMaster_beatsPerRequestFIFO
  wire [7 : 0] blueDMA_readChannel_toMaster_beatsPerRequestFIFO$D_IN,
	       blueDMA_readChannel_toMaster_beatsPerRequestFIFO$D_OUT;
  wire blueDMA_readChannel_toMaster_beatsPerRequestFIFO$CLR,
       blueDMA_readChannel_toMaster_beatsPerRequestFIFO$DEQ,
       blueDMA_readChannel_toMaster_beatsPerRequestFIFO$EMPTY_N,
       blueDMA_readChannel_toMaster_beatsPerRequestFIFO$ENQ,
       blueDMA_readChannel_toMaster_beatsPerRequestFIFO$FULL_N;

  // ports of submodule blueDMA_readChannel_toMaster_incomingBuffer
  wire [511 : 0] blueDMA_readChannel_toMaster_incomingBuffer$D_IN,
		 blueDMA_readChannel_toMaster_incomingBuffer$D_OUT;
  wire blueDMA_readChannel_toMaster_incomingBuffer$CLR,
       blueDMA_readChannel_toMaster_incomingBuffer$DEQ,
       blueDMA_readChannel_toMaster_incomingBuffer$EMPTY_N,
       blueDMA_readChannel_toMaster_incomingBuffer$ENQ,
       blueDMA_readChannel_toMaster_incomingBuffer$FULL_N;

  // ports of submodule blueDMA_readChannel_toMaster_master_wr_in_addr
  wire [93 : 0] blueDMA_readChannel_toMaster_master_wr_in_addr$D_IN,
		blueDMA_readChannel_toMaster_master_wr_in_addr$D_OUT;
  wire blueDMA_readChannel_toMaster_master_wr_in_addr$CLR,
       blueDMA_readChannel_toMaster_master_wr_in_addr$DEQ,
       blueDMA_readChannel_toMaster_master_wr_in_addr$EMPTY_N,
       blueDMA_readChannel_toMaster_master_wr_in_addr$ENQ,
       blueDMA_readChannel_toMaster_master_wr_in_addr$FULL_N;

  // ports of submodule blueDMA_readChannel_toMaster_master_wr_in_data
  wire [576 : 0] blueDMA_readChannel_toMaster_master_wr_in_data$D_IN,
		 blueDMA_readChannel_toMaster_master_wr_in_data$D_OUT;
  wire blueDMA_readChannel_toMaster_master_wr_in_data$CLR,
       blueDMA_readChannel_toMaster_master_wr_in_data$DEQ,
       blueDMA_readChannel_toMaster_master_wr_in_data$EMPTY_N,
       blueDMA_readChannel_toMaster_master_wr_in_data$ENQ,
       blueDMA_readChannel_toMaster_master_wr_in_data$FULL_N;

  // ports of submodule blueDMA_readChannel_toMaster_master_wr_out
  wire [2 : 0] blueDMA_readChannel_toMaster_master_wr_out$D_IN;
  wire blueDMA_readChannel_toMaster_master_wr_out$CLR,
       blueDMA_readChannel_toMaster_master_wr_out$DEQ,
       blueDMA_readChannel_toMaster_master_wr_out$EMPTY_N,
       blueDMA_readChannel_toMaster_master_wr_out$ENQ,
       blueDMA_readChannel_toMaster_master_wr_out$FULL_N;

  // ports of submodule blueDMA_readChannel_toMaster_reqGen_incomingBuffer
  wire [99 : 0] blueDMA_readChannel_toMaster_reqGen_incomingBuffer$D_IN,
		blueDMA_readChannel_toMaster_reqGen_incomingBuffer$D_OUT;
  wire blueDMA_readChannel_toMaster_reqGen_incomingBuffer$CLR,
       blueDMA_readChannel_toMaster_reqGen_incomingBuffer$DEQ,
       blueDMA_readChannel_toMaster_reqGen_incomingBuffer$EMPTY_N,
       blueDMA_readChannel_toMaster_reqGen_incomingBuffer$ENQ,
       blueDMA_readChannel_toMaster_reqGen_incomingBuffer$FULL_N;

  // ports of submodule blueDMA_readChannel_toMaster_reqGen_intermediateBuffer
  wire [111 : 0] blueDMA_readChannel_toMaster_reqGen_intermediateBuffer$D_IN,
		 blueDMA_readChannel_toMaster_reqGen_intermediateBuffer$D_OUT;
  wire blueDMA_readChannel_toMaster_reqGen_intermediateBuffer$CLR,
       blueDMA_readChannel_toMaster_reqGen_intermediateBuffer$DEQ,
       blueDMA_readChannel_toMaster_reqGen_intermediateBuffer$EMPTY_N,
       blueDMA_readChannel_toMaster_reqGen_intermediateBuffer$ENQ,
       blueDMA_readChannel_toMaster_reqGen_intermediateBuffer$FULL_N;

  // ports of submodule blueDMA_readChannel_toMaster_reqGen_intermediateBuffer2
  wire [137 : 0] blueDMA_readChannel_toMaster_reqGen_intermediateBuffer2$D_IN,
		 blueDMA_readChannel_toMaster_reqGen_intermediateBuffer2$D_OUT;
  wire blueDMA_readChannel_toMaster_reqGen_intermediateBuffer2$CLR,
       blueDMA_readChannel_toMaster_reqGen_intermediateBuffer2$DEQ,
       blueDMA_readChannel_toMaster_reqGen_intermediateBuffer2$EMPTY_N,
       blueDMA_readChannel_toMaster_reqGen_intermediateBuffer2$ENQ,
       blueDMA_readChannel_toMaster_reqGen_intermediateBuffer2$FULL_N;

  // ports of submodule blueDMA_readChannel_toMaster_reqGen_intermediateBuffer3
  wire [146 : 0] blueDMA_readChannel_toMaster_reqGen_intermediateBuffer3$D_IN,
		 blueDMA_readChannel_toMaster_reqGen_intermediateBuffer3$D_OUT;
  wire blueDMA_readChannel_toMaster_reqGen_intermediateBuffer3$CLR,
       blueDMA_readChannel_toMaster_reqGen_intermediateBuffer3$DEQ,
       blueDMA_readChannel_toMaster_reqGen_intermediateBuffer3$EMPTY_N,
       blueDMA_readChannel_toMaster_reqGen_intermediateBuffer3$ENQ,
       blueDMA_readChannel_toMaster_reqGen_intermediateBuffer3$FULL_N;

  // ports of submodule blueDMA_readChannel_toMaster_reqGen_outgoingBuffer
  wire [157 : 0] blueDMA_readChannel_toMaster_reqGen_outgoingBuffer$D_IN,
		 blueDMA_readChannel_toMaster_reqGen_outgoingBuffer$D_OUT;
  wire blueDMA_readChannel_toMaster_reqGen_outgoingBuffer$CLR,
       blueDMA_readChannel_toMaster_reqGen_outgoingBuffer$DEQ,
       blueDMA_readChannel_toMaster_reqGen_outgoingBuffer$EMPTY_N,
       blueDMA_readChannel_toMaster_reqGen_outgoingBuffer$ENQ,
       blueDMA_readChannel_toMaster_reqGen_outgoingBuffer$FULL_N;

  // ports of submodule blueDMA_s_config_readSlave_in
  wire [66 : 0] blueDMA_s_config_readSlave_in$D_IN,
		blueDMA_s_config_readSlave_in$D_OUT;
  wire blueDMA_s_config_readSlave_in$CLR,
       blueDMA_s_config_readSlave_in$DEQ,
       blueDMA_s_config_readSlave_in$EMPTY_N,
       blueDMA_s_config_readSlave_in$ENQ,
       blueDMA_s_config_readSlave_in$FULL_N;

  // ports of submodule blueDMA_s_config_readSlave_out
  reg [65 : 0] blueDMA_s_config_readSlave_out$D_IN;
  wire [65 : 0] blueDMA_s_config_readSlave_out$D_OUT;
  wire blueDMA_s_config_readSlave_out$CLR,
       blueDMA_s_config_readSlave_out$DEQ,
       blueDMA_s_config_readSlave_out$EMPTY_N,
       blueDMA_s_config_readSlave_out$ENQ,
       blueDMA_s_config_readSlave_out$FULL_N;

  // ports of submodule blueDMA_s_config_writeSlave_in
  wire [138 : 0] blueDMA_s_config_writeSlave_in$D_IN,
		 blueDMA_s_config_writeSlave_in$D_OUT;
  wire blueDMA_s_config_writeSlave_in$CLR,
       blueDMA_s_config_writeSlave_in$DEQ,
       blueDMA_s_config_writeSlave_in$EMPTY_N,
       blueDMA_s_config_writeSlave_in$ENQ,
       blueDMA_s_config_writeSlave_in$FULL_N;

  // ports of submodule blueDMA_s_config_writeSlave_out
  wire [1 : 0] blueDMA_s_config_writeSlave_out$D_IN,
	       blueDMA_s_config_writeSlave_out$D_OUT;
  wire blueDMA_s_config_writeSlave_out$CLR,
       blueDMA_s_config_writeSlave_out$DEQ,
       blueDMA_s_config_writeSlave_out$EMPTY_N,
       blueDMA_s_config_writeSlave_out$ENQ,
       blueDMA_s_config_writeSlave_out$FULL_N;

  // ports of submodule blueDMA_writeChannel_byteAlignerFrom_addr_ff
  wire [159 : 0] blueDMA_writeChannel_byteAlignerFrom_addr_ff$dD_OUT,
		 blueDMA_writeChannel_byteAlignerFrom_addr_ff$sD_IN;
  wire blueDMA_writeChannel_byteAlignerFrom_addr_ff$dDEQ,
       blueDMA_writeChannel_byteAlignerFrom_addr_ff$dEMPTY_N,
       blueDMA_writeChannel_byteAlignerFrom_addr_ff$sENQ;

  // ports of submodule blueDMA_writeChannel_byteAlignerFrom_incoming
  wire [511 : 0] blueDMA_writeChannel_byteAlignerFrom_incoming$D_IN,
		 blueDMA_writeChannel_byteAlignerFrom_incoming$D_OUT;
  wire blueDMA_writeChannel_byteAlignerFrom_incoming$CLR,
       blueDMA_writeChannel_byteAlignerFrom_incoming$DEQ,
       blueDMA_writeChannel_byteAlignerFrom_incoming$EMPTY_N,
       blueDMA_writeChannel_byteAlignerFrom_incoming$ENQ;

  // ports of submodule blueDMA_writeChannel_byteAlignerFrom_outgoing
  wire [511 : 0] blueDMA_writeChannel_byteAlignerFrom_outgoing$D_IN;
  wire blueDMA_writeChannel_byteAlignerFrom_outgoing$CLR,
       blueDMA_writeChannel_byteAlignerFrom_outgoing$DEQ,
       blueDMA_writeChannel_byteAlignerFrom_outgoing$ENQ,
       blueDMA_writeChannel_byteAlignerFrom_outgoing$FULL_N;

  // ports of submodule blueDMA_writeChannel_byteAlignerTo_addr_ff
  wire [159 : 0] blueDMA_writeChannel_byteAlignerTo_addr_ff$dD_OUT,
		 blueDMA_writeChannel_byteAlignerTo_addr_ff$sD_IN;
  wire blueDMA_writeChannel_byteAlignerTo_addr_ff$dDEQ,
       blueDMA_writeChannel_byteAlignerTo_addr_ff$dEMPTY_N,
       blueDMA_writeChannel_byteAlignerTo_addr_ff$sENQ;

  // ports of submodule blueDMA_writeChannel_byteAlignerTo_incoming
  wire [511 : 0] blueDMA_writeChannel_byteAlignerTo_incoming$D_IN,
		 blueDMA_writeChannel_byteAlignerTo_incoming$D_OUT;
  wire blueDMA_writeChannel_byteAlignerTo_incoming$CLR,
       blueDMA_writeChannel_byteAlignerTo_incoming$DEQ,
       blueDMA_writeChannel_byteAlignerTo_incoming$EMPTY_N,
       blueDMA_writeChannel_byteAlignerTo_incoming$ENQ;

  // ports of submodule blueDMA_writeChannel_byteAlignerTo_outgoing
  wire [511 : 0] blueDMA_writeChannel_byteAlignerTo_outgoing$D_IN;
  wire blueDMA_writeChannel_byteAlignerTo_outgoing$CLR,
       blueDMA_writeChannel_byteAlignerTo_outgoing$DEQ,
       blueDMA_writeChannel_byteAlignerTo_outgoing$ENQ,
       blueDMA_writeChannel_byteAlignerTo_outgoing$FULL_N;

  // ports of submodule blueDMA_writeChannel_clockConverter_fifo
  wire [511 : 0] blueDMA_writeChannel_clockConverter_fifo$dD_OUT,
		 blueDMA_writeChannel_clockConverter_fifo$sD_IN;
  wire blueDMA_writeChannel_clockConverter_fifo$dDEQ,
       blueDMA_writeChannel_clockConverter_fifo$dEMPTY_N,
       blueDMA_writeChannel_clockConverter_fifo$sENQ,
       blueDMA_writeChannel_clockConverter_fifo$sFULL_N;

  // ports of submodule blueDMA_writeChannel_cmdIn
  wire [159 : 0] blueDMA_writeChannel_cmdIn$D_IN,
		 blueDMA_writeChannel_cmdIn$D_OUT;
  wire blueDMA_writeChannel_cmdIn$CLR,
       blueDMA_writeChannel_cmdIn$DEQ,
       blueDMA_writeChannel_cmdIn$EMPTY_N,
       blueDMA_writeChannel_cmdIn$ENQ,
       blueDMA_writeChannel_cmdIn$FULL_N;

  // ports of submodule blueDMA_writeChannel_fromDone
  wire blueDMA_writeChannel_fromDone$dDEQ,
       blueDMA_writeChannel_fromDone$dEMPTY_N,
       blueDMA_writeChannel_fromDone$sD_IN,
       blueDMA_writeChannel_fromDone$sENQ,
       blueDMA_writeChannel_fromDone$sFULL_N;

  // ports of submodule blueDMA_writeChannel_fromMasterReq_ff
  wire [99 : 0] blueDMA_writeChannel_fromMasterReq_ff$dD_OUT,
		blueDMA_writeChannel_fromMasterReq_ff$sD_IN;
  wire blueDMA_writeChannel_fromMasterReq_ff$dDEQ,
       blueDMA_writeChannel_fromMasterReq_ff$dEMPTY_N,
       blueDMA_writeChannel_fromMasterReq_ff$sENQ,
       blueDMA_writeChannel_fromMasterReq_ff$sFULL_N;

  // ports of submodule blueDMA_writeChannel_fromMaster_master_rd_in
  wire [93 : 0] blueDMA_writeChannel_fromMaster_master_rd_in$D_IN,
		blueDMA_writeChannel_fromMaster_master_rd_in$D_OUT;
  wire blueDMA_writeChannel_fromMaster_master_rd_in$CLR,
       blueDMA_writeChannel_fromMaster_master_rd_in$DEQ,
       blueDMA_writeChannel_fromMaster_master_rd_in$EMPTY_N,
       blueDMA_writeChannel_fromMaster_master_rd_in$ENQ,
       blueDMA_writeChannel_fromMaster_master_rd_in$FULL_N;

  // ports of submodule blueDMA_writeChannel_fromMaster_master_rd_out
  wire [515 : 0] blueDMA_writeChannel_fromMaster_master_rd_out$D_IN,
		 blueDMA_writeChannel_fromMaster_master_rd_out$D_OUT;
  wire blueDMA_writeChannel_fromMaster_master_rd_out$CLR,
       blueDMA_writeChannel_fromMaster_master_rd_out$DEQ,
       blueDMA_writeChannel_fromMaster_master_rd_out$EMPTY_N,
       blueDMA_writeChannel_fromMaster_master_rd_out$ENQ,
       blueDMA_writeChannel_fromMaster_master_rd_out$FULL_N;

  // ports of submodule blueDMA_writeChannel_fromMaster_maxOutstandingFIFO
  wire blueDMA_writeChannel_fromMaster_maxOutstandingFIFO$CLR,
       blueDMA_writeChannel_fromMaster_maxOutstandingFIFO$DEQ,
       blueDMA_writeChannel_fromMaster_maxOutstandingFIFO$D_IN,
       blueDMA_writeChannel_fromMaster_maxOutstandingFIFO$EMPTY_N,
       blueDMA_writeChannel_fromMaster_maxOutstandingFIFO$ENQ,
       blueDMA_writeChannel_fromMaster_maxOutstandingFIFO$FULL_N;

  // ports of submodule blueDMA_writeChannel_fromMaster_outgoingBuffer
  wire [511 : 0] blueDMA_writeChannel_fromMaster_outgoingBuffer$D_IN,
		 blueDMA_writeChannel_fromMaster_outgoingBuffer$D_OUT;
  wire blueDMA_writeChannel_fromMaster_outgoingBuffer$CLR,
       blueDMA_writeChannel_fromMaster_outgoingBuffer$DEQ,
       blueDMA_writeChannel_fromMaster_outgoingBuffer$EMPTY_N,
       blueDMA_writeChannel_fromMaster_outgoingBuffer$ENQ,
       blueDMA_writeChannel_fromMaster_outgoingBuffer$FULL_N;

  // ports of submodule blueDMA_writeChannel_fromMaster_reqGen_incomingBuffer
  wire [99 : 0] blueDMA_writeChannel_fromMaster_reqGen_incomingBuffer$D_IN,
		blueDMA_writeChannel_fromMaster_reqGen_incomingBuffer$D_OUT;
  wire blueDMA_writeChannel_fromMaster_reqGen_incomingBuffer$CLR,
       blueDMA_writeChannel_fromMaster_reqGen_incomingBuffer$DEQ,
       blueDMA_writeChannel_fromMaster_reqGen_incomingBuffer$EMPTY_N,
       blueDMA_writeChannel_fromMaster_reqGen_incomingBuffer$ENQ,
       blueDMA_writeChannel_fromMaster_reqGen_incomingBuffer$FULL_N;

  // ports of submodule blueDMA_writeChannel_fromMaster_reqGen_intermediateBuffer
  wire [111 : 0] blueDMA_writeChannel_fromMaster_reqGen_intermediateBuffer$D_IN,
		 blueDMA_writeChannel_fromMaster_reqGen_intermediateBuffer$D_OUT;
  wire blueDMA_writeChannel_fromMaster_reqGen_intermediateBuffer$CLR,
       blueDMA_writeChannel_fromMaster_reqGen_intermediateBuffer$DEQ,
       blueDMA_writeChannel_fromMaster_reqGen_intermediateBuffer$EMPTY_N,
       blueDMA_writeChannel_fromMaster_reqGen_intermediateBuffer$ENQ,
       blueDMA_writeChannel_fromMaster_reqGen_intermediateBuffer$FULL_N;

  // ports of submodule blueDMA_writeChannel_fromMaster_reqGen_intermediateBuffer2
  wire [137 : 0] blueDMA_writeChannel_fromMaster_reqGen_intermediateBuffer2$D_IN,
		 blueDMA_writeChannel_fromMaster_reqGen_intermediateBuffer2$D_OUT;
  wire blueDMA_writeChannel_fromMaster_reqGen_intermediateBuffer2$CLR,
       blueDMA_writeChannel_fromMaster_reqGen_intermediateBuffer2$DEQ,
       blueDMA_writeChannel_fromMaster_reqGen_intermediateBuffer2$EMPTY_N,
       blueDMA_writeChannel_fromMaster_reqGen_intermediateBuffer2$ENQ,
       blueDMA_writeChannel_fromMaster_reqGen_intermediateBuffer2$FULL_N;

  // ports of submodule blueDMA_writeChannel_fromMaster_reqGen_intermediateBuffer3
  wire [146 : 0] blueDMA_writeChannel_fromMaster_reqGen_intermediateBuffer3$D_IN,
		 blueDMA_writeChannel_fromMaster_reqGen_intermediateBuffer3$D_OUT;
  wire blueDMA_writeChannel_fromMaster_reqGen_intermediateBuffer3$CLR,
       blueDMA_writeChannel_fromMaster_reqGen_intermediateBuffer3$DEQ,
       blueDMA_writeChannel_fromMaster_reqGen_intermediateBuffer3$EMPTY_N,
       blueDMA_writeChannel_fromMaster_reqGen_intermediateBuffer3$ENQ,
       blueDMA_writeChannel_fromMaster_reqGen_intermediateBuffer3$FULL_N;

  // ports of submodule blueDMA_writeChannel_fromMaster_reqGen_outgoingBuffer
  wire [157 : 0] blueDMA_writeChannel_fromMaster_reqGen_outgoingBuffer$D_IN,
		 blueDMA_writeChannel_fromMaster_reqGen_outgoingBuffer$D_OUT;
  wire blueDMA_writeChannel_fromMaster_reqGen_outgoingBuffer$CLR,
       blueDMA_writeChannel_fromMaster_reqGen_outgoingBuffer$DEQ,
       blueDMA_writeChannel_fromMaster_reqGen_outgoingBuffer$EMPTY_N,
       blueDMA_writeChannel_fromMaster_reqGen_outgoingBuffer$ENQ,
       blueDMA_writeChannel_fromMaster_reqGen_outgoingBuffer$FULL_N;

  // ports of submodule blueDMA_writeChannel_mimoConv_ff
  wire [63 : 0] blueDMA_writeChannel_mimoConv_ff$dD_OUT,
		blueDMA_writeChannel_mimoConv_ff$sD_IN;
  wire blueDMA_writeChannel_mimoConv_ff$dDEQ,
       blueDMA_writeChannel_mimoConv_ff$dEMPTY_N,
       blueDMA_writeChannel_mimoConv_ff$sENQ,
       blueDMA_writeChannel_mimoConv_ff$sFULL_N;

  // ports of submodule blueDMA_writeChannel_mimo_impl
  wire [511 : 0] blueDMA_writeChannel_mimo_impl$D_IN,
		 blueDMA_writeChannel_mimo_impl$D_OUT;
  wire blueDMA_writeChannel_mimo_impl$CLR,
       blueDMA_writeChannel_mimo_impl$DEQ,
       blueDMA_writeChannel_mimo_impl$EMPTY_N,
       blueDMA_writeChannel_mimo_impl$ENQ,
       blueDMA_writeChannel_mimo_impl$FULL_N;

  // ports of submodule blueDMA_writeChannel_toDone
  wire blueDMA_writeChannel_toDone$dDEQ,
       blueDMA_writeChannel_toDone$dEMPTY_N,
       blueDMA_writeChannel_toDone$sD_IN,
       blueDMA_writeChannel_toDone$sENQ,
       blueDMA_writeChannel_toDone$sFULL_N;

  // ports of submodule blueDMA_writeChannel_toMasterReq_ff
  wire [99 : 0] blueDMA_writeChannel_toMasterReq_ff$dD_OUT,
		blueDMA_writeChannel_toMasterReq_ff$sD_IN;
  wire blueDMA_writeChannel_toMasterReq_ff$dDEQ,
       blueDMA_writeChannel_toMasterReq_ff$dEMPTY_N,
       blueDMA_writeChannel_toMasterReq_ff$sENQ,
       blueDMA_writeChannel_toMasterReq_ff$sFULL_N;

  // ports of submodule blueDMA_writeChannel_toMaster_beatsPerRequestFIFO
  wire [7 : 0] blueDMA_writeChannel_toMaster_beatsPerRequestFIFO$D_IN,
	       blueDMA_writeChannel_toMaster_beatsPerRequestFIFO$D_OUT;
  wire blueDMA_writeChannel_toMaster_beatsPerRequestFIFO$CLR,
       blueDMA_writeChannel_toMaster_beatsPerRequestFIFO$DEQ,
       blueDMA_writeChannel_toMaster_beatsPerRequestFIFO$EMPTY_N,
       blueDMA_writeChannel_toMaster_beatsPerRequestFIFO$ENQ,
       blueDMA_writeChannel_toMaster_beatsPerRequestFIFO$FULL_N;

  // ports of submodule blueDMA_writeChannel_toMaster_incomingBuffer
  wire [511 : 0] blueDMA_writeChannel_toMaster_incomingBuffer$D_IN,
		 blueDMA_writeChannel_toMaster_incomingBuffer$D_OUT;
  wire blueDMA_writeChannel_toMaster_incomingBuffer$CLR,
       blueDMA_writeChannel_toMaster_incomingBuffer$DEQ,
       blueDMA_writeChannel_toMaster_incomingBuffer$EMPTY_N,
       blueDMA_writeChannel_toMaster_incomingBuffer$ENQ,
       blueDMA_writeChannel_toMaster_incomingBuffer$FULL_N;

  // ports of submodule blueDMA_writeChannel_toMaster_master_wr_in_addr
  wire [93 : 0] blueDMA_writeChannel_toMaster_master_wr_in_addr$D_IN,
		blueDMA_writeChannel_toMaster_master_wr_in_addr$D_OUT;
  wire blueDMA_writeChannel_toMaster_master_wr_in_addr$CLR,
       blueDMA_writeChannel_toMaster_master_wr_in_addr$DEQ,
       blueDMA_writeChannel_toMaster_master_wr_in_addr$EMPTY_N,
       blueDMA_writeChannel_toMaster_master_wr_in_addr$ENQ,
       blueDMA_writeChannel_toMaster_master_wr_in_addr$FULL_N;

  // ports of submodule blueDMA_writeChannel_toMaster_master_wr_in_data
  wire [576 : 0] blueDMA_writeChannel_toMaster_master_wr_in_data$D_IN,
		 blueDMA_writeChannel_toMaster_master_wr_in_data$D_OUT;
  wire blueDMA_writeChannel_toMaster_master_wr_in_data$CLR,
       blueDMA_writeChannel_toMaster_master_wr_in_data$DEQ,
       blueDMA_writeChannel_toMaster_master_wr_in_data$EMPTY_N,
       blueDMA_writeChannel_toMaster_master_wr_in_data$ENQ,
       blueDMA_writeChannel_toMaster_master_wr_in_data$FULL_N;

  // ports of submodule blueDMA_writeChannel_toMaster_master_wr_out
  wire [2 : 0] blueDMA_writeChannel_toMaster_master_wr_out$D_IN;
  wire blueDMA_writeChannel_toMaster_master_wr_out$CLR,
       blueDMA_writeChannel_toMaster_master_wr_out$DEQ,
       blueDMA_writeChannel_toMaster_master_wr_out$EMPTY_N,
       blueDMA_writeChannel_toMaster_master_wr_out$ENQ,
       blueDMA_writeChannel_toMaster_master_wr_out$FULL_N;

  // ports of submodule blueDMA_writeChannel_toMaster_reqGen_incomingBuffer
  wire [99 : 0] blueDMA_writeChannel_toMaster_reqGen_incomingBuffer$D_IN,
		blueDMA_writeChannel_toMaster_reqGen_incomingBuffer$D_OUT;
  wire blueDMA_writeChannel_toMaster_reqGen_incomingBuffer$CLR,
       blueDMA_writeChannel_toMaster_reqGen_incomingBuffer$DEQ,
       blueDMA_writeChannel_toMaster_reqGen_incomingBuffer$EMPTY_N,
       blueDMA_writeChannel_toMaster_reqGen_incomingBuffer$ENQ,
       blueDMA_writeChannel_toMaster_reqGen_incomingBuffer$FULL_N;

  // ports of submodule blueDMA_writeChannel_toMaster_reqGen_intermediateBuffer
  wire [111 : 0] blueDMA_writeChannel_toMaster_reqGen_intermediateBuffer$D_IN,
		 blueDMA_writeChannel_toMaster_reqGen_intermediateBuffer$D_OUT;
  wire blueDMA_writeChannel_toMaster_reqGen_intermediateBuffer$CLR,
       blueDMA_writeChannel_toMaster_reqGen_intermediateBuffer$DEQ,
       blueDMA_writeChannel_toMaster_reqGen_intermediateBuffer$EMPTY_N,
       blueDMA_writeChannel_toMaster_reqGen_intermediateBuffer$ENQ,
       blueDMA_writeChannel_toMaster_reqGen_intermediateBuffer$FULL_N;

  // ports of submodule blueDMA_writeChannel_toMaster_reqGen_intermediateBuffer2
  wire [137 : 0] blueDMA_writeChannel_toMaster_reqGen_intermediateBuffer2$D_IN,
		 blueDMA_writeChannel_toMaster_reqGen_intermediateBuffer2$D_OUT;
  wire blueDMA_writeChannel_toMaster_reqGen_intermediateBuffer2$CLR,
       blueDMA_writeChannel_toMaster_reqGen_intermediateBuffer2$DEQ,
       blueDMA_writeChannel_toMaster_reqGen_intermediateBuffer2$EMPTY_N,
       blueDMA_writeChannel_toMaster_reqGen_intermediateBuffer2$ENQ,
       blueDMA_writeChannel_toMaster_reqGen_intermediateBuffer2$FULL_N;

  // ports of submodule blueDMA_writeChannel_toMaster_reqGen_intermediateBuffer3
  wire [146 : 0] blueDMA_writeChannel_toMaster_reqGen_intermediateBuffer3$D_IN,
		 blueDMA_writeChannel_toMaster_reqGen_intermediateBuffer3$D_OUT;
  wire blueDMA_writeChannel_toMaster_reqGen_intermediateBuffer3$CLR,
       blueDMA_writeChannel_toMaster_reqGen_intermediateBuffer3$DEQ,
       blueDMA_writeChannel_toMaster_reqGen_intermediateBuffer3$EMPTY_N,
       blueDMA_writeChannel_toMaster_reqGen_intermediateBuffer3$ENQ,
       blueDMA_writeChannel_toMaster_reqGen_intermediateBuffer3$FULL_N;

  // ports of submodule blueDMA_writeChannel_toMaster_reqGen_outgoingBuffer
  wire [157 : 0] blueDMA_writeChannel_toMaster_reqGen_outgoingBuffer$D_IN,
		 blueDMA_writeChannel_toMaster_reqGen_outgoingBuffer$D_OUT;
  wire blueDMA_writeChannel_toMaster_reqGen_outgoingBuffer$CLR,
       blueDMA_writeChannel_toMaster_reqGen_outgoingBuffer$DEQ,
       blueDMA_writeChannel_toMaster_reqGen_outgoingBuffer$EMPTY_N,
       blueDMA_writeChannel_toMaster_reqGen_outgoingBuffer$ENQ,
       blueDMA_writeChannel_toMaster_reqGen_outgoingBuffer$FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_blueDMA_readChannel_byteAlignerFrom_forwardOutputLast,
       CAN_FIRE_RL_blueDMA_readChannel_byteAlignerTo_forwardOutputLast,
       CAN_FIRE_RL_blueDMA_writeChannel_byteAlignerFrom_forwardOutputLast,
       CAN_FIRE_RL_blueDMA_writeChannel_byteAlignerTo_forwardOutputLast,
       WILL_FIRE_RL_blueDMA_readChannel_byteAlignerFrom_fetchNewData,
       WILL_FIRE_RL_blueDMA_readChannel_byteAlignerFrom_forwardOutput,
       WILL_FIRE_RL_blueDMA_readChannel_byteAlignerFrom_forwardOutputLast,
       WILL_FIRE_RL_blueDMA_readChannel_byteAlignerTo_fetchNewData,
       WILL_FIRE_RL_blueDMA_readChannel_byteAlignerTo_forwardOutput,
       WILL_FIRE_RL_blueDMA_readChannel_byteAlignerTo_forwardOutputLast,
       WILL_FIRE_RL_blueDMA_readChannel_fromMaster_fillBuffer,
       WILL_FIRE_RL_blueDMA_readChannel_fromMaster_forwardData,
       WILL_FIRE_RL_blueDMA_readChannel_fromMaster_placeRequest,
       WILL_FIRE_RL_blueDMA_readChannel_fromMaster_reqGen_finishRequest,
       WILL_FIRE_RL_blueDMA_readChannel_handleCommand,
       WILL_FIRE_RL_blueDMA_readChannel_setInterrupt,
       WILL_FIRE_RL_blueDMA_readChannel_toMaster_fillBuffer,
       WILL_FIRE_RL_blueDMA_readChannel_toMaster_forwardData,
       WILL_FIRE_RL_blueDMA_readChannel_toMaster_placeRequest,
       WILL_FIRE_RL_blueDMA_readChannel_toMaster_reqGen_finishRequest,
       WILL_FIRE_RL_blueDMA_s_config_1_axiWriteFallback,
       WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial,
       WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecialIsHandled,
       WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecialIsHandled_1,
       WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecialIsHandled_2,
       WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecialIsHandled_3,
       WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecialIsHandled_4,
       WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecialIsHandled_5,
       WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_1,
       WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_2,
       WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_3,
       WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_4,
       WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_5,
       WILL_FIRE_RL_blueDMA_s_config_axiReadFallback,
       WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial,
       WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled,
       WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_1,
       WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_10,
       WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_11,
       WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_2,
       WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_3,
       WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_4,
       WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_5,
       WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_6,
       WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_7,
       WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_8,
       WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_9,
       WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_1,
       WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_10,
       WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_11,
       WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_2,
       WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_3,
       WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_4,
       WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_5,
       WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_6,
       WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_7,
       WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_8,
       WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_9,
       WILL_FIRE_RL_blueDMA_writeChannel_byteAlignerFrom_fetchNewData,
       WILL_FIRE_RL_blueDMA_writeChannel_byteAlignerFrom_forwardOutput,
       WILL_FIRE_RL_blueDMA_writeChannel_byteAlignerFrom_forwardOutputLast,
       WILL_FIRE_RL_blueDMA_writeChannel_byteAlignerTo_fetchNewData,
       WILL_FIRE_RL_blueDMA_writeChannel_byteAlignerTo_forwardOutput,
       WILL_FIRE_RL_blueDMA_writeChannel_byteAlignerTo_forwardOutputLast,
       WILL_FIRE_RL_blueDMA_writeChannel_fromMaster_fillBuffer,
       WILL_FIRE_RL_blueDMA_writeChannel_fromMaster_forwardData,
       WILL_FIRE_RL_blueDMA_writeChannel_fromMaster_placeRequest,
       WILL_FIRE_RL_blueDMA_writeChannel_fromMaster_reqGen_finishRequest,
       WILL_FIRE_RL_blueDMA_writeChannel_handleCommand,
       WILL_FIRE_RL_blueDMA_writeChannel_setInterrupt,
       WILL_FIRE_RL_blueDMA_writeChannel_toMaster_fillBuffer,
       WILL_FIRE_RL_blueDMA_writeChannel_toMaster_forwardData,
       WILL_FIRE_RL_blueDMA_writeChannel_toMaster_placeRequest,
       WILL_FIRE_RL_blueDMA_writeChannel_toMaster_reqGen_finishRequest;

  // inputs to muxes for submodule ports
  wire [1023 : 0] MUX_blueDMA_readChannel_byteAlignerFrom_buffer$port0__write_1__VAL_1,
		  MUX_blueDMA_readChannel_byteAlignerTo_buffer$port0__write_1__VAL_1,
		  MUX_blueDMA_writeChannel_byteAlignerFrom_buffer$port0__write_1__VAL_1,
		  MUX_blueDMA_writeChannel_byteAlignerTo_buffer$port0__write_1__VAL_1;
  wire [112 : 0] MUX_blueDMA_readChannel_fromMaster_task_data_requests_reg$write_1__VAL_1,
		 MUX_blueDMA_readChannel_toMaster_task_data_requests_reg$write_1__VAL_1,
		 MUX_blueDMA_writeChannel_fromMaster_task_data_requests_reg$write_1__VAL_1,
		 MUX_blueDMA_writeChannel_toMaster_task_data_requests_reg$write_1__VAL_1;
  wire [65 : 0] MUX_blueDMA_s_config_readSlave_out$enq_1__VAL_1,
		MUX_blueDMA_s_config_readSlave_out$enq_1__VAL_10,
		MUX_blueDMA_s_config_readSlave_out$enq_1__VAL_11,
		MUX_blueDMA_s_config_readSlave_out$enq_1__VAL_12,
		MUX_blueDMA_s_config_readSlave_out$enq_1__VAL_2,
		MUX_blueDMA_s_config_readSlave_out$enq_1__VAL_3,
		MUX_blueDMA_s_config_readSlave_out$enq_1__VAL_4,
		MUX_blueDMA_s_config_readSlave_out$enq_1__VAL_5,
		MUX_blueDMA_s_config_readSlave_out$enq_1__VAL_6,
		MUX_blueDMA_s_config_readSlave_out$enq_1__VAL_7,
		MUX_blueDMA_s_config_readSlave_out$enq_1__VAL_8,
		MUX_blueDMA_s_config_readSlave_out$enq_1__VAL_9;
  wire [44 : 0] MUX_blueDMA_readChannel_fromMaster_task_data_output_reg$write_1__VAL_1,
		MUX_blueDMA_readChannel_toMaster_task_data_output_reg$write_1__VAL_1,
		MUX_blueDMA_writeChannel_fromMaster_task_data_output_reg$write_1__VAL_1,
		MUX_blueDMA_writeChannel_toMaster_task_data_output_reg$write_1__VAL_1;
  wire [31 : 0] MUX_blueDMA_readChannel_byteAlignerFrom_bytes_in$write_1__VAL_1,
		MUX_blueDMA_readChannel_byteAlignerFrom_bytes_out$write_1__VAL_1,
		MUX_blueDMA_readChannel_byteAlignerFrom_bytes_out$write_1__VAL_2,
		MUX_blueDMA_readChannel_byteAlignerTo_bytes_in$write_1__VAL_1,
		MUX_blueDMA_readChannel_byteAlignerTo_bytes_out$write_1__VAL_1,
		MUX_blueDMA_readChannel_byteAlignerTo_bytes_out$write_1__VAL_2,
		MUX_blueDMA_writeChannel_byteAlignerFrom_bytes_in$write_1__VAL_1,
		MUX_blueDMA_writeChannel_byteAlignerFrom_bytes_out$write_1__VAL_1,
		MUX_blueDMA_writeChannel_byteAlignerFrom_bytes_out$write_1__VAL_2,
		MUX_blueDMA_writeChannel_byteAlignerTo_bytes_in$write_1__VAL_1,
		MUX_blueDMA_writeChannel_byteAlignerTo_bytes_out$write_1__VAL_1,
		MUX_blueDMA_writeChannel_byteAlignerTo_bytes_out$write_1__VAL_2;
  wire [25 : 0] MUX_blueDMA_readChannel_mimo_words_left$write_1__VAL_2,
		MUX_blueDMA_writeChannel_mimo_words_left$write_1__VAL_2;
  wire [7 : 0] MUX_blueDMA_readChannel_toMaster_beatsThisRequestCntr$write_1__VAL_1,
	       MUX_blueDMA_readChannel_toMaster_outstanding_writes$write_1__VAL_1,
	       MUX_blueDMA_readChannel_toMaster_outstanding_writes$write_1__VAL_2,
	       MUX_blueDMA_writeChannel_toMaster_beatsThisRequestCntr$write_1__VAL_1,
	       MUX_blueDMA_writeChannel_toMaster_outstanding_writes$write_1__VAL_1,
	       MUX_blueDMA_writeChannel_toMaster_outstanding_writes$write_1__VAL_2;
  wire [6 : 0] MUX_blueDMA_readChannel_byteAlignerFrom_bytes_left_in_buffer$port0__write_1__VAL_1,
	       MUX_blueDMA_readChannel_byteAlignerFrom_bytes_out_needed$write_1__VAL_1,
	       MUX_blueDMA_readChannel_byteAlignerTo_bytes_left_in_buffer$port0__write_1__VAL_1,
	       MUX_blueDMA_readChannel_byteAlignerTo_bytes_out_needed$write_1__VAL_1,
	       MUX_blueDMA_writeChannel_byteAlignerFrom_bytes_left_in_buffer$port0__write_1__VAL_1,
	       MUX_blueDMA_writeChannel_byteAlignerFrom_bytes_out_needed$write_1__VAL_1,
	       MUX_blueDMA_writeChannel_byteAlignerTo_bytes_left_in_buffer$port0__write_1__VAL_1,
	       MUX_blueDMA_writeChannel_byteAlignerTo_bytes_out_needed$write_1__VAL_1;
  wire MUX_blueDMA_readChannel_mimo_words_left$write_1__SEL_2,
       MUX_blueDMA_readChannel_toMaster_outstanding_writes$write_1__SEL_2,
       MUX_blueDMA_writeChannel_mimo_words_left$write_1__SEL_2,
       MUX_blueDMA_writeChannel_toMaster_outstanding_writes$write_1__SEL_2;

  // remaining internal signals
  reg [63 : 0] v__h198067, v__h4016;
  reg [3 : 0] CASE_blueDMA_readChannel_fromMaster_master_rd__ETC__q3,
	      CASE_blueDMA_readChannel_toMaster_master_wr_wa_ETC__q4,
	      CASE_blueDMA_writeChannel_fromMaster_master_rd_ETC__q1,
	      CASE_blueDMA_writeChannel_toMaster_master_wr_w_ETC__q2;
  wire [63 : 0] _theResult____h1131,
		_theResult____h195207,
		_theResult____h199255,
		_theResult____h5204,
		bytes_first___1__h1162,
		bytes_first___1__h195238,
		bytes_first___1__h199286,
		bytes_first___1__h5235,
		bytes_first__h1130,
		bytes_first__h195206,
		bytes_first__h199254,
		bytes_first__h5203,
		v__h401740,
		v__h401883,
		v__h402026,
		v__h402170,
		v__h402314,
		v__h402457,
		v__h402601,
		v__h402745,
		x__h1136,
		x__h195212,
		x__h199260,
		x__h5209,
		x_strb__h203175,
		x_strb__h9127;
  wire [31 : 0] IF_blueDMA_readChannel_mimoConv_ff_first__644__ETC___d1650,
		IF_blueDMA_writeChannel_mimoConv_ff_first__31__ETC___d737,
		_theResult____h1308,
		_theResult____h195384,
		_theResult____h199432,
		_theResult____h5381,
		b__h166757,
		b__h275046,
		b__h360805,
		b__h80998,
		blueDMA_readChannel_fromMaster_reqGen_incoming_ETC__q5,
		blueDMA_readChannel_toMaster_reqGen_incomingBu_ETC__q6,
		blueDMA_writeChannel_fromMaster_reqGen_incomin_ETC__q7,
		blueDMA_writeChannel_toMaster_reqGen_incomingB_ETC__q8,
		transfers_total___1__h1316,
		transfers_total___1__h195392,
		transfers_total___1__h199440,
		transfers_total___1__h5389,
		transfers_total__h1307,
		transfers_total__h1313,
		transfers_total__h195383,
		transfers_total__h195389,
		transfers_total__h199431,
		transfers_total__h199437,
		transfers_total__h5380,
		transfers_total__h5386,
		x__h1310,
		x__h1336,
		x__h195386,
		x__h195412,
		x__h199434,
		x__h199460,
		x__h5383,
		x__h5409,
		y__h1203,
		y__h1337,
		y__h1339,
		y__h195279,
		y__h195413,
		y__h195415,
		y__h199327,
		y__h199461,
		y__h199463,
		y__h5276,
		y__h5410,
		y__h5412;
  wire [25 : 0] _theResult____h1659,
		_theResult____h195735,
		_theResult____h199783,
		_theResult____h5732,
		blueDMA_readChannel_fromMaster_reqGen_intermed_ETC___d988,
		blueDMA_readChannel_toMaster_reqGen_intermedia_ETC___d1181,
		blueDMA_writeChannel_fromMaster_reqGen_interme_ETC___d75,
		blueDMA_writeChannel_toMaster_reqGen_intermedi_ETC___d268,
		request_data_requests_total__h1626,
		request_data_requests_total__h195702,
		request_data_requests_total__h199750,
		request_data_requests_total__h5699,
		requests_total___1__h1666,
		requests_total___1__h195742,
		requests_total___1__h199790,
		requests_total___1__h5739,
		requests_total__h1579,
		requests_total__h1663,
		requests_total__h195655,
		requests_total__h195739,
		requests_total__h199703,
		requests_total__h199787,
		requests_total__h5652,
		requests_total__h5736,
		x_requests_total__h198021,
		x_requests_total__h202793,
		x_requests_total__h3970,
		x_requests_total__h8745,
		x_transfers_total__h198356,
		x_transfers_total__h20045,
		x_transfers_total__h214093,
		x_transfers_total__h4305;
  wire [20 : 0] x_address_dynamic__h198023,
		x_address_dynamic__h202795,
		x_address_dynamic__h3972,
		x_address_dynamic__h8747;
  wire [12 : 0] x__h1537, x__h195613, x__h199661, x__h5610;
  wire [11 : 0] addr_last__h1483,
		addr_last__h1484,
		addr_last__h195559,
		addr_last__h195560,
		addr_last__h199607,
		addr_last__h199608,
		addr_last__h5556,
		addr_last__h5557,
		barrier_transfers__h1527,
		barrier_transfers__h195603,
		barrier_transfers__h199651,
		barrier_transfers__h5600,
		y__h1504,
		y__h195580,
		y__h199628,
		y__h5577;
  wire [8 : 0] burst_length__h1481,
	       burst_length__h195557,
	       burst_length__h199605,
	       burst_length__h5554,
	       requests_first__h1412,
	       requests_first__h195488,
	       requests_first__h199536,
	       requests_first__h5485,
	       x__h1652,
	       x__h195728,
	       x__h197937,
	       x__h197947,
	       x__h199776,
	       x__h202680,
	       x__h202690,
	       x__h3886,
	       x__h3896,
	       x__h5725,
	       x__h8632,
	       x__h8642;
  wire [7 : 0] _theResult_____2__h197885,
	       _theResult_____2__h3834,
	       _theResult_____3__h202628,
	       _theResult_____3__h8580,
	       beatsThisRequestCntrT__h203061,
	       beatsThisRequestCntrT__h9013;
  wire [6 : 0] IF_blueDMA_readChannel_toMaster_task_data_outp_ETC___d1325,
	       IF_blueDMA_writeChannel_toMaster_task_data_out_ETC___d412,
	       b__h106807,
	       b__h135394,
	       b__h192552,
	       b__h243683,
	       b__h300855,
	       b__h329442,
	       b__h386600,
	       b__h49635,
	       endByte___1__h12036,
	       endByte___1__h12062,
	       endByte___1__h206084,
	       endByte___1__h206110,
	       startByte___1__h12035,
	       startByte___1__h206083,
	       x__h12022,
	       x__h206070;
  wire blueDMA_readChannel_byteAlignerFrom_bytes_in_6_ETC___d1663,
       blueDMA_readChannel_byteAlignerFrom_bytes_left_ETC___d1678,
       blueDMA_readChannel_byteAlignerTo_bytes_in_718_ETC___d1720,
       blueDMA_readChannel_byteAlignerTo_bytes_left_i_ETC___d1735,
       blueDMA_readChannel_perf_intervalCounter_777_E_ETC___d1822,
       blueDMA_readChannel_toMaster_beatsThisRequestC_ETC___d1304,
       blueDMA_writeChannel_byteAlignerFrom_bytes_in__ETC___d750,
       blueDMA_writeChannel_byteAlignerFrom_bytes_lef_ETC___d765,
       blueDMA_writeChannel_byteAlignerTo_bytes_in_05_ETC___d807,
       blueDMA_writeChannel_byteAlignerTo_bytes_left__ETC___d822,
       blueDMA_writeChannel_perf_intervalCounter_64_E_ETC___d909,
       blueDMA_writeChannel_toMaster_beatsThisRequest_ETC___d391;

  // value method s_rd_arready
  assign S_AXI_arready = blueDMA_s_config_readSlave_in$FULL_N ;

  // value method s_rd_rvalid
  assign S_AXI_rvalid = blueDMA_s_config_readSlave_out$EMPTY_N ;

  // value method s_rd_rdata
  assign S_AXI_rdata =
	     blueDMA_s_config_readSlave_out$EMPTY_N ?
	       blueDMA_s_config_readSlave_out$D_OUT[65:2] :
	       64'd0 ;

  // value method s_rd_rresp
  assign S_AXI_rresp =
	     blueDMA_s_config_readSlave_out$EMPTY_N ?
	       blueDMA_s_config_readSlave_out$D_OUT[1:0] :
	       2'd0 ;

  // value method s_wr_awready
  assign S_AXI_awready = !blueDMA_s_config_writeSlave_addrIn_rv[67] ;

  // value method s_wr_wready
  assign S_AXI_wready = !blueDMA_s_config_writeSlave_dataIn_rv[72] ;

  // value method s_wr_bvalid
  assign S_AXI_bvalid = blueDMA_s_config_writeSlave_out$EMPTY_N ;

  // value method s_wr_bresp
  assign S_AXI_bresp =
	     blueDMA_s_config_writeSlave_out$EMPTY_N ?
	       blueDMA_s_config_writeSlave_out$D_OUT :
	       2'd0 ;

  // value method pcie_rd_arvalid
  assign m64_axi_arvalid =
	     blueDMA_writeChannel_fromMaster_master_rd_in$EMPTY_N ;

  // value method pcie_rd_arid
  assign m64_axi_arid =
	     blueDMA_writeChannel_fromMaster_master_rd_in$EMPTY_N &&
	     blueDMA_writeChannel_fromMaster_master_rd_in$D_OUT[93] ;

  // value method pcie_rd_araddr
  assign m64_axi_araddr =
	     blueDMA_writeChannel_fromMaster_master_rd_in$EMPTY_N ?
	       blueDMA_writeChannel_fromMaster_master_rd_in$D_OUT[92:29] :
	       64'd0 ;

  // value method pcie_rd_arlen
  assign m64_axi_arlen =
	     blueDMA_writeChannel_fromMaster_master_rd_in$EMPTY_N ?
	       blueDMA_writeChannel_fromMaster_master_rd_in$D_OUT[28:21] :
	       8'd0 ;

  // value method pcie_rd_arsize
  assign m64_axi_arsize =
	     blueDMA_writeChannel_fromMaster_master_rd_in$EMPTY_N ?
	       blueDMA_writeChannel_fromMaster_master_rd_in$D_OUT[20:18] :
	       3'd0 ;

  // value method pcie_rd_arburst
  assign m64_axi_arburst =
	     blueDMA_writeChannel_fromMaster_master_rd_in$EMPTY_N ?
	       blueDMA_writeChannel_fromMaster_master_rd_in$D_OUT[17:16] :
	       2'd0 ;

  // value method pcie_rd_arlock
  assign m64_axi_arlock =
	     blueDMA_writeChannel_fromMaster_master_rd_in$EMPTY_N &&
	     blueDMA_writeChannel_fromMaster_master_rd_in$D_OUT[15] ;

  // value method pcie_rd_arcache
  assign m64_axi_arcache =
	     (!blueDMA_writeChannel_fromMaster_master_rd_in$EMPTY_N ||
	      blueDMA_writeChannel_fromMaster_master_rd_warcache$wget ==
	      4'd0) ?
	       4'd0 :
	       CASE_blueDMA_writeChannel_fromMaster_master_rd_ETC__q1 ;

  // value method pcie_rd_arprot
  assign m64_axi_arprot =
	     blueDMA_writeChannel_fromMaster_master_rd_in$EMPTY_N ?
	       blueDMA_writeChannel_fromMaster_master_rd_in$D_OUT[10:8] :
	       3'd0 ;

  // value method pcie_rd_arqos
  assign m64_axi_arqos =
	     blueDMA_writeChannel_fromMaster_master_rd_in$EMPTY_N ?
	       blueDMA_writeChannel_fromMaster_master_rd_in$D_OUT[7:4] :
	       4'd0 ;

  // value method pcie_rd_arregion
  assign m64_axi_arregion =
	     blueDMA_writeChannel_fromMaster_master_rd_in$EMPTY_N ?
	       blueDMA_writeChannel_fromMaster_master_rd_in$D_OUT[3:0] :
	       4'd0 ;

  // value method pcie_rd_rready
  assign m64_axi_rready =
	     blueDMA_writeChannel_fromMaster_master_rd_out$FULL_N ;

  // value method pcie_wr_awvalid
  assign m64_axi_awvalid =
	     blueDMA_readChannel_toMaster_master_wr_in_addr$EMPTY_N ;

  // value method pcie_wr_awid
  assign m64_axi_awid =
	     blueDMA_readChannel_toMaster_master_wr_in_addr$EMPTY_N &&
	     blueDMA_readChannel_toMaster_master_wr_in_addr$D_OUT[93] ;

  // value method pcie_wr_awaddr
  assign m64_axi_awaddr =
	     blueDMA_readChannel_toMaster_master_wr_in_addr$EMPTY_N ?
	       blueDMA_readChannel_toMaster_master_wr_in_addr$D_OUT[92:29] :
	       64'd0 ;

  // value method pcie_wr_awlen
  assign m64_axi_awlen =
	     blueDMA_readChannel_toMaster_master_wr_in_addr$EMPTY_N ?
	       blueDMA_readChannel_toMaster_master_wr_in_addr$D_OUT[28:21] :
	       8'd0 ;

  // value method pcie_wr_awsize
  assign m64_axi_awsize =
	     blueDMA_readChannel_toMaster_master_wr_in_addr$EMPTY_N ?
	       blueDMA_readChannel_toMaster_master_wr_in_addr$D_OUT[20:18] :
	       3'd0 ;

  // value method pcie_wr_awburst
  assign m64_axi_awburst =
	     blueDMA_readChannel_toMaster_master_wr_in_addr$EMPTY_N ?
	       blueDMA_readChannel_toMaster_master_wr_in_addr$D_OUT[17:16] :
	       2'd0 ;

  // value method pcie_wr_awlock
  assign m64_axi_awlock =
	     blueDMA_readChannel_toMaster_master_wr_in_addr$EMPTY_N &&
	     blueDMA_readChannel_toMaster_master_wr_in_addr$D_OUT[15] ;

  // value method pcie_wr_awcache
  assign m64_axi_awcache =
	     (!blueDMA_readChannel_toMaster_master_wr_in_addr$EMPTY_N ||
	      blueDMA_readChannel_toMaster_master_wr_wawcache$wget == 4'd0) ?
	       4'd0 :
	       CASE_blueDMA_readChannel_toMaster_master_wr_wa_ETC__q4 ;

  // value method pcie_wr_awprot
  assign m64_axi_awprot =
	     blueDMA_readChannel_toMaster_master_wr_in_addr$EMPTY_N ?
	       blueDMA_readChannel_toMaster_master_wr_in_addr$D_OUT[10:8] :
	       3'd0 ;

  // value method pcie_wr_awqos
  assign m64_axi_awqos =
	     blueDMA_readChannel_toMaster_master_wr_in_addr$EMPTY_N ?
	       blueDMA_readChannel_toMaster_master_wr_in_addr$D_OUT[7:4] :
	       4'd0 ;

  // value method pcie_wr_awregion
  assign m64_axi_awregion =
	     blueDMA_readChannel_toMaster_master_wr_in_addr$EMPTY_N ?
	       blueDMA_readChannel_toMaster_master_wr_in_addr$D_OUT[3:0] :
	       4'd0 ;

  // value method pcie_wr_wvalid
  assign m64_axi_wvalid =
	     blueDMA_readChannel_toMaster_master_wr_in_data$EMPTY_N ;

  // value method pcie_wr_wdata
  assign m64_axi_wdata =
	     blueDMA_readChannel_toMaster_master_wr_in_data$EMPTY_N ?
	       blueDMA_readChannel_toMaster_master_wr_in_data$D_OUT[576:65] :
	       512'd0 ;

  // value method pcie_wr_wstrb
  assign m64_axi_wstrb =
	     blueDMA_readChannel_toMaster_master_wr_in_data$EMPTY_N ?
	       blueDMA_readChannel_toMaster_master_wr_in_data$D_OUT[64:1] :
	       64'd0 ;

  // value method pcie_wr_wlast
  assign m64_axi_wlast =
	     blueDMA_readChannel_toMaster_master_wr_in_data$EMPTY_N &&
	     blueDMA_readChannel_toMaster_master_wr_in_data$D_OUT[0] ;

  // value method pcie_wr_bready
  assign m64_axi_bready = blueDMA_readChannel_toMaster_master_wr_out$FULL_N ;

  // value method fpga_rd_arvalid
  assign m32_axi_arvalid =
	     blueDMA_readChannel_fromMaster_master_rd_in$EMPTY_N ;

  // value method fpga_rd_arid
  assign m32_axi_arid =
	     blueDMA_readChannel_fromMaster_master_rd_in$EMPTY_N &&
	     blueDMA_readChannel_fromMaster_master_rd_in$D_OUT[93] ;

  // value method fpga_rd_araddr
  assign m32_axi_araddr =
	     blueDMA_readChannel_fromMaster_master_rd_in$EMPTY_N ?
	       blueDMA_readChannel_fromMaster_master_rd_in$D_OUT[92:29] :
	       64'd0 ;

  // value method fpga_rd_arlen
  assign m32_axi_arlen =
	     blueDMA_readChannel_fromMaster_master_rd_in$EMPTY_N ?
	       blueDMA_readChannel_fromMaster_master_rd_in$D_OUT[28:21] :
	       8'd0 ;

  // value method fpga_rd_arsize
  assign m32_axi_arsize =
	     blueDMA_readChannel_fromMaster_master_rd_in$EMPTY_N ?
	       blueDMA_readChannel_fromMaster_master_rd_in$D_OUT[20:18] :
	       3'd0 ;

  // value method fpga_rd_arburst
  assign m32_axi_arburst =
	     blueDMA_readChannel_fromMaster_master_rd_in$EMPTY_N ?
	       blueDMA_readChannel_fromMaster_master_rd_in$D_OUT[17:16] :
	       2'd0 ;

  // value method fpga_rd_arlock
  assign m32_axi_arlock =
	     blueDMA_readChannel_fromMaster_master_rd_in$EMPTY_N &&
	     blueDMA_readChannel_fromMaster_master_rd_in$D_OUT[15] ;

  // value method fpga_rd_arcache
  assign m32_axi_arcache =
	     (!blueDMA_readChannel_fromMaster_master_rd_in$EMPTY_N ||
	      blueDMA_readChannel_fromMaster_master_rd_warcache$wget ==
	      4'd0) ?
	       4'd0 :
	       CASE_blueDMA_readChannel_fromMaster_master_rd__ETC__q3 ;

  // value method fpga_rd_arprot
  assign m32_axi_arprot =
	     blueDMA_readChannel_fromMaster_master_rd_in$EMPTY_N ?
	       blueDMA_readChannel_fromMaster_master_rd_in$D_OUT[10:8] :
	       3'd0 ;

  // value method fpga_rd_arqos
  assign m32_axi_arqos =
	     blueDMA_readChannel_fromMaster_master_rd_in$EMPTY_N ?
	       blueDMA_readChannel_fromMaster_master_rd_in$D_OUT[7:4] :
	       4'd0 ;

  // value method fpga_rd_arregion
  assign m32_axi_arregion =
	     blueDMA_readChannel_fromMaster_master_rd_in$EMPTY_N ?
	       blueDMA_readChannel_fromMaster_master_rd_in$D_OUT[3:0] :
	       4'd0 ;

  // value method fpga_rd_rready
  assign m32_axi_rready =
	     blueDMA_readChannel_fromMaster_master_rd_out$FULL_N ;

  // value method fpga_wr_awvalid
  assign m32_axi_awvalid =
	     blueDMA_writeChannel_toMaster_master_wr_in_addr$EMPTY_N ;

  // value method fpga_wr_awid
  assign m32_axi_awid =
	     blueDMA_writeChannel_toMaster_master_wr_in_addr$EMPTY_N &&
	     blueDMA_writeChannel_toMaster_master_wr_in_addr$D_OUT[93] ;

  // value method fpga_wr_awaddr
  assign m32_axi_awaddr =
	     blueDMA_writeChannel_toMaster_master_wr_in_addr$EMPTY_N ?
	       blueDMA_writeChannel_toMaster_master_wr_in_addr$D_OUT[92:29] :
	       64'd0 ;

  // value method fpga_wr_awlen
  assign m32_axi_awlen =
	     blueDMA_writeChannel_toMaster_master_wr_in_addr$EMPTY_N ?
	       blueDMA_writeChannel_toMaster_master_wr_in_addr$D_OUT[28:21] :
	       8'd0 ;

  // value method fpga_wr_awsize
  assign m32_axi_awsize =
	     blueDMA_writeChannel_toMaster_master_wr_in_addr$EMPTY_N ?
	       blueDMA_writeChannel_toMaster_master_wr_in_addr$D_OUT[20:18] :
	       3'd0 ;

  // value method fpga_wr_awburst
  assign m32_axi_awburst =
	     blueDMA_writeChannel_toMaster_master_wr_in_addr$EMPTY_N ?
	       blueDMA_writeChannel_toMaster_master_wr_in_addr$D_OUT[17:16] :
	       2'd0 ;

  // value method fpga_wr_awlock
  assign m32_axi_awlock =
	     blueDMA_writeChannel_toMaster_master_wr_in_addr$EMPTY_N &&
	     blueDMA_writeChannel_toMaster_master_wr_in_addr$D_OUT[15] ;

  // value method fpga_wr_awcache
  assign m32_axi_awcache =
	     (!blueDMA_writeChannel_toMaster_master_wr_in_addr$EMPTY_N ||
	      blueDMA_writeChannel_toMaster_master_wr_wawcache$wget == 4'd0) ?
	       4'd0 :
	       CASE_blueDMA_writeChannel_toMaster_master_wr_w_ETC__q2 ;

  // value method fpga_wr_awprot
  assign m32_axi_awprot =
	     blueDMA_writeChannel_toMaster_master_wr_in_addr$EMPTY_N ?
	       blueDMA_writeChannel_toMaster_master_wr_in_addr$D_OUT[10:8] :
	       3'd0 ;

  // value method fpga_wr_awqos
  assign m32_axi_awqos =
	     blueDMA_writeChannel_toMaster_master_wr_in_addr$EMPTY_N ?
	       blueDMA_writeChannel_toMaster_master_wr_in_addr$D_OUT[7:4] :
	       4'd0 ;

  // value method fpga_wr_awregion
  assign m32_axi_awregion =
	     blueDMA_writeChannel_toMaster_master_wr_in_addr$EMPTY_N ?
	       blueDMA_writeChannel_toMaster_master_wr_in_addr$D_OUT[3:0] :
	       4'd0 ;

  // value method fpga_wr_wvalid
  assign m32_axi_wvalid =
	     blueDMA_writeChannel_toMaster_master_wr_in_data$EMPTY_N ;

  // value method fpga_wr_wdata
  assign m32_axi_wdata =
	     blueDMA_writeChannel_toMaster_master_wr_in_data$EMPTY_N ?
	       blueDMA_writeChannel_toMaster_master_wr_in_data$D_OUT[576:65] :
	       512'd0 ;

  // value method fpga_wr_wstrb
  assign m32_axi_wstrb =
	     blueDMA_writeChannel_toMaster_master_wr_in_data$EMPTY_N ?
	       blueDMA_writeChannel_toMaster_master_wr_in_data$D_OUT[64:1] :
	       64'd0 ;

  // value method fpga_wr_wlast
  assign m32_axi_wlast =
	     blueDMA_writeChannel_toMaster_master_wr_in_data$EMPTY_N &&
	     blueDMA_writeChannel_toMaster_master_wr_in_data$D_OUT[0] ;

  // value method fpga_wr_bready
  assign m32_axi_bready = blueDMA_writeChannel_toMaster_master_wr_out$FULL_N ;

  // value method interrupt_write
  assign IRQ_write = blueDMA_writeChannel_doneInterruptReg ;

  // value method interrupt_read
  assign IRQ_read = blueDMA_readChannel_doneInterruptReg ;

  // submodule blueDMA_cmdsIn
  FIFO2 #(.width(32'd1), .guarded(32'd1)) blueDMA_cmdsIn(.RST(s_axi_aresetn),
							 .CLK(s_axi_aclk),
							 .D_IN(blueDMA_cmdsIn$D_IN),
							 .ENQ(blueDMA_cmdsIn$ENQ),
							 .DEQ(blueDMA_cmdsIn$DEQ),
							 .CLR(blueDMA_cmdsIn$CLR),
							 .D_OUT(blueDMA_cmdsIn$D_OUT),
							 .FULL_N(blueDMA_cmdsIn$FULL_N),
							 .EMPTY_N(blueDMA_cmdsIn$EMPTY_N));

  // submodule blueDMA_readChannel_byteAlignerFrom_addr_ff
  SyncFIFO1 #(.dataWidth(32'd160)) blueDMA_readChannel_byteAlignerFrom_addr_ff(.sCLK(s_axi_aclk),
									       .dCLK(m32_axi_aclk),
									       .sRST(s_axi_aresetn),
									       .sD_IN(blueDMA_readChannel_byteAlignerFrom_addr_ff$sD_IN),
									       .sENQ(blueDMA_readChannel_byteAlignerFrom_addr_ff$sENQ),
									       .dDEQ(blueDMA_readChannel_byteAlignerFrom_addr_ff$dDEQ),
									       .sFULL_N(),
									       .dEMPTY_N(blueDMA_readChannel_byteAlignerFrom_addr_ff$dEMPTY_N),
									       .dD_OUT(blueDMA_readChannel_byteAlignerFrom_addr_ff$dD_OUT));

  // submodule blueDMA_readChannel_byteAlignerFrom_incoming
  FIFO2 #(.width(32'd512),
	  .guarded(32'd1)) blueDMA_readChannel_byteAlignerFrom_incoming(.RST(m32_axi_aresetn),
									.CLK(m32_axi_aclk),
									.D_IN(blueDMA_readChannel_byteAlignerFrom_incoming$D_IN),
									.ENQ(blueDMA_readChannel_byteAlignerFrom_incoming$ENQ),
									.DEQ(blueDMA_readChannel_byteAlignerFrom_incoming$DEQ),
									.CLR(blueDMA_readChannel_byteAlignerFrom_incoming$CLR),
									.D_OUT(blueDMA_readChannel_byteAlignerFrom_incoming$D_OUT),
									.FULL_N(),
									.EMPTY_N(blueDMA_readChannel_byteAlignerFrom_incoming$EMPTY_N));

  // submodule blueDMA_readChannel_byteAlignerFrom_outgoing
  FIFO2 #(.width(32'd512),
	  .guarded(32'd1)) blueDMA_readChannel_byteAlignerFrom_outgoing(.RST(m32_axi_aresetn),
									.CLK(m32_axi_aclk),
									.D_IN(blueDMA_readChannel_byteAlignerFrom_outgoing$D_IN),
									.ENQ(blueDMA_readChannel_byteAlignerFrom_outgoing$ENQ),
									.DEQ(blueDMA_readChannel_byteAlignerFrom_outgoing$DEQ),
									.CLR(blueDMA_readChannel_byteAlignerFrom_outgoing$CLR),
									.D_OUT(),
									.FULL_N(blueDMA_readChannel_byteAlignerFrom_outgoing$FULL_N),
									.EMPTY_N());

  // submodule blueDMA_readChannel_byteAlignerTo_addr_ff
  SyncFIFO1 #(.dataWidth(32'd160)) blueDMA_readChannel_byteAlignerTo_addr_ff(.sCLK(s_axi_aclk),
									     .dCLK(m64_axi_aclk),
									     .sRST(s_axi_aresetn),
									     .sD_IN(blueDMA_readChannel_byteAlignerTo_addr_ff$sD_IN),
									     .sENQ(blueDMA_readChannel_byteAlignerTo_addr_ff$sENQ),
									     .dDEQ(blueDMA_readChannel_byteAlignerTo_addr_ff$dDEQ),
									     .sFULL_N(),
									     .dEMPTY_N(blueDMA_readChannel_byteAlignerTo_addr_ff$dEMPTY_N),
									     .dD_OUT(blueDMA_readChannel_byteAlignerTo_addr_ff$dD_OUT));

  // submodule blueDMA_readChannel_byteAlignerTo_incoming
  FIFO2 #(.width(32'd512),
	  .guarded(32'd1)) blueDMA_readChannel_byteAlignerTo_incoming(.RST(m64_axi_aresetn),
								      .CLK(m64_axi_aclk),
								      .D_IN(blueDMA_readChannel_byteAlignerTo_incoming$D_IN),
								      .ENQ(blueDMA_readChannel_byteAlignerTo_incoming$ENQ),
								      .DEQ(blueDMA_readChannel_byteAlignerTo_incoming$DEQ),
								      .CLR(blueDMA_readChannel_byteAlignerTo_incoming$CLR),
								      .D_OUT(blueDMA_readChannel_byteAlignerTo_incoming$D_OUT),
								      .FULL_N(),
								      .EMPTY_N(blueDMA_readChannel_byteAlignerTo_incoming$EMPTY_N));

  // submodule blueDMA_readChannel_byteAlignerTo_outgoing
  FIFO2 #(.width(32'd512),
	  .guarded(32'd1)) blueDMA_readChannel_byteAlignerTo_outgoing(.RST(m64_axi_aresetn),
								      .CLK(m64_axi_aclk),
								      .D_IN(blueDMA_readChannel_byteAlignerTo_outgoing$D_IN),
								      .ENQ(blueDMA_readChannel_byteAlignerTo_outgoing$ENQ),
								      .DEQ(blueDMA_readChannel_byteAlignerTo_outgoing$DEQ),
								      .CLR(blueDMA_readChannel_byteAlignerTo_outgoing$CLR),
								      .D_OUT(),
								      .FULL_N(blueDMA_readChannel_byteAlignerTo_outgoing$FULL_N),
								      .EMPTY_N());

  // submodule blueDMA_readChannel_clockConverter_fifo
  SyncFIFO #(.dataWidth(32'd512),
	     .depth(32'd512),
	     .indxWidth(32'd9)) blueDMA_readChannel_clockConverter_fifo(.sCLK(m32_axi_aclk),
									.dCLK(m64_axi_aclk),
									.sRST(m32_axi_aresetn),
									.sD_IN(blueDMA_readChannel_clockConverter_fifo$sD_IN),
									.sENQ(blueDMA_readChannel_clockConverter_fifo$sENQ),
									.dDEQ(blueDMA_readChannel_clockConverter_fifo$dDEQ),
									.sFULL_N(blueDMA_readChannel_clockConverter_fifo$sFULL_N),
									.dEMPTY_N(blueDMA_readChannel_clockConverter_fifo$dEMPTY_N),
									.dD_OUT(blueDMA_readChannel_clockConverter_fifo$dD_OUT));

  // submodule blueDMA_readChannel_cmdIn
  SizedFIFO #(.p1width(32'd160),
	      .p2depth(32'd16),
	      .p3cntr_width(32'd4),
	      .guarded(32'd1)) blueDMA_readChannel_cmdIn(.RST(s_axi_aresetn),
							 .CLK(s_axi_aclk),
							 .D_IN(blueDMA_readChannel_cmdIn$D_IN),
							 .ENQ(blueDMA_readChannel_cmdIn$ENQ),
							 .DEQ(blueDMA_readChannel_cmdIn$DEQ),
							 .CLR(blueDMA_readChannel_cmdIn$CLR),
							 .D_OUT(blueDMA_readChannel_cmdIn$D_OUT),
							 .FULL_N(blueDMA_readChannel_cmdIn$FULL_N),
							 .EMPTY_N(blueDMA_readChannel_cmdIn$EMPTY_N));

  // submodule blueDMA_readChannel_fromDone
  SyncFIFO1 #(.dataWidth(32'd1)) blueDMA_readChannel_fromDone(.sCLK(m32_axi_aclk),
							      .dCLK(s_axi_aclk),
							      .sRST(m32_axi_aresetn),
							      .sD_IN(blueDMA_readChannel_fromDone$sD_IN),
							      .sENQ(blueDMA_readChannel_fromDone$sENQ),
							      .dDEQ(blueDMA_readChannel_fromDone$dDEQ),
							      .sFULL_N(blueDMA_readChannel_fromDone$sFULL_N),
							      .dEMPTY_N(blueDMA_readChannel_fromDone$dEMPTY_N),
							      .dD_OUT());

  // submodule blueDMA_readChannel_fromMasterReq_ff
  SyncFIFO1 #(.dataWidth(32'd100)) blueDMA_readChannel_fromMasterReq_ff(.sCLK(s_axi_aclk),
									.dCLK(m32_axi_aclk),
									.sRST(s_axi_aresetn),
									.sD_IN(blueDMA_readChannel_fromMasterReq_ff$sD_IN),
									.sENQ(blueDMA_readChannel_fromMasterReq_ff$sENQ),
									.dDEQ(blueDMA_readChannel_fromMasterReq_ff$dDEQ),
									.sFULL_N(blueDMA_readChannel_fromMasterReq_ff$sFULL_N),
									.dEMPTY_N(blueDMA_readChannel_fromMasterReq_ff$dEMPTY_N),
									.dD_OUT(blueDMA_readChannel_fromMasterReq_ff$dD_OUT));

  // submodule blueDMA_readChannel_fromMaster_master_rd_in
  SizedFIFO #(.p1width(32'd94),
	      .p2depth(32'd32),
	      .p3cntr_width(32'd5),
	      .guarded(32'd1)) blueDMA_readChannel_fromMaster_master_rd_in(.RST(m32_axi_aresetn),
									   .CLK(m32_axi_aclk),
									   .D_IN(blueDMA_readChannel_fromMaster_master_rd_in$D_IN),
									   .ENQ(blueDMA_readChannel_fromMaster_master_rd_in$ENQ),
									   .DEQ(blueDMA_readChannel_fromMaster_master_rd_in$DEQ),
									   .CLR(blueDMA_readChannel_fromMaster_master_rd_in$CLR),
									   .D_OUT(blueDMA_readChannel_fromMaster_master_rd_in$D_OUT),
									   .FULL_N(blueDMA_readChannel_fromMaster_master_rd_in$FULL_N),
									   .EMPTY_N(blueDMA_readChannel_fromMaster_master_rd_in$EMPTY_N));

  // submodule blueDMA_readChannel_fromMaster_master_rd_out
  FIFO2 #(.width(32'd516),
	  .guarded(32'd1)) blueDMA_readChannel_fromMaster_master_rd_out(.RST(m32_axi_aresetn),
									.CLK(m32_axi_aclk),
									.D_IN(blueDMA_readChannel_fromMaster_master_rd_out$D_IN),
									.ENQ(blueDMA_readChannel_fromMaster_master_rd_out$ENQ),
									.DEQ(blueDMA_readChannel_fromMaster_master_rd_out$DEQ),
									.CLR(blueDMA_readChannel_fromMaster_master_rd_out$CLR),
									.D_OUT(blueDMA_readChannel_fromMaster_master_rd_out$D_OUT),
									.FULL_N(blueDMA_readChannel_fromMaster_master_rd_out$FULL_N),
									.EMPTY_N(blueDMA_readChannel_fromMaster_master_rd_out$EMPTY_N));

  // submodule blueDMA_readChannel_fromMaster_maxOutstandingFIFO
  SizedFIFO #(.p1width(32'd1),
	      .p2depth(32'd32),
	      .p3cntr_width(32'd5),
	      .guarded(32'd1)) blueDMA_readChannel_fromMaster_maxOutstandingFIFO(.RST(m32_axi_aresetn),
										 .CLK(m32_axi_aclk),
										 .D_IN(blueDMA_readChannel_fromMaster_maxOutstandingFIFO$D_IN),
										 .ENQ(blueDMA_readChannel_fromMaster_maxOutstandingFIFO$ENQ),
										 .DEQ(blueDMA_readChannel_fromMaster_maxOutstandingFIFO$DEQ),
										 .CLR(blueDMA_readChannel_fromMaster_maxOutstandingFIFO$CLR),
										 .D_OUT(),
										 .FULL_N(blueDMA_readChannel_fromMaster_maxOutstandingFIFO$FULL_N),
										 .EMPTY_N(blueDMA_readChannel_fromMaster_maxOutstandingFIFO$EMPTY_N));

  // submodule blueDMA_readChannel_fromMaster_outgoingBuffer
  FIFO2 #(.width(32'd512),
	  .guarded(32'd1)) blueDMA_readChannel_fromMaster_outgoingBuffer(.RST(m32_axi_aresetn),
									 .CLK(m32_axi_aclk),
									 .D_IN(blueDMA_readChannel_fromMaster_outgoingBuffer$D_IN),
									 .ENQ(blueDMA_readChannel_fromMaster_outgoingBuffer$ENQ),
									 .DEQ(blueDMA_readChannel_fromMaster_outgoingBuffer$DEQ),
									 .CLR(blueDMA_readChannel_fromMaster_outgoingBuffer$CLR),
									 .D_OUT(blueDMA_readChannel_fromMaster_outgoingBuffer$D_OUT),
									 .FULL_N(blueDMA_readChannel_fromMaster_outgoingBuffer$FULL_N),
									 .EMPTY_N(blueDMA_readChannel_fromMaster_outgoingBuffer$EMPTY_N));

  // submodule blueDMA_readChannel_fromMaster_reqGen_incomingBuffer
  FIFO2 #(.width(32'd100),
	  .guarded(32'd1)) blueDMA_readChannel_fromMaster_reqGen_incomingBuffer(.RST(m32_axi_aresetn),
										.CLK(m32_axi_aclk),
										.D_IN(blueDMA_readChannel_fromMaster_reqGen_incomingBuffer$D_IN),
										.ENQ(blueDMA_readChannel_fromMaster_reqGen_incomingBuffer$ENQ),
										.DEQ(blueDMA_readChannel_fromMaster_reqGen_incomingBuffer$DEQ),
										.CLR(blueDMA_readChannel_fromMaster_reqGen_incomingBuffer$CLR),
										.D_OUT(blueDMA_readChannel_fromMaster_reqGen_incomingBuffer$D_OUT),
										.FULL_N(blueDMA_readChannel_fromMaster_reqGen_incomingBuffer$FULL_N),
										.EMPTY_N(blueDMA_readChannel_fromMaster_reqGen_incomingBuffer$EMPTY_N));

  // submodule blueDMA_readChannel_fromMaster_reqGen_intermediateBuffer
  FIFO2 #(.width(32'd112),
	  .guarded(32'd1)) blueDMA_readChannel_fromMaster_reqGen_intermediateBuffer(.RST(m32_axi_aresetn),
										    .CLK(m32_axi_aclk),
										    .D_IN(blueDMA_readChannel_fromMaster_reqGen_intermediateBuffer$D_IN),
										    .ENQ(blueDMA_readChannel_fromMaster_reqGen_intermediateBuffer$ENQ),
										    .DEQ(blueDMA_readChannel_fromMaster_reqGen_intermediateBuffer$DEQ),
										    .CLR(blueDMA_readChannel_fromMaster_reqGen_intermediateBuffer$CLR),
										    .D_OUT(blueDMA_readChannel_fromMaster_reqGen_intermediateBuffer$D_OUT),
										    .FULL_N(blueDMA_readChannel_fromMaster_reqGen_intermediateBuffer$FULL_N),
										    .EMPTY_N(blueDMA_readChannel_fromMaster_reqGen_intermediateBuffer$EMPTY_N));

  // submodule blueDMA_readChannel_fromMaster_reqGen_intermediateBuffer2
  FIFO2 #(.width(32'd138),
	  .guarded(32'd1)) blueDMA_readChannel_fromMaster_reqGen_intermediateBuffer2(.RST(m32_axi_aresetn),
										     .CLK(m32_axi_aclk),
										     .D_IN(blueDMA_readChannel_fromMaster_reqGen_intermediateBuffer2$D_IN),
										     .ENQ(blueDMA_readChannel_fromMaster_reqGen_intermediateBuffer2$ENQ),
										     .DEQ(blueDMA_readChannel_fromMaster_reqGen_intermediateBuffer2$DEQ),
										     .CLR(blueDMA_readChannel_fromMaster_reqGen_intermediateBuffer2$CLR),
										     .D_OUT(blueDMA_readChannel_fromMaster_reqGen_intermediateBuffer2$D_OUT),
										     .FULL_N(blueDMA_readChannel_fromMaster_reqGen_intermediateBuffer2$FULL_N),
										     .EMPTY_N(blueDMA_readChannel_fromMaster_reqGen_intermediateBuffer2$EMPTY_N));

  // submodule blueDMA_readChannel_fromMaster_reqGen_intermediateBuffer3
  FIFO2 #(.width(32'd147),
	  .guarded(32'd1)) blueDMA_readChannel_fromMaster_reqGen_intermediateBuffer3(.RST(m32_axi_aresetn),
										     .CLK(m32_axi_aclk),
										     .D_IN(blueDMA_readChannel_fromMaster_reqGen_intermediateBuffer3$D_IN),
										     .ENQ(blueDMA_readChannel_fromMaster_reqGen_intermediateBuffer3$ENQ),
										     .DEQ(blueDMA_readChannel_fromMaster_reqGen_intermediateBuffer3$DEQ),
										     .CLR(blueDMA_readChannel_fromMaster_reqGen_intermediateBuffer3$CLR),
										     .D_OUT(blueDMA_readChannel_fromMaster_reqGen_intermediateBuffer3$D_OUT),
										     .FULL_N(blueDMA_readChannel_fromMaster_reqGen_intermediateBuffer3$FULL_N),
										     .EMPTY_N(blueDMA_readChannel_fromMaster_reqGen_intermediateBuffer3$EMPTY_N));

  // submodule blueDMA_readChannel_fromMaster_reqGen_outgoingBuffer
  FIFO2 #(.width(32'd158),
	  .guarded(32'd1)) blueDMA_readChannel_fromMaster_reqGen_outgoingBuffer(.RST(m32_axi_aresetn),
										.CLK(m32_axi_aclk),
										.D_IN(blueDMA_readChannel_fromMaster_reqGen_outgoingBuffer$D_IN),
										.ENQ(blueDMA_readChannel_fromMaster_reqGen_outgoingBuffer$ENQ),
										.DEQ(blueDMA_readChannel_fromMaster_reqGen_outgoingBuffer$DEQ),
										.CLR(blueDMA_readChannel_fromMaster_reqGen_outgoingBuffer$CLR),
										.D_OUT(blueDMA_readChannel_fromMaster_reqGen_outgoingBuffer$D_OUT),
										.FULL_N(blueDMA_readChannel_fromMaster_reqGen_outgoingBuffer$FULL_N),
										.EMPTY_N(blueDMA_readChannel_fromMaster_reqGen_outgoingBuffer$EMPTY_N));

  // submodule blueDMA_readChannel_mimoConv_ff
  SyncFIFO1 #(.dataWidth(32'd64)) blueDMA_readChannel_mimoConv_ff(.sCLK(s_axi_aclk),
								  .dCLK(m64_axi_aclk),
								  .sRST(s_axi_aresetn),
								  .sD_IN(blueDMA_readChannel_mimoConv_ff$sD_IN),
								  .sENQ(blueDMA_readChannel_mimoConv_ff$sENQ),
								  .dDEQ(blueDMA_readChannel_mimoConv_ff$dDEQ),
								  .sFULL_N(blueDMA_readChannel_mimoConv_ff$sFULL_N),
								  .dEMPTY_N(blueDMA_readChannel_mimoConv_ff$dEMPTY_N),
								  .dD_OUT(blueDMA_readChannel_mimoConv_ff$dD_OUT));

  // submodule blueDMA_readChannel_mimo_impl
  FIFO2 #(.width(32'd512),
	  .guarded(32'd1)) blueDMA_readChannel_mimo_impl(.RST(m64_axi_aresetn),
							 .CLK(m64_axi_aclk),
							 .D_IN(blueDMA_readChannel_mimo_impl$D_IN),
							 .ENQ(blueDMA_readChannel_mimo_impl$ENQ),
							 .DEQ(blueDMA_readChannel_mimo_impl$DEQ),
							 .CLR(blueDMA_readChannel_mimo_impl$CLR),
							 .D_OUT(blueDMA_readChannel_mimo_impl$D_OUT),
							 .FULL_N(blueDMA_readChannel_mimo_impl$FULL_N),
							 .EMPTY_N(blueDMA_readChannel_mimo_impl$EMPTY_N));

  // submodule blueDMA_readChannel_toDone
  SyncFIFO1 #(.dataWidth(32'd1)) blueDMA_readChannel_toDone(.sCLK(m64_axi_aclk),
							    .dCLK(s_axi_aclk),
							    .sRST(m64_axi_aresetn),
							    .sD_IN(blueDMA_readChannel_toDone$sD_IN),
							    .sENQ(blueDMA_readChannel_toDone$sENQ),
							    .dDEQ(blueDMA_readChannel_toDone$dDEQ),
							    .sFULL_N(blueDMA_readChannel_toDone$sFULL_N),
							    .dEMPTY_N(blueDMA_readChannel_toDone$dEMPTY_N),
							    .dD_OUT());

  // submodule blueDMA_readChannel_toMasterReq_ff
  SyncFIFO1 #(.dataWidth(32'd100)) blueDMA_readChannel_toMasterReq_ff(.sCLK(s_axi_aclk),
								      .dCLK(m64_axi_aclk),
								      .sRST(s_axi_aresetn),
								      .sD_IN(blueDMA_readChannel_toMasterReq_ff$sD_IN),
								      .sENQ(blueDMA_readChannel_toMasterReq_ff$sENQ),
								      .dDEQ(blueDMA_readChannel_toMasterReq_ff$dDEQ),
								      .sFULL_N(blueDMA_readChannel_toMasterReq_ff$sFULL_N),
								      .dEMPTY_N(blueDMA_readChannel_toMasterReq_ff$dEMPTY_N),
								      .dD_OUT(blueDMA_readChannel_toMasterReq_ff$dD_OUT));

  // submodule blueDMA_readChannel_toMaster_beatsPerRequestFIFO
  SizedFIFO #(.p1width(32'd8),
	      .p2depth(32'd32),
	      .p3cntr_width(32'd5),
	      .guarded(32'd1)) blueDMA_readChannel_toMaster_beatsPerRequestFIFO(.RST(m64_axi_aresetn),
										.CLK(m64_axi_aclk),
										.D_IN(blueDMA_readChannel_toMaster_beatsPerRequestFIFO$D_IN),
										.ENQ(blueDMA_readChannel_toMaster_beatsPerRequestFIFO$ENQ),
										.DEQ(blueDMA_readChannel_toMaster_beatsPerRequestFIFO$DEQ),
										.CLR(blueDMA_readChannel_toMaster_beatsPerRequestFIFO$CLR),
										.D_OUT(blueDMA_readChannel_toMaster_beatsPerRequestFIFO$D_OUT),
										.FULL_N(blueDMA_readChannel_toMaster_beatsPerRequestFIFO$FULL_N),
										.EMPTY_N(blueDMA_readChannel_toMaster_beatsPerRequestFIFO$EMPTY_N));

  // submodule blueDMA_readChannel_toMaster_incomingBuffer
  FIFO2 #(.width(32'd512),
	  .guarded(32'd1)) blueDMA_readChannel_toMaster_incomingBuffer(.RST(m64_axi_aresetn),
								       .CLK(m64_axi_aclk),
								       .D_IN(blueDMA_readChannel_toMaster_incomingBuffer$D_IN),
								       .ENQ(blueDMA_readChannel_toMaster_incomingBuffer$ENQ),
								       .DEQ(blueDMA_readChannel_toMaster_incomingBuffer$DEQ),
								       .CLR(blueDMA_readChannel_toMaster_incomingBuffer$CLR),
								       .D_OUT(blueDMA_readChannel_toMaster_incomingBuffer$D_OUT),
								       .FULL_N(blueDMA_readChannel_toMaster_incomingBuffer$FULL_N),
								       .EMPTY_N(blueDMA_readChannel_toMaster_incomingBuffer$EMPTY_N));

  // submodule blueDMA_readChannel_toMaster_master_wr_in_addr
  SizedFIFO #(.p1width(32'd94),
	      .p2depth(32'd32),
	      .p3cntr_width(32'd5),
	      .guarded(32'd1)) blueDMA_readChannel_toMaster_master_wr_in_addr(.RST(m64_axi_aresetn),
									      .CLK(m64_axi_aclk),
									      .D_IN(blueDMA_readChannel_toMaster_master_wr_in_addr$D_IN),
									      .ENQ(blueDMA_readChannel_toMaster_master_wr_in_addr$ENQ),
									      .DEQ(blueDMA_readChannel_toMaster_master_wr_in_addr$DEQ),
									      .CLR(blueDMA_readChannel_toMaster_master_wr_in_addr$CLR),
									      .D_OUT(blueDMA_readChannel_toMaster_master_wr_in_addr$D_OUT),
									      .FULL_N(blueDMA_readChannel_toMaster_master_wr_in_addr$FULL_N),
									      .EMPTY_N(blueDMA_readChannel_toMaster_master_wr_in_addr$EMPTY_N));

  // submodule blueDMA_readChannel_toMaster_master_wr_in_data
  FIFO2 #(.width(32'd577),
	  .guarded(32'd1)) blueDMA_readChannel_toMaster_master_wr_in_data(.RST(m64_axi_aresetn),
									  .CLK(m64_axi_aclk),
									  .D_IN(blueDMA_readChannel_toMaster_master_wr_in_data$D_IN),
									  .ENQ(blueDMA_readChannel_toMaster_master_wr_in_data$ENQ),
									  .DEQ(blueDMA_readChannel_toMaster_master_wr_in_data$DEQ),
									  .CLR(blueDMA_readChannel_toMaster_master_wr_in_data$CLR),
									  .D_OUT(blueDMA_readChannel_toMaster_master_wr_in_data$D_OUT),
									  .FULL_N(blueDMA_readChannel_toMaster_master_wr_in_data$FULL_N),
									  .EMPTY_N(blueDMA_readChannel_toMaster_master_wr_in_data$EMPTY_N));

  // submodule blueDMA_readChannel_toMaster_master_wr_out
  FIFO2 #(.width(32'd3),
	  .guarded(32'd1)) blueDMA_readChannel_toMaster_master_wr_out(.RST(m64_axi_aresetn),
								      .CLK(m64_axi_aclk),
								      .D_IN(blueDMA_readChannel_toMaster_master_wr_out$D_IN),
								      .ENQ(blueDMA_readChannel_toMaster_master_wr_out$ENQ),
								      .DEQ(blueDMA_readChannel_toMaster_master_wr_out$DEQ),
								      .CLR(blueDMA_readChannel_toMaster_master_wr_out$CLR),
								      .D_OUT(),
								      .FULL_N(blueDMA_readChannel_toMaster_master_wr_out$FULL_N),
								      .EMPTY_N(blueDMA_readChannel_toMaster_master_wr_out$EMPTY_N));

  // submodule blueDMA_readChannel_toMaster_reqGen_incomingBuffer
  FIFO2 #(.width(32'd100),
	  .guarded(32'd1)) blueDMA_readChannel_toMaster_reqGen_incomingBuffer(.RST(m64_axi_aresetn),
									      .CLK(m64_axi_aclk),
									      .D_IN(blueDMA_readChannel_toMaster_reqGen_incomingBuffer$D_IN),
									      .ENQ(blueDMA_readChannel_toMaster_reqGen_incomingBuffer$ENQ),
									      .DEQ(blueDMA_readChannel_toMaster_reqGen_incomingBuffer$DEQ),
									      .CLR(blueDMA_readChannel_toMaster_reqGen_incomingBuffer$CLR),
									      .D_OUT(blueDMA_readChannel_toMaster_reqGen_incomingBuffer$D_OUT),
									      .FULL_N(blueDMA_readChannel_toMaster_reqGen_incomingBuffer$FULL_N),
									      .EMPTY_N(blueDMA_readChannel_toMaster_reqGen_incomingBuffer$EMPTY_N));

  // submodule blueDMA_readChannel_toMaster_reqGen_intermediateBuffer
  FIFO2 #(.width(32'd112),
	  .guarded(32'd1)) blueDMA_readChannel_toMaster_reqGen_intermediateBuffer(.RST(m64_axi_aresetn),
										  .CLK(m64_axi_aclk),
										  .D_IN(blueDMA_readChannel_toMaster_reqGen_intermediateBuffer$D_IN),
										  .ENQ(blueDMA_readChannel_toMaster_reqGen_intermediateBuffer$ENQ),
										  .DEQ(blueDMA_readChannel_toMaster_reqGen_intermediateBuffer$DEQ),
										  .CLR(blueDMA_readChannel_toMaster_reqGen_intermediateBuffer$CLR),
										  .D_OUT(blueDMA_readChannel_toMaster_reqGen_intermediateBuffer$D_OUT),
										  .FULL_N(blueDMA_readChannel_toMaster_reqGen_intermediateBuffer$FULL_N),
										  .EMPTY_N(blueDMA_readChannel_toMaster_reqGen_intermediateBuffer$EMPTY_N));

  // submodule blueDMA_readChannel_toMaster_reqGen_intermediateBuffer2
  FIFO2 #(.width(32'd138),
	  .guarded(32'd1)) blueDMA_readChannel_toMaster_reqGen_intermediateBuffer2(.RST(m64_axi_aresetn),
										   .CLK(m64_axi_aclk),
										   .D_IN(blueDMA_readChannel_toMaster_reqGen_intermediateBuffer2$D_IN),
										   .ENQ(blueDMA_readChannel_toMaster_reqGen_intermediateBuffer2$ENQ),
										   .DEQ(blueDMA_readChannel_toMaster_reqGen_intermediateBuffer2$DEQ),
										   .CLR(blueDMA_readChannel_toMaster_reqGen_intermediateBuffer2$CLR),
										   .D_OUT(blueDMA_readChannel_toMaster_reqGen_intermediateBuffer2$D_OUT),
										   .FULL_N(blueDMA_readChannel_toMaster_reqGen_intermediateBuffer2$FULL_N),
										   .EMPTY_N(blueDMA_readChannel_toMaster_reqGen_intermediateBuffer2$EMPTY_N));

  // submodule blueDMA_readChannel_toMaster_reqGen_intermediateBuffer3
  FIFO2 #(.width(32'd147),
	  .guarded(32'd1)) blueDMA_readChannel_toMaster_reqGen_intermediateBuffer3(.RST(m64_axi_aresetn),
										   .CLK(m64_axi_aclk),
										   .D_IN(blueDMA_readChannel_toMaster_reqGen_intermediateBuffer3$D_IN),
										   .ENQ(blueDMA_readChannel_toMaster_reqGen_intermediateBuffer3$ENQ),
										   .DEQ(blueDMA_readChannel_toMaster_reqGen_intermediateBuffer3$DEQ),
										   .CLR(blueDMA_readChannel_toMaster_reqGen_intermediateBuffer3$CLR),
										   .D_OUT(blueDMA_readChannel_toMaster_reqGen_intermediateBuffer3$D_OUT),
										   .FULL_N(blueDMA_readChannel_toMaster_reqGen_intermediateBuffer3$FULL_N),
										   .EMPTY_N(blueDMA_readChannel_toMaster_reqGen_intermediateBuffer3$EMPTY_N));

  // submodule blueDMA_readChannel_toMaster_reqGen_outgoingBuffer
  FIFO2 #(.width(32'd158),
	  .guarded(32'd1)) blueDMA_readChannel_toMaster_reqGen_outgoingBuffer(.RST(m64_axi_aresetn),
									      .CLK(m64_axi_aclk),
									      .D_IN(blueDMA_readChannel_toMaster_reqGen_outgoingBuffer$D_IN),
									      .ENQ(blueDMA_readChannel_toMaster_reqGen_outgoingBuffer$ENQ),
									      .DEQ(blueDMA_readChannel_toMaster_reqGen_outgoingBuffer$DEQ),
									      .CLR(blueDMA_readChannel_toMaster_reqGen_outgoingBuffer$CLR),
									      .D_OUT(blueDMA_readChannel_toMaster_reqGen_outgoingBuffer$D_OUT),
									      .FULL_N(blueDMA_readChannel_toMaster_reqGen_outgoingBuffer$FULL_N),
									      .EMPTY_N(blueDMA_readChannel_toMaster_reqGen_outgoingBuffer$EMPTY_N));

  // submodule blueDMA_s_config_readSlave_in
  FIFO1 #(.width(32'd67),
	  .guarded(32'd1)) blueDMA_s_config_readSlave_in(.RST(s_axi_aresetn),
							 .CLK(s_axi_aclk),
							 .D_IN(blueDMA_s_config_readSlave_in$D_IN),
							 .ENQ(blueDMA_s_config_readSlave_in$ENQ),
							 .DEQ(blueDMA_s_config_readSlave_in$DEQ),
							 .CLR(blueDMA_s_config_readSlave_in$CLR),
							 .D_OUT(blueDMA_s_config_readSlave_in$D_OUT),
							 .FULL_N(blueDMA_s_config_readSlave_in$FULL_N),
							 .EMPTY_N(blueDMA_s_config_readSlave_in$EMPTY_N));

  // submodule blueDMA_s_config_readSlave_out
  FIFO1 #(.width(32'd66),
	  .guarded(32'd1)) blueDMA_s_config_readSlave_out(.RST(s_axi_aresetn),
							  .CLK(s_axi_aclk),
							  .D_IN(blueDMA_s_config_readSlave_out$D_IN),
							  .ENQ(blueDMA_s_config_readSlave_out$ENQ),
							  .DEQ(blueDMA_s_config_readSlave_out$DEQ),
							  .CLR(blueDMA_s_config_readSlave_out$CLR),
							  .D_OUT(blueDMA_s_config_readSlave_out$D_OUT),
							  .FULL_N(blueDMA_s_config_readSlave_out$FULL_N),
							  .EMPTY_N(blueDMA_s_config_readSlave_out$EMPTY_N));

  // submodule blueDMA_s_config_writeSlave_in
  FIFO1 #(.width(32'd139),
	  .guarded(32'd1)) blueDMA_s_config_writeSlave_in(.RST(s_axi_aresetn),
							  .CLK(s_axi_aclk),
							  .D_IN(blueDMA_s_config_writeSlave_in$D_IN),
							  .ENQ(blueDMA_s_config_writeSlave_in$ENQ),
							  .DEQ(blueDMA_s_config_writeSlave_in$DEQ),
							  .CLR(blueDMA_s_config_writeSlave_in$CLR),
							  .D_OUT(blueDMA_s_config_writeSlave_in$D_OUT),
							  .FULL_N(blueDMA_s_config_writeSlave_in$FULL_N),
							  .EMPTY_N(blueDMA_s_config_writeSlave_in$EMPTY_N));

  // submodule blueDMA_s_config_writeSlave_out
  FIFO1 #(.width(32'd2),
	  .guarded(32'd1)) blueDMA_s_config_writeSlave_out(.RST(s_axi_aresetn),
							   .CLK(s_axi_aclk),
							   .D_IN(blueDMA_s_config_writeSlave_out$D_IN),
							   .ENQ(blueDMA_s_config_writeSlave_out$ENQ),
							   .DEQ(blueDMA_s_config_writeSlave_out$DEQ),
							   .CLR(blueDMA_s_config_writeSlave_out$CLR),
							   .D_OUT(blueDMA_s_config_writeSlave_out$D_OUT),
							   .FULL_N(blueDMA_s_config_writeSlave_out$FULL_N),
							   .EMPTY_N(blueDMA_s_config_writeSlave_out$EMPTY_N));

  // submodule blueDMA_writeChannel_byteAlignerFrom_addr_ff
  SyncFIFO1 #(.dataWidth(32'd160)) blueDMA_writeChannel_byteAlignerFrom_addr_ff(.sCLK(s_axi_aclk),
										.dCLK(m64_axi_aclk),
										.sRST(s_axi_aresetn),
										.sD_IN(blueDMA_writeChannel_byteAlignerFrom_addr_ff$sD_IN),
										.sENQ(blueDMA_writeChannel_byteAlignerFrom_addr_ff$sENQ),
										.dDEQ(blueDMA_writeChannel_byteAlignerFrom_addr_ff$dDEQ),
										.sFULL_N(),
										.dEMPTY_N(blueDMA_writeChannel_byteAlignerFrom_addr_ff$dEMPTY_N),
										.dD_OUT(blueDMA_writeChannel_byteAlignerFrom_addr_ff$dD_OUT));

  // submodule blueDMA_writeChannel_byteAlignerFrom_incoming
  FIFO2 #(.width(32'd512),
	  .guarded(32'd1)) blueDMA_writeChannel_byteAlignerFrom_incoming(.RST(m64_axi_aresetn),
									 .CLK(m64_axi_aclk),
									 .D_IN(blueDMA_writeChannel_byteAlignerFrom_incoming$D_IN),
									 .ENQ(blueDMA_writeChannel_byteAlignerFrom_incoming$ENQ),
									 .DEQ(blueDMA_writeChannel_byteAlignerFrom_incoming$DEQ),
									 .CLR(blueDMA_writeChannel_byteAlignerFrom_incoming$CLR),
									 .D_OUT(blueDMA_writeChannel_byteAlignerFrom_incoming$D_OUT),
									 .FULL_N(),
									 .EMPTY_N(blueDMA_writeChannel_byteAlignerFrom_incoming$EMPTY_N));

  // submodule blueDMA_writeChannel_byteAlignerFrom_outgoing
  FIFO2 #(.width(32'd512),
	  .guarded(32'd1)) blueDMA_writeChannel_byteAlignerFrom_outgoing(.RST(m64_axi_aresetn),
									 .CLK(m64_axi_aclk),
									 .D_IN(blueDMA_writeChannel_byteAlignerFrom_outgoing$D_IN),
									 .ENQ(blueDMA_writeChannel_byteAlignerFrom_outgoing$ENQ),
									 .DEQ(blueDMA_writeChannel_byteAlignerFrom_outgoing$DEQ),
									 .CLR(blueDMA_writeChannel_byteAlignerFrom_outgoing$CLR),
									 .D_OUT(),
									 .FULL_N(blueDMA_writeChannel_byteAlignerFrom_outgoing$FULL_N),
									 .EMPTY_N());

  // submodule blueDMA_writeChannel_byteAlignerTo_addr_ff
  SyncFIFO1 #(.dataWidth(32'd160)) blueDMA_writeChannel_byteAlignerTo_addr_ff(.sCLK(s_axi_aclk),
									      .dCLK(m32_axi_aclk),
									      .sRST(s_axi_aresetn),
									      .sD_IN(blueDMA_writeChannel_byteAlignerTo_addr_ff$sD_IN),
									      .sENQ(blueDMA_writeChannel_byteAlignerTo_addr_ff$sENQ),
									      .dDEQ(blueDMA_writeChannel_byteAlignerTo_addr_ff$dDEQ),
									      .sFULL_N(),
									      .dEMPTY_N(blueDMA_writeChannel_byteAlignerTo_addr_ff$dEMPTY_N),
									      .dD_OUT(blueDMA_writeChannel_byteAlignerTo_addr_ff$dD_OUT));

  // submodule blueDMA_writeChannel_byteAlignerTo_incoming
  FIFO2 #(.width(32'd512),
	  .guarded(32'd1)) blueDMA_writeChannel_byteAlignerTo_incoming(.RST(m32_axi_aresetn),
								       .CLK(m32_axi_aclk),
								       .D_IN(blueDMA_writeChannel_byteAlignerTo_incoming$D_IN),
								       .ENQ(blueDMA_writeChannel_byteAlignerTo_incoming$ENQ),
								       .DEQ(blueDMA_writeChannel_byteAlignerTo_incoming$DEQ),
								       .CLR(blueDMA_writeChannel_byteAlignerTo_incoming$CLR),
								       .D_OUT(blueDMA_writeChannel_byteAlignerTo_incoming$D_OUT),
								       .FULL_N(),
								       .EMPTY_N(blueDMA_writeChannel_byteAlignerTo_incoming$EMPTY_N));

  // submodule blueDMA_writeChannel_byteAlignerTo_outgoing
  FIFO2 #(.width(32'd512),
	  .guarded(32'd1)) blueDMA_writeChannel_byteAlignerTo_outgoing(.RST(m32_axi_aresetn),
								       .CLK(m32_axi_aclk),
								       .D_IN(blueDMA_writeChannel_byteAlignerTo_outgoing$D_IN),
								       .ENQ(blueDMA_writeChannel_byteAlignerTo_outgoing$ENQ),
								       .DEQ(blueDMA_writeChannel_byteAlignerTo_outgoing$DEQ),
								       .CLR(blueDMA_writeChannel_byteAlignerTo_outgoing$CLR),
								       .D_OUT(),
								       .FULL_N(blueDMA_writeChannel_byteAlignerTo_outgoing$FULL_N),
								       .EMPTY_N());

  // submodule blueDMA_writeChannel_clockConverter_fifo
  SyncFIFO #(.dataWidth(32'd512),
	     .depth(32'd512),
	     .indxWidth(32'd9)) blueDMA_writeChannel_clockConverter_fifo(.sCLK(m64_axi_aclk),
									 .dCLK(m32_axi_aclk),
									 .sRST(m64_axi_aresetn),
									 .sD_IN(blueDMA_writeChannel_clockConverter_fifo$sD_IN),
									 .sENQ(blueDMA_writeChannel_clockConverter_fifo$sENQ),
									 .dDEQ(blueDMA_writeChannel_clockConverter_fifo$dDEQ),
									 .sFULL_N(blueDMA_writeChannel_clockConverter_fifo$sFULL_N),
									 .dEMPTY_N(blueDMA_writeChannel_clockConverter_fifo$dEMPTY_N),
									 .dD_OUT(blueDMA_writeChannel_clockConverter_fifo$dD_OUT));

  // submodule blueDMA_writeChannel_cmdIn
  SizedFIFO #(.p1width(32'd160),
	      .p2depth(32'd16),
	      .p3cntr_width(32'd4),
	      .guarded(32'd1)) blueDMA_writeChannel_cmdIn(.RST(s_axi_aresetn),
							  .CLK(s_axi_aclk),
							  .D_IN(blueDMA_writeChannel_cmdIn$D_IN),
							  .ENQ(blueDMA_writeChannel_cmdIn$ENQ),
							  .DEQ(blueDMA_writeChannel_cmdIn$DEQ),
							  .CLR(blueDMA_writeChannel_cmdIn$CLR),
							  .D_OUT(blueDMA_writeChannel_cmdIn$D_OUT),
							  .FULL_N(blueDMA_writeChannel_cmdIn$FULL_N),
							  .EMPTY_N(blueDMA_writeChannel_cmdIn$EMPTY_N));

  // submodule blueDMA_writeChannel_fromDone
  SyncFIFO1 #(.dataWidth(32'd1)) blueDMA_writeChannel_fromDone(.sCLK(m64_axi_aclk),
							       .dCLK(s_axi_aclk),
							       .sRST(m64_axi_aresetn),
							       .sD_IN(blueDMA_writeChannel_fromDone$sD_IN),
							       .sENQ(blueDMA_writeChannel_fromDone$sENQ),
							       .dDEQ(blueDMA_writeChannel_fromDone$dDEQ),
							       .sFULL_N(blueDMA_writeChannel_fromDone$sFULL_N),
							       .dEMPTY_N(blueDMA_writeChannel_fromDone$dEMPTY_N),
							       .dD_OUT());

  // submodule blueDMA_writeChannel_fromMasterReq_ff
  SyncFIFO1 #(.dataWidth(32'd100)) blueDMA_writeChannel_fromMasterReq_ff(.sCLK(s_axi_aclk),
									 .dCLK(m64_axi_aclk),
									 .sRST(s_axi_aresetn),
									 .sD_IN(blueDMA_writeChannel_fromMasterReq_ff$sD_IN),
									 .sENQ(blueDMA_writeChannel_fromMasterReq_ff$sENQ),
									 .dDEQ(blueDMA_writeChannel_fromMasterReq_ff$dDEQ),
									 .sFULL_N(blueDMA_writeChannel_fromMasterReq_ff$sFULL_N),
									 .dEMPTY_N(blueDMA_writeChannel_fromMasterReq_ff$dEMPTY_N),
									 .dD_OUT(blueDMA_writeChannel_fromMasterReq_ff$dD_OUT));

  // submodule blueDMA_writeChannel_fromMaster_master_rd_in
  SizedFIFO #(.p1width(32'd94),
	      .p2depth(32'd32),
	      .p3cntr_width(32'd5),
	      .guarded(32'd1)) blueDMA_writeChannel_fromMaster_master_rd_in(.RST(m64_axi_aresetn),
									    .CLK(m64_axi_aclk),
									    .D_IN(blueDMA_writeChannel_fromMaster_master_rd_in$D_IN),
									    .ENQ(blueDMA_writeChannel_fromMaster_master_rd_in$ENQ),
									    .DEQ(blueDMA_writeChannel_fromMaster_master_rd_in$DEQ),
									    .CLR(blueDMA_writeChannel_fromMaster_master_rd_in$CLR),
									    .D_OUT(blueDMA_writeChannel_fromMaster_master_rd_in$D_OUT),
									    .FULL_N(blueDMA_writeChannel_fromMaster_master_rd_in$FULL_N),
									    .EMPTY_N(blueDMA_writeChannel_fromMaster_master_rd_in$EMPTY_N));

  // submodule blueDMA_writeChannel_fromMaster_master_rd_out
  FIFO2 #(.width(32'd516),
	  .guarded(32'd1)) blueDMA_writeChannel_fromMaster_master_rd_out(.RST(m64_axi_aresetn),
									 .CLK(m64_axi_aclk),
									 .D_IN(blueDMA_writeChannel_fromMaster_master_rd_out$D_IN),
									 .ENQ(blueDMA_writeChannel_fromMaster_master_rd_out$ENQ),
									 .DEQ(blueDMA_writeChannel_fromMaster_master_rd_out$DEQ),
									 .CLR(blueDMA_writeChannel_fromMaster_master_rd_out$CLR),
									 .D_OUT(blueDMA_writeChannel_fromMaster_master_rd_out$D_OUT),
									 .FULL_N(blueDMA_writeChannel_fromMaster_master_rd_out$FULL_N),
									 .EMPTY_N(blueDMA_writeChannel_fromMaster_master_rd_out$EMPTY_N));

  // submodule blueDMA_writeChannel_fromMaster_maxOutstandingFIFO
  SizedFIFO #(.p1width(32'd1),
	      .p2depth(32'd32),
	      .p3cntr_width(32'd5),
	      .guarded(32'd1)) blueDMA_writeChannel_fromMaster_maxOutstandingFIFO(.RST(m64_axi_aresetn),
										  .CLK(m64_axi_aclk),
										  .D_IN(blueDMA_writeChannel_fromMaster_maxOutstandingFIFO$D_IN),
										  .ENQ(blueDMA_writeChannel_fromMaster_maxOutstandingFIFO$ENQ),
										  .DEQ(blueDMA_writeChannel_fromMaster_maxOutstandingFIFO$DEQ),
										  .CLR(blueDMA_writeChannel_fromMaster_maxOutstandingFIFO$CLR),
										  .D_OUT(),
										  .FULL_N(blueDMA_writeChannel_fromMaster_maxOutstandingFIFO$FULL_N),
										  .EMPTY_N(blueDMA_writeChannel_fromMaster_maxOutstandingFIFO$EMPTY_N));

  // submodule blueDMA_writeChannel_fromMaster_outgoingBuffer
  FIFO2 #(.width(32'd512),
	  .guarded(32'd1)) blueDMA_writeChannel_fromMaster_outgoingBuffer(.RST(m64_axi_aresetn),
									  .CLK(m64_axi_aclk),
									  .D_IN(blueDMA_writeChannel_fromMaster_outgoingBuffer$D_IN),
									  .ENQ(blueDMA_writeChannel_fromMaster_outgoingBuffer$ENQ),
									  .DEQ(blueDMA_writeChannel_fromMaster_outgoingBuffer$DEQ),
									  .CLR(blueDMA_writeChannel_fromMaster_outgoingBuffer$CLR),
									  .D_OUT(blueDMA_writeChannel_fromMaster_outgoingBuffer$D_OUT),
									  .FULL_N(blueDMA_writeChannel_fromMaster_outgoingBuffer$FULL_N),
									  .EMPTY_N(blueDMA_writeChannel_fromMaster_outgoingBuffer$EMPTY_N));

  // submodule blueDMA_writeChannel_fromMaster_reqGen_incomingBuffer
  FIFO2 #(.width(32'd100),
	  .guarded(32'd1)) blueDMA_writeChannel_fromMaster_reqGen_incomingBuffer(.RST(m64_axi_aresetn),
										 .CLK(m64_axi_aclk),
										 .D_IN(blueDMA_writeChannel_fromMaster_reqGen_incomingBuffer$D_IN),
										 .ENQ(blueDMA_writeChannel_fromMaster_reqGen_incomingBuffer$ENQ),
										 .DEQ(blueDMA_writeChannel_fromMaster_reqGen_incomingBuffer$DEQ),
										 .CLR(blueDMA_writeChannel_fromMaster_reqGen_incomingBuffer$CLR),
										 .D_OUT(blueDMA_writeChannel_fromMaster_reqGen_incomingBuffer$D_OUT),
										 .FULL_N(blueDMA_writeChannel_fromMaster_reqGen_incomingBuffer$FULL_N),
										 .EMPTY_N(blueDMA_writeChannel_fromMaster_reqGen_incomingBuffer$EMPTY_N));

  // submodule blueDMA_writeChannel_fromMaster_reqGen_intermediateBuffer
  FIFO2 #(.width(32'd112),
	  .guarded(32'd1)) blueDMA_writeChannel_fromMaster_reqGen_intermediateBuffer(.RST(m64_axi_aresetn),
										     .CLK(m64_axi_aclk),
										     .D_IN(blueDMA_writeChannel_fromMaster_reqGen_intermediateBuffer$D_IN),
										     .ENQ(blueDMA_writeChannel_fromMaster_reqGen_intermediateBuffer$ENQ),
										     .DEQ(blueDMA_writeChannel_fromMaster_reqGen_intermediateBuffer$DEQ),
										     .CLR(blueDMA_writeChannel_fromMaster_reqGen_intermediateBuffer$CLR),
										     .D_OUT(blueDMA_writeChannel_fromMaster_reqGen_intermediateBuffer$D_OUT),
										     .FULL_N(blueDMA_writeChannel_fromMaster_reqGen_intermediateBuffer$FULL_N),
										     .EMPTY_N(blueDMA_writeChannel_fromMaster_reqGen_intermediateBuffer$EMPTY_N));

  // submodule blueDMA_writeChannel_fromMaster_reqGen_intermediateBuffer2
  FIFO2 #(.width(32'd138),
	  .guarded(32'd1)) blueDMA_writeChannel_fromMaster_reqGen_intermediateBuffer2(.RST(m64_axi_aresetn),
										      .CLK(m64_axi_aclk),
										      .D_IN(blueDMA_writeChannel_fromMaster_reqGen_intermediateBuffer2$D_IN),
										      .ENQ(blueDMA_writeChannel_fromMaster_reqGen_intermediateBuffer2$ENQ),
										      .DEQ(blueDMA_writeChannel_fromMaster_reqGen_intermediateBuffer2$DEQ),
										      .CLR(blueDMA_writeChannel_fromMaster_reqGen_intermediateBuffer2$CLR),
										      .D_OUT(blueDMA_writeChannel_fromMaster_reqGen_intermediateBuffer2$D_OUT),
										      .FULL_N(blueDMA_writeChannel_fromMaster_reqGen_intermediateBuffer2$FULL_N),
										      .EMPTY_N(blueDMA_writeChannel_fromMaster_reqGen_intermediateBuffer2$EMPTY_N));

  // submodule blueDMA_writeChannel_fromMaster_reqGen_intermediateBuffer3
  FIFO2 #(.width(32'd147),
	  .guarded(32'd1)) blueDMA_writeChannel_fromMaster_reqGen_intermediateBuffer3(.RST(m64_axi_aresetn),
										      .CLK(m64_axi_aclk),
										      .D_IN(blueDMA_writeChannel_fromMaster_reqGen_intermediateBuffer3$D_IN),
										      .ENQ(blueDMA_writeChannel_fromMaster_reqGen_intermediateBuffer3$ENQ),
										      .DEQ(blueDMA_writeChannel_fromMaster_reqGen_intermediateBuffer3$DEQ),
										      .CLR(blueDMA_writeChannel_fromMaster_reqGen_intermediateBuffer3$CLR),
										      .D_OUT(blueDMA_writeChannel_fromMaster_reqGen_intermediateBuffer3$D_OUT),
										      .FULL_N(blueDMA_writeChannel_fromMaster_reqGen_intermediateBuffer3$FULL_N),
										      .EMPTY_N(blueDMA_writeChannel_fromMaster_reqGen_intermediateBuffer3$EMPTY_N));

  // submodule blueDMA_writeChannel_fromMaster_reqGen_outgoingBuffer
  FIFO2 #(.width(32'd158),
	  .guarded(32'd1)) blueDMA_writeChannel_fromMaster_reqGen_outgoingBuffer(.RST(m64_axi_aresetn),
										 .CLK(m64_axi_aclk),
										 .D_IN(blueDMA_writeChannel_fromMaster_reqGen_outgoingBuffer$D_IN),
										 .ENQ(blueDMA_writeChannel_fromMaster_reqGen_outgoingBuffer$ENQ),
										 .DEQ(blueDMA_writeChannel_fromMaster_reqGen_outgoingBuffer$DEQ),
										 .CLR(blueDMA_writeChannel_fromMaster_reqGen_outgoingBuffer$CLR),
										 .D_OUT(blueDMA_writeChannel_fromMaster_reqGen_outgoingBuffer$D_OUT),
										 .FULL_N(blueDMA_writeChannel_fromMaster_reqGen_outgoingBuffer$FULL_N),
										 .EMPTY_N(blueDMA_writeChannel_fromMaster_reqGen_outgoingBuffer$EMPTY_N));

  // submodule blueDMA_writeChannel_mimoConv_ff
  SyncFIFO1 #(.dataWidth(32'd64)) blueDMA_writeChannel_mimoConv_ff(.sCLK(s_axi_aclk),
								   .dCLK(m32_axi_aclk),
								   .sRST(s_axi_aresetn),
								   .sD_IN(blueDMA_writeChannel_mimoConv_ff$sD_IN),
								   .sENQ(blueDMA_writeChannel_mimoConv_ff$sENQ),
								   .dDEQ(blueDMA_writeChannel_mimoConv_ff$dDEQ),
								   .sFULL_N(blueDMA_writeChannel_mimoConv_ff$sFULL_N),
								   .dEMPTY_N(blueDMA_writeChannel_mimoConv_ff$dEMPTY_N),
								   .dD_OUT(blueDMA_writeChannel_mimoConv_ff$dD_OUT));

  // submodule blueDMA_writeChannel_mimo_impl
  FIFO2 #(.width(32'd512),
	  .guarded(32'd1)) blueDMA_writeChannel_mimo_impl(.RST(m32_axi_aresetn),
							  .CLK(m32_axi_aclk),
							  .D_IN(blueDMA_writeChannel_mimo_impl$D_IN),
							  .ENQ(blueDMA_writeChannel_mimo_impl$ENQ),
							  .DEQ(blueDMA_writeChannel_mimo_impl$DEQ),
							  .CLR(blueDMA_writeChannel_mimo_impl$CLR),
							  .D_OUT(blueDMA_writeChannel_mimo_impl$D_OUT),
							  .FULL_N(blueDMA_writeChannel_mimo_impl$FULL_N),
							  .EMPTY_N(blueDMA_writeChannel_mimo_impl$EMPTY_N));

  // submodule blueDMA_writeChannel_toDone
  SyncFIFO1 #(.dataWidth(32'd1)) blueDMA_writeChannel_toDone(.sCLK(m32_axi_aclk),
							     .dCLK(s_axi_aclk),
							     .sRST(m32_axi_aresetn),
							     .sD_IN(blueDMA_writeChannel_toDone$sD_IN),
							     .sENQ(blueDMA_writeChannel_toDone$sENQ),
							     .dDEQ(blueDMA_writeChannel_toDone$dDEQ),
							     .sFULL_N(blueDMA_writeChannel_toDone$sFULL_N),
							     .dEMPTY_N(blueDMA_writeChannel_toDone$dEMPTY_N),
							     .dD_OUT());

  // submodule blueDMA_writeChannel_toMasterReq_ff
  SyncFIFO1 #(.dataWidth(32'd100)) blueDMA_writeChannel_toMasterReq_ff(.sCLK(s_axi_aclk),
								       .dCLK(m32_axi_aclk),
								       .sRST(s_axi_aresetn),
								       .sD_IN(blueDMA_writeChannel_toMasterReq_ff$sD_IN),
								       .sENQ(blueDMA_writeChannel_toMasterReq_ff$sENQ),
								       .dDEQ(blueDMA_writeChannel_toMasterReq_ff$dDEQ),
								       .sFULL_N(blueDMA_writeChannel_toMasterReq_ff$sFULL_N),
								       .dEMPTY_N(blueDMA_writeChannel_toMasterReq_ff$dEMPTY_N),
								       .dD_OUT(blueDMA_writeChannel_toMasterReq_ff$dD_OUT));

  // submodule blueDMA_writeChannel_toMaster_beatsPerRequestFIFO
  SizedFIFO #(.p1width(32'd8),
	      .p2depth(32'd32),
	      .p3cntr_width(32'd5),
	      .guarded(32'd1)) blueDMA_writeChannel_toMaster_beatsPerRequestFIFO(.RST(m32_axi_aresetn),
										 .CLK(m32_axi_aclk),
										 .D_IN(blueDMA_writeChannel_toMaster_beatsPerRequestFIFO$D_IN),
										 .ENQ(blueDMA_writeChannel_toMaster_beatsPerRequestFIFO$ENQ),
										 .DEQ(blueDMA_writeChannel_toMaster_beatsPerRequestFIFO$DEQ),
										 .CLR(blueDMA_writeChannel_toMaster_beatsPerRequestFIFO$CLR),
										 .D_OUT(blueDMA_writeChannel_toMaster_beatsPerRequestFIFO$D_OUT),
										 .FULL_N(blueDMA_writeChannel_toMaster_beatsPerRequestFIFO$FULL_N),
										 .EMPTY_N(blueDMA_writeChannel_toMaster_beatsPerRequestFIFO$EMPTY_N));

  // submodule blueDMA_writeChannel_toMaster_incomingBuffer
  FIFO2 #(.width(32'd512),
	  .guarded(32'd1)) blueDMA_writeChannel_toMaster_incomingBuffer(.RST(m32_axi_aresetn),
									.CLK(m32_axi_aclk),
									.D_IN(blueDMA_writeChannel_toMaster_incomingBuffer$D_IN),
									.ENQ(blueDMA_writeChannel_toMaster_incomingBuffer$ENQ),
									.DEQ(blueDMA_writeChannel_toMaster_incomingBuffer$DEQ),
									.CLR(blueDMA_writeChannel_toMaster_incomingBuffer$CLR),
									.D_OUT(blueDMA_writeChannel_toMaster_incomingBuffer$D_OUT),
									.FULL_N(blueDMA_writeChannel_toMaster_incomingBuffer$FULL_N),
									.EMPTY_N(blueDMA_writeChannel_toMaster_incomingBuffer$EMPTY_N));

  // submodule blueDMA_writeChannel_toMaster_master_wr_in_addr
  SizedFIFO #(.p1width(32'd94),
	      .p2depth(32'd32),
	      .p3cntr_width(32'd5),
	      .guarded(32'd1)) blueDMA_writeChannel_toMaster_master_wr_in_addr(.RST(m32_axi_aresetn),
									       .CLK(m32_axi_aclk),
									       .D_IN(blueDMA_writeChannel_toMaster_master_wr_in_addr$D_IN),
									       .ENQ(blueDMA_writeChannel_toMaster_master_wr_in_addr$ENQ),
									       .DEQ(blueDMA_writeChannel_toMaster_master_wr_in_addr$DEQ),
									       .CLR(blueDMA_writeChannel_toMaster_master_wr_in_addr$CLR),
									       .D_OUT(blueDMA_writeChannel_toMaster_master_wr_in_addr$D_OUT),
									       .FULL_N(blueDMA_writeChannel_toMaster_master_wr_in_addr$FULL_N),
									       .EMPTY_N(blueDMA_writeChannel_toMaster_master_wr_in_addr$EMPTY_N));

  // submodule blueDMA_writeChannel_toMaster_master_wr_in_data
  FIFO2 #(.width(32'd577),
	  .guarded(32'd1)) blueDMA_writeChannel_toMaster_master_wr_in_data(.RST(m32_axi_aresetn),
									   .CLK(m32_axi_aclk),
									   .D_IN(blueDMA_writeChannel_toMaster_master_wr_in_data$D_IN),
									   .ENQ(blueDMA_writeChannel_toMaster_master_wr_in_data$ENQ),
									   .DEQ(blueDMA_writeChannel_toMaster_master_wr_in_data$DEQ),
									   .CLR(blueDMA_writeChannel_toMaster_master_wr_in_data$CLR),
									   .D_OUT(blueDMA_writeChannel_toMaster_master_wr_in_data$D_OUT),
									   .FULL_N(blueDMA_writeChannel_toMaster_master_wr_in_data$FULL_N),
									   .EMPTY_N(blueDMA_writeChannel_toMaster_master_wr_in_data$EMPTY_N));

  // submodule blueDMA_writeChannel_toMaster_master_wr_out
  FIFO2 #(.width(32'd3),
	  .guarded(32'd1)) blueDMA_writeChannel_toMaster_master_wr_out(.RST(m32_axi_aresetn),
								       .CLK(m32_axi_aclk),
								       .D_IN(blueDMA_writeChannel_toMaster_master_wr_out$D_IN),
								       .ENQ(blueDMA_writeChannel_toMaster_master_wr_out$ENQ),
								       .DEQ(blueDMA_writeChannel_toMaster_master_wr_out$DEQ),
								       .CLR(blueDMA_writeChannel_toMaster_master_wr_out$CLR),
								       .D_OUT(),
								       .FULL_N(blueDMA_writeChannel_toMaster_master_wr_out$FULL_N),
								       .EMPTY_N(blueDMA_writeChannel_toMaster_master_wr_out$EMPTY_N));

  // submodule blueDMA_writeChannel_toMaster_reqGen_incomingBuffer
  FIFO2 #(.width(32'd100),
	  .guarded(32'd1)) blueDMA_writeChannel_toMaster_reqGen_incomingBuffer(.RST(m32_axi_aresetn),
									       .CLK(m32_axi_aclk),
									       .D_IN(blueDMA_writeChannel_toMaster_reqGen_incomingBuffer$D_IN),
									       .ENQ(blueDMA_writeChannel_toMaster_reqGen_incomingBuffer$ENQ),
									       .DEQ(blueDMA_writeChannel_toMaster_reqGen_incomingBuffer$DEQ),
									       .CLR(blueDMA_writeChannel_toMaster_reqGen_incomingBuffer$CLR),
									       .D_OUT(blueDMA_writeChannel_toMaster_reqGen_incomingBuffer$D_OUT),
									       .FULL_N(blueDMA_writeChannel_toMaster_reqGen_incomingBuffer$FULL_N),
									       .EMPTY_N(blueDMA_writeChannel_toMaster_reqGen_incomingBuffer$EMPTY_N));

  // submodule blueDMA_writeChannel_toMaster_reqGen_intermediateBuffer
  FIFO2 #(.width(32'd112),
	  .guarded(32'd1)) blueDMA_writeChannel_toMaster_reqGen_intermediateBuffer(.RST(m32_axi_aresetn),
										   .CLK(m32_axi_aclk),
										   .D_IN(blueDMA_writeChannel_toMaster_reqGen_intermediateBuffer$D_IN),
										   .ENQ(blueDMA_writeChannel_toMaster_reqGen_intermediateBuffer$ENQ),
										   .DEQ(blueDMA_writeChannel_toMaster_reqGen_intermediateBuffer$DEQ),
										   .CLR(blueDMA_writeChannel_toMaster_reqGen_intermediateBuffer$CLR),
										   .D_OUT(blueDMA_writeChannel_toMaster_reqGen_intermediateBuffer$D_OUT),
										   .FULL_N(blueDMA_writeChannel_toMaster_reqGen_intermediateBuffer$FULL_N),
										   .EMPTY_N(blueDMA_writeChannel_toMaster_reqGen_intermediateBuffer$EMPTY_N));

  // submodule blueDMA_writeChannel_toMaster_reqGen_intermediateBuffer2
  FIFO2 #(.width(32'd138),
	  .guarded(32'd1)) blueDMA_writeChannel_toMaster_reqGen_intermediateBuffer2(.RST(m32_axi_aresetn),
										    .CLK(m32_axi_aclk),
										    .D_IN(blueDMA_writeChannel_toMaster_reqGen_intermediateBuffer2$D_IN),
										    .ENQ(blueDMA_writeChannel_toMaster_reqGen_intermediateBuffer2$ENQ),
										    .DEQ(blueDMA_writeChannel_toMaster_reqGen_intermediateBuffer2$DEQ),
										    .CLR(blueDMA_writeChannel_toMaster_reqGen_intermediateBuffer2$CLR),
										    .D_OUT(blueDMA_writeChannel_toMaster_reqGen_intermediateBuffer2$D_OUT),
										    .FULL_N(blueDMA_writeChannel_toMaster_reqGen_intermediateBuffer2$FULL_N),
										    .EMPTY_N(blueDMA_writeChannel_toMaster_reqGen_intermediateBuffer2$EMPTY_N));

  // submodule blueDMA_writeChannel_toMaster_reqGen_intermediateBuffer3
  FIFO2 #(.width(32'd147),
	  .guarded(32'd1)) blueDMA_writeChannel_toMaster_reqGen_intermediateBuffer3(.RST(m32_axi_aresetn),
										    .CLK(m32_axi_aclk),
										    .D_IN(blueDMA_writeChannel_toMaster_reqGen_intermediateBuffer3$D_IN),
										    .ENQ(blueDMA_writeChannel_toMaster_reqGen_intermediateBuffer3$ENQ),
										    .DEQ(blueDMA_writeChannel_toMaster_reqGen_intermediateBuffer3$DEQ),
										    .CLR(blueDMA_writeChannel_toMaster_reqGen_intermediateBuffer3$CLR),
										    .D_OUT(blueDMA_writeChannel_toMaster_reqGen_intermediateBuffer3$D_OUT),
										    .FULL_N(blueDMA_writeChannel_toMaster_reqGen_intermediateBuffer3$FULL_N),
										    .EMPTY_N(blueDMA_writeChannel_toMaster_reqGen_intermediateBuffer3$EMPTY_N));

  // submodule blueDMA_writeChannel_toMaster_reqGen_outgoingBuffer
  FIFO2 #(.width(32'd158),
	  .guarded(32'd1)) blueDMA_writeChannel_toMaster_reqGen_outgoingBuffer(.RST(m32_axi_aresetn),
									       .CLK(m32_axi_aclk),
									       .D_IN(blueDMA_writeChannel_toMaster_reqGen_outgoingBuffer$D_IN),
									       .ENQ(blueDMA_writeChannel_toMaster_reqGen_outgoingBuffer$ENQ),
									       .DEQ(blueDMA_writeChannel_toMaster_reqGen_outgoingBuffer$DEQ),
									       .CLR(blueDMA_writeChannel_toMaster_reqGen_outgoingBuffer$CLR),
									       .D_OUT(blueDMA_writeChannel_toMaster_reqGen_outgoingBuffer$D_OUT),
									       .FULL_N(blueDMA_writeChannel_toMaster_reqGen_outgoingBuffer$FULL_N),
									       .EMPTY_N(blueDMA_writeChannel_toMaster_reqGen_outgoingBuffer$EMPTY_N));

  // rule RL_blueDMA_writeChannel_fromMaster_fillBuffer
  assign WILL_FIRE_RL_blueDMA_writeChannel_fromMaster_fillBuffer =
	     blueDMA_writeChannel_fromMaster_reqGen_outgoingBuffer$EMPTY_N &&
	     blueDMA_writeChannel_fromMaster_task_data_output_reg[32:7] ==
	     26'd0 &&
	     blueDMA_writeChannel_fromMaster_task_data_requests_reg[94:69] ==
	     26'd0 ;

  // rule RL_blueDMA_writeChannel_fromMaster_reqGen_finishRequest
  assign WILL_FIRE_RL_blueDMA_writeChannel_fromMaster_reqGen_finishRequest =
	     blueDMA_writeChannel_fromMaster_reqGen_intermediateBuffer3$EMPTY_N &&
	     blueDMA_writeChannel_fromMaster_reqGen_outgoingBuffer$FULL_N ;

  // rule RL_blueDMA_writeChannel_fromMaster_placeRequest
  assign WILL_FIRE_RL_blueDMA_writeChannel_fromMaster_placeRequest =
	     blueDMA_writeChannel_fromMaster_master_rd_in$FULL_N &&
	     blueDMA_writeChannel_fromMaster_maxOutstandingFIFO$FULL_N &&
	     blueDMA_writeChannel_fromMaster_task_data_requests_reg[94:69] !=
	     26'd0 ;

  // rule RL_blueDMA_writeChannel_fromMaster_forwardData
  assign WILL_FIRE_RL_blueDMA_writeChannel_fromMaster_forwardData =
	     blueDMA_writeChannel_fromMaster_master_rd_out$EMPTY_N &&
	     blueDMA_writeChannel_fromMaster_outgoingBuffer$FULL_N &&
	     blueDMA_writeChannel_fromMaster_maxOutstandingFIFO$EMPTY_N &&
	     blueDMA_writeChannel_fromMaster_task_data_output_reg[32:7] !=
	     26'd0 ;

  // rule RL_blueDMA_writeChannel_toMaster_fillBuffer
  assign WILL_FIRE_RL_blueDMA_writeChannel_toMaster_fillBuffer =
	     blueDMA_writeChannel_toMaster_reqGen_outgoingBuffer$EMPTY_N &&
	     blueDMA_writeChannel_toMaster_task_data_output_reg[32:7] ==
	     26'd0 &&
	     blueDMA_writeChannel_toMaster_task_data_requests_reg[94:69] ==
	     26'd0 &&
	     blueDMA_writeChannel_toMaster_outstanding_writes == 8'd0 ;

  // rule RL_blueDMA_writeChannel_toMaster_reqGen_finishRequest
  assign WILL_FIRE_RL_blueDMA_writeChannel_toMaster_reqGen_finishRequest =
	     blueDMA_writeChannel_toMaster_reqGen_intermediateBuffer3$EMPTY_N &&
	     blueDMA_writeChannel_toMaster_reqGen_outgoingBuffer$FULL_N ;

  // rule RL_blueDMA_writeChannel_toMaster_placeRequest
  assign WILL_FIRE_RL_blueDMA_writeChannel_toMaster_placeRequest =
	     blueDMA_writeChannel_toMaster_master_wr_in_addr$FULL_N &&
	     blueDMA_writeChannel_toMaster_beatsPerRequestFIFO$FULL_N &&
	     blueDMA_writeChannel_toMaster_task_data_requests_reg[94:69] !=
	     26'd0 &&
	     blueDMA_writeChannel_toMaster_incomingBuffer$EMPTY_N ;

  // rule RL_blueDMA_writeChannel_toMaster_forwardData
  assign WILL_FIRE_RL_blueDMA_writeChannel_toMaster_forwardData =
	     blueDMA_writeChannel_toMaster_incomingBuffer$EMPTY_N &&
	     blueDMA_writeChannel_toMaster_beatsPerRequestFIFO$EMPTY_N &&
	     blueDMA_writeChannel_toMaster_master_wr_in_data$FULL_N &&
	     blueDMA_writeChannel_toMaster_task_data_output_reg[32:7] !=
	     26'd0 ;

  // rule RL_blueDMA_writeChannel_byteAlignerFrom_forwardOutput
  assign WILL_FIRE_RL_blueDMA_writeChannel_byteAlignerFrom_forwardOutput =
	     blueDMA_writeChannel_byteAlignerFrom_outgoing$FULL_N &&
	     !blueDMA_writeChannel_byteAlignerFrom_addr_ff$dEMPTY_N &&
	     blueDMA_writeChannel_byteAlignerFrom_fetchedDatum &&
	     !blueDMA_writeChannel_byteAlignerFrom_bytes_lef_ETC___d765 &&
	     !blueDMA_writeChannel_byteAlignerFrom_addr_ff$dEMPTY_N ;

  // rule RL_blueDMA_writeChannel_byteAlignerFrom_fetchNewData
  assign WILL_FIRE_RL_blueDMA_writeChannel_byteAlignerFrom_fetchNewData =
	     blueDMA_writeChannel_byteAlignerFrom_incoming$EMPTY_N &&
	     !blueDMA_writeChannel_byteAlignerFrom_addr_ff$dEMPTY_N &&
	     !blueDMA_writeChannel_byteAlignerFrom_fetchedDatum$port1__read &&
	     blueDMA_writeChannel_byteAlignerFrom_bytes_in__ETC___d750 &&
	     !blueDMA_writeChannel_byteAlignerFrom_addr_ff$dEMPTY_N ;

  // rule RL_blueDMA_writeChannel_byteAlignerFrom_forwardOutputLast
  assign CAN_FIRE_RL_blueDMA_writeChannel_byteAlignerFrom_forwardOutputLast =
	     blueDMA_writeChannel_byteAlignerFrom_outgoing$FULL_N &&
	     !blueDMA_writeChannel_byteAlignerFrom_addr_ff$dEMPTY_N &&
	     !blueDMA_writeChannel_byteAlignerFrom_fetchedDatum &&
	     !blueDMA_writeChannel_byteAlignerFrom_bytes_in__ETC___d750 &&
	     blueDMA_writeChannel_byteAlignerFrom_bytes_out <
	     blueDMA_writeChannel_byteAlignerFrom_bytes_total ;
  assign WILL_FIRE_RL_blueDMA_writeChannel_byteAlignerFrom_forwardOutputLast =
	     CAN_FIRE_RL_blueDMA_writeChannel_byteAlignerFrom_forwardOutputLast &&
	     !blueDMA_writeChannel_byteAlignerFrom_addr_ff$dEMPTY_N ;

  // rule RL_blueDMA_writeChannel_byteAlignerTo_forwardOutput
  assign WILL_FIRE_RL_blueDMA_writeChannel_byteAlignerTo_forwardOutput =
	     blueDMA_writeChannel_byteAlignerTo_outgoing$FULL_N &&
	     !blueDMA_writeChannel_byteAlignerTo_addr_ff$dEMPTY_N &&
	     blueDMA_writeChannel_byteAlignerTo_fetchedDatum &&
	     !blueDMA_writeChannel_byteAlignerTo_bytes_left__ETC___d822 &&
	     !blueDMA_writeChannel_byteAlignerTo_addr_ff$dEMPTY_N ;

  // rule RL_blueDMA_writeChannel_byteAlignerTo_fetchNewData
  assign WILL_FIRE_RL_blueDMA_writeChannel_byteAlignerTo_fetchNewData =
	     blueDMA_writeChannel_byteAlignerTo_incoming$EMPTY_N &&
	     !blueDMA_writeChannel_byteAlignerTo_addr_ff$dEMPTY_N &&
	     !blueDMA_writeChannel_byteAlignerTo_fetchedDatum$port1__read &&
	     blueDMA_writeChannel_byteAlignerTo_bytes_in_05_ETC___d807 &&
	     !blueDMA_writeChannel_byteAlignerTo_addr_ff$dEMPTY_N ;

  // rule RL_blueDMA_writeChannel_byteAlignerTo_forwardOutputLast
  assign CAN_FIRE_RL_blueDMA_writeChannel_byteAlignerTo_forwardOutputLast =
	     blueDMA_writeChannel_byteAlignerTo_outgoing$FULL_N &&
	     !blueDMA_writeChannel_byteAlignerTo_addr_ff$dEMPTY_N &&
	     !blueDMA_writeChannel_byteAlignerTo_fetchedDatum &&
	     !blueDMA_writeChannel_byteAlignerTo_bytes_in_05_ETC___d807 &&
	     blueDMA_writeChannel_byteAlignerTo_bytes_out <
	     blueDMA_writeChannel_byteAlignerTo_bytes_total ;
  assign WILL_FIRE_RL_blueDMA_writeChannel_byteAlignerTo_forwardOutputLast =
	     CAN_FIRE_RL_blueDMA_writeChannel_byteAlignerTo_forwardOutputLast &&
	     !blueDMA_writeChannel_byteAlignerTo_addr_ff$dEMPTY_N ;

  // rule RL_blueDMA_readChannel_fromMaster_fillBuffer
  assign WILL_FIRE_RL_blueDMA_readChannel_fromMaster_fillBuffer =
	     blueDMA_readChannel_fromMaster_reqGen_outgoingBuffer$EMPTY_N &&
	     blueDMA_readChannel_fromMaster_task_data_output_reg[32:7] ==
	     26'd0 &&
	     blueDMA_readChannel_fromMaster_task_data_requests_reg[94:69] ==
	     26'd0 ;

  // rule RL_blueDMA_readChannel_fromMaster_reqGen_finishRequest
  assign WILL_FIRE_RL_blueDMA_readChannel_fromMaster_reqGen_finishRequest =
	     blueDMA_readChannel_fromMaster_reqGen_intermediateBuffer3$EMPTY_N &&
	     blueDMA_readChannel_fromMaster_reqGen_outgoingBuffer$FULL_N ;

  // rule RL_blueDMA_readChannel_fromMaster_placeRequest
  assign WILL_FIRE_RL_blueDMA_readChannel_fromMaster_placeRequest =
	     blueDMA_readChannel_fromMaster_master_rd_in$FULL_N &&
	     blueDMA_readChannel_fromMaster_maxOutstandingFIFO$FULL_N &&
	     blueDMA_readChannel_fromMaster_task_data_requests_reg[94:69] !=
	     26'd0 ;

  // rule RL_blueDMA_readChannel_fromMaster_forwardData
  assign WILL_FIRE_RL_blueDMA_readChannel_fromMaster_forwardData =
	     blueDMA_readChannel_fromMaster_master_rd_out$EMPTY_N &&
	     blueDMA_readChannel_fromMaster_outgoingBuffer$FULL_N &&
	     blueDMA_readChannel_fromMaster_maxOutstandingFIFO$EMPTY_N &&
	     blueDMA_readChannel_fromMaster_task_data_output_reg[32:7] !=
	     26'd0 ;

  // rule RL_blueDMA_readChannel_toMaster_fillBuffer
  assign WILL_FIRE_RL_blueDMA_readChannel_toMaster_fillBuffer =
	     blueDMA_readChannel_toMaster_reqGen_outgoingBuffer$EMPTY_N &&
	     blueDMA_readChannel_toMaster_task_data_output_reg[32:7] ==
	     26'd0 &&
	     blueDMA_readChannel_toMaster_task_data_requests_reg[94:69] ==
	     26'd0 &&
	     blueDMA_readChannel_toMaster_outstanding_writes == 8'd0 ;

  // rule RL_blueDMA_readChannel_toMaster_reqGen_finishRequest
  assign WILL_FIRE_RL_blueDMA_readChannel_toMaster_reqGen_finishRequest =
	     blueDMA_readChannel_toMaster_reqGen_intermediateBuffer3$EMPTY_N &&
	     blueDMA_readChannel_toMaster_reqGen_outgoingBuffer$FULL_N ;

  // rule RL_blueDMA_readChannel_toMaster_placeRequest
  assign WILL_FIRE_RL_blueDMA_readChannel_toMaster_placeRequest =
	     blueDMA_readChannel_toMaster_master_wr_in_addr$FULL_N &&
	     blueDMA_readChannel_toMaster_beatsPerRequestFIFO$FULL_N &&
	     blueDMA_readChannel_toMaster_task_data_requests_reg[94:69] !=
	     26'd0 &&
	     blueDMA_readChannel_toMaster_incomingBuffer$EMPTY_N ;

  // rule RL_blueDMA_readChannel_toMaster_forwardData
  assign WILL_FIRE_RL_blueDMA_readChannel_toMaster_forwardData =
	     blueDMA_readChannel_toMaster_incomingBuffer$EMPTY_N &&
	     blueDMA_readChannel_toMaster_beatsPerRequestFIFO$EMPTY_N &&
	     blueDMA_readChannel_toMaster_master_wr_in_data$FULL_N &&
	     blueDMA_readChannel_toMaster_task_data_output_reg[32:7] !=
	     26'd0 ;

  // rule RL_blueDMA_readChannel_byteAlignerFrom_forwardOutput
  assign WILL_FIRE_RL_blueDMA_readChannel_byteAlignerFrom_forwardOutput =
	     blueDMA_readChannel_byteAlignerFrom_outgoing$FULL_N &&
	     !blueDMA_readChannel_byteAlignerFrom_addr_ff$dEMPTY_N &&
	     blueDMA_readChannel_byteAlignerFrom_fetchedDatum &&
	     !blueDMA_readChannel_byteAlignerFrom_bytes_left_ETC___d1678 &&
	     !blueDMA_readChannel_byteAlignerFrom_addr_ff$dEMPTY_N ;

  // rule RL_blueDMA_readChannel_byteAlignerFrom_fetchNewData
  assign WILL_FIRE_RL_blueDMA_readChannel_byteAlignerFrom_fetchNewData =
	     blueDMA_readChannel_byteAlignerFrom_incoming$EMPTY_N &&
	     !blueDMA_readChannel_byteAlignerFrom_addr_ff$dEMPTY_N &&
	     !blueDMA_readChannel_byteAlignerFrom_fetchedDatum$port1__read &&
	     blueDMA_readChannel_byteAlignerFrom_bytes_in_6_ETC___d1663 &&
	     !blueDMA_readChannel_byteAlignerFrom_addr_ff$dEMPTY_N ;

  // rule RL_blueDMA_readChannel_byteAlignerFrom_forwardOutputLast
  assign CAN_FIRE_RL_blueDMA_readChannel_byteAlignerFrom_forwardOutputLast =
	     blueDMA_readChannel_byteAlignerFrom_outgoing$FULL_N &&
	     !blueDMA_readChannel_byteAlignerFrom_addr_ff$dEMPTY_N &&
	     !blueDMA_readChannel_byteAlignerFrom_fetchedDatum &&
	     !blueDMA_readChannel_byteAlignerFrom_bytes_in_6_ETC___d1663 &&
	     blueDMA_readChannel_byteAlignerFrom_bytes_out <
	     blueDMA_readChannel_byteAlignerFrom_bytes_total ;
  assign WILL_FIRE_RL_blueDMA_readChannel_byteAlignerFrom_forwardOutputLast =
	     CAN_FIRE_RL_blueDMA_readChannel_byteAlignerFrom_forwardOutputLast &&
	     !blueDMA_readChannel_byteAlignerFrom_addr_ff$dEMPTY_N ;

  // rule RL_blueDMA_readChannel_byteAlignerTo_forwardOutput
  assign WILL_FIRE_RL_blueDMA_readChannel_byteAlignerTo_forwardOutput =
	     blueDMA_readChannel_byteAlignerTo_outgoing$FULL_N &&
	     !blueDMA_readChannel_byteAlignerTo_addr_ff$dEMPTY_N &&
	     blueDMA_readChannel_byteAlignerTo_fetchedDatum &&
	     !blueDMA_readChannel_byteAlignerTo_bytes_left_i_ETC___d1735 &&
	     !blueDMA_readChannel_byteAlignerTo_addr_ff$dEMPTY_N ;

  // rule RL_blueDMA_readChannel_byteAlignerTo_fetchNewData
  assign WILL_FIRE_RL_blueDMA_readChannel_byteAlignerTo_fetchNewData =
	     blueDMA_readChannel_byteAlignerTo_incoming$EMPTY_N &&
	     !blueDMA_readChannel_byteAlignerTo_addr_ff$dEMPTY_N &&
	     !blueDMA_readChannel_byteAlignerTo_fetchedDatum$port1__read &&
	     blueDMA_readChannel_byteAlignerTo_bytes_in_718_ETC___d1720 &&
	     !blueDMA_readChannel_byteAlignerTo_addr_ff$dEMPTY_N ;

  // rule RL_blueDMA_readChannel_byteAlignerTo_forwardOutputLast
  assign CAN_FIRE_RL_blueDMA_readChannel_byteAlignerTo_forwardOutputLast =
	     blueDMA_readChannel_byteAlignerTo_outgoing$FULL_N &&
	     !blueDMA_readChannel_byteAlignerTo_addr_ff$dEMPTY_N &&
	     !blueDMA_readChannel_byteAlignerTo_fetchedDatum &&
	     !blueDMA_readChannel_byteAlignerTo_bytes_in_718_ETC___d1720 &&
	     blueDMA_readChannel_byteAlignerTo_bytes_out <
	     blueDMA_readChannel_byteAlignerTo_bytes_total ;
  assign WILL_FIRE_RL_blueDMA_readChannel_byteAlignerTo_forwardOutputLast =
	     CAN_FIRE_RL_blueDMA_readChannel_byteAlignerTo_forwardOutputLast &&
	     !blueDMA_readChannel_byteAlignerTo_addr_ff$dEMPTY_N ;

  // rule RL_blueDMA_s_config_axiReadSpecialIsHandled
  assign WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled =
	     blueDMA_s_config_readSlave_in$EMPTY_N &&
	     blueDMA_s_config_readSlave_in$D_OUT[9:6] == 4'd0 ;

  // rule RL_blueDMA_s_config_axiReadSpecialIsHandled_1
  assign WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_1 =
	     blueDMA_s_config_readSlave_in$EMPTY_N &&
	     blueDMA_s_config_readSlave_in$D_OUT[9:6] == 4'd1 ;

  // rule RL_blueDMA_s_config_axiReadSpecialIsHandled_2
  assign WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_2 =
	     blueDMA_s_config_readSlave_in$EMPTY_N &&
	     blueDMA_s_config_readSlave_in$D_OUT[9:6] == 4'd3 ;

  // rule RL_blueDMA_s_config_axiReadSpecialIsHandled_3
  assign WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_3 =
	     blueDMA_s_config_readSlave_in$EMPTY_N &&
	     blueDMA_s_config_readSlave_in$D_OUT[9:6] == 4'd2 ;

  // rule RL_blueDMA_s_config_axiReadSpecialIsHandled_4
  assign WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_4 =
	     blueDMA_s_config_readSlave_in$EMPTY_N &&
	     blueDMA_s_config_readSlave_in$D_OUT[9:6] == 4'd6 ;

  // rule RL_blueDMA_s_config_axiReadSpecialIsHandled_5
  assign WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_5 =
	     blueDMA_s_config_readSlave_in$EMPTY_N &&
	     blueDMA_s_config_readSlave_in$D_OUT[9:6] == 4'd7 ;

  // rule RL_blueDMA_s_config_axiReadSpecialIsHandled_6
  assign WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_6 =
	     blueDMA_s_config_readSlave_in$EMPTY_N &&
	     blueDMA_s_config_readSlave_in$D_OUT[9:6] == 4'd8 ;

  // rule RL_blueDMA_s_config_axiReadSpecialIsHandled_7
  assign WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_7 =
	     blueDMA_s_config_readSlave_in$EMPTY_N &&
	     blueDMA_s_config_readSlave_in$D_OUT[9:6] == 4'd9 ;

  // rule RL_blueDMA_s_config_axiReadSpecialIsHandled_8
  assign WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_8 =
	     blueDMA_s_config_readSlave_in$EMPTY_N &&
	     blueDMA_s_config_readSlave_in$D_OUT[9:6] == 4'd10 ;

  // rule RL_blueDMA_s_config_axiReadSpecialIsHandled_9
  assign WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_9 =
	     blueDMA_s_config_readSlave_in$EMPTY_N &&
	     blueDMA_s_config_readSlave_in$D_OUT[9:6] == 4'd11 ;

  // rule RL_blueDMA_s_config_axiReadSpecialIsHandled_10
  assign WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_10 =
	     blueDMA_s_config_readSlave_in$EMPTY_N &&
	     blueDMA_s_config_readSlave_in$D_OUT[9:6] == 4'd12 ;

  // rule RL_blueDMA_s_config_axiReadSpecialIsHandled_11
  assign WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_11 =
	     blueDMA_s_config_readSlave_in$EMPTY_N &&
	     blueDMA_s_config_readSlave_in$D_OUT[9:6] == 4'd13 ;

  // rule RL_blueDMA_s_config_axiReadSpecial
  assign WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial =
	     blueDMA_s_config_readSlave_in$EMPTY_N &&
	     blueDMA_s_config_readSlave_out$FULL_N &&
	     blueDMA_s_config_readSlave_in$D_OUT[9:6] == 4'd0 &&
	     !blueDMA_s_config_readBusy ;

  // rule RL_blueDMA_s_config_axiReadSpecial_1
  assign WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_1 =
	     blueDMA_s_config_readSlave_in$EMPTY_N &&
	     blueDMA_s_config_readSlave_out$FULL_N &&
	     blueDMA_s_config_readSlave_in$D_OUT[9:6] == 4'd1 &&
	     !blueDMA_s_config_readBusy ;

  // rule RL_blueDMA_s_config_axiReadSpecial_2
  assign WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_2 =
	     blueDMA_s_config_readSlave_in$EMPTY_N &&
	     blueDMA_s_config_readSlave_out$FULL_N &&
	     blueDMA_s_config_readSlave_in$D_OUT[9:6] == 4'd3 &&
	     !blueDMA_s_config_readBusy ;

  // rule RL_blueDMA_s_config_axiReadSpecial_3
  assign WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_3 =
	     blueDMA_s_config_readSlave_in$EMPTY_N &&
	     blueDMA_s_config_readSlave_out$FULL_N &&
	     blueDMA_s_config_readSlave_in$D_OUT[9:6] == 4'd2 &&
	     !blueDMA_s_config_readBusy ;

  // rule RL_blueDMA_s_config_axiReadSpecial_4
  assign WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_4 =
	     blueDMA_s_config_readSlave_in$EMPTY_N &&
	     blueDMA_s_config_readSlave_out$FULL_N &&
	     blueDMA_s_config_readSlave_in$D_OUT[9:6] == 4'd6 &&
	     !blueDMA_s_config_readBusy ;

  // rule RL_blueDMA_readChannel_handleCommand
  assign WILL_FIRE_RL_blueDMA_readChannel_handleCommand =
	     blueDMA_readChannel_fromMasterReq_ff$sFULL_N &&
	     blueDMA_readChannel_toMasterReq_ff$sFULL_N &&
	     blueDMA_readChannel_mimoConv_ff$sFULL_N &&
	     blueDMA_readChannel_cmdIn$EMPTY_N &&
	     !blueDMA_readChannel_opInProgress ;

  // rule RL_blueDMA_s_config_axiReadSpecial_5
  assign WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_5 =
	     blueDMA_s_config_readSlave_in$EMPTY_N &&
	     blueDMA_s_config_readSlave_out$FULL_N &&
	     blueDMA_s_config_readSlave_in$D_OUT[9:6] == 4'd7 &&
	     !blueDMA_s_config_readBusy ;

  // rule RL_blueDMA_writeChannel_handleCommand
  assign WILL_FIRE_RL_blueDMA_writeChannel_handleCommand =
	     blueDMA_writeChannel_fromMasterReq_ff$sFULL_N &&
	     blueDMA_writeChannel_toMasterReq_ff$sFULL_N &&
	     blueDMA_writeChannel_mimoConv_ff$sFULL_N &&
	     blueDMA_writeChannel_cmdIn$EMPTY_N &&
	     !blueDMA_writeChannel_opInProgress ;

  // rule RL_blueDMA_s_config_axiReadSpecial_8
  assign WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_8 =
	     blueDMA_s_config_readSlave_in$EMPTY_N &&
	     blueDMA_s_config_readSlave_out$FULL_N &&
	     blueDMA_s_config_readSlave_in$D_OUT[9:6] == 4'd10 &&
	     !blueDMA_s_config_readBusy ;

  // rule RL_blueDMA_s_config_axiReadSpecial_6
  assign WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_6 =
	     blueDMA_s_config_readSlave_in$EMPTY_N &&
	     blueDMA_s_config_readSlave_out$FULL_N &&
	     blueDMA_s_config_readSlave_in$D_OUT[9:6] == 4'd8 &&
	     !blueDMA_s_config_readBusy ;

  // rule RL_blueDMA_s_config_axiReadSpecial_7
  assign WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_7 =
	     blueDMA_s_config_readSlave_in$EMPTY_N &&
	     blueDMA_s_config_readSlave_out$FULL_N &&
	     blueDMA_s_config_readSlave_in$D_OUT[9:6] == 4'd9 &&
	     !blueDMA_s_config_readBusy ;

  // rule RL_blueDMA_readChannel_setInterrupt
  assign WILL_FIRE_RL_blueDMA_readChannel_setInterrupt =
	     blueDMA_readChannel_fromDone$dEMPTY_N &&
	     blueDMA_readChannel_toDone$dEMPTY_N &&
	     blueDMA_readChannel_opInProgress ;

  // rule RL_blueDMA_s_config_axiReadSpecial_9
  assign WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_9 =
	     blueDMA_s_config_readSlave_in$EMPTY_N &&
	     blueDMA_s_config_readSlave_out$FULL_N &&
	     blueDMA_s_config_readSlave_in$D_OUT[9:6] == 4'd11 &&
	     !blueDMA_s_config_readBusy ;

  // rule RL_blueDMA_s_config_axiReadSpecial_10
  assign WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_10 =
	     blueDMA_s_config_readSlave_in$EMPTY_N &&
	     blueDMA_s_config_readSlave_out$FULL_N &&
	     blueDMA_s_config_readSlave_in$D_OUT[9:6] == 4'd12 &&
	     !blueDMA_s_config_readBusy ;

  // rule RL_blueDMA_writeChannel_setInterrupt
  assign WILL_FIRE_RL_blueDMA_writeChannel_setInterrupt =
	     blueDMA_writeChannel_fromDone$dEMPTY_N &&
	     blueDMA_writeChannel_toDone$dEMPTY_N &&
	     blueDMA_writeChannel_opInProgress ;

  // rule RL_blueDMA_s_config_axiReadSpecial_11
  assign WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_11 =
	     blueDMA_s_config_readSlave_in$EMPTY_N &&
	     blueDMA_s_config_readSlave_out$FULL_N &&
	     blueDMA_s_config_readSlave_in$D_OUT[9:6] == 4'd13 &&
	     !blueDMA_s_config_readBusy ;

  // rule RL_blueDMA_s_config_axiReadFallback
  assign WILL_FIRE_RL_blueDMA_s_config_axiReadFallback =
	     blueDMA_s_config_readSlave_in$EMPTY_N &&
	     blueDMA_s_config_readSlave_out$FULL_N &&
	     !blueDMA_s_config_readIsHandled$whas ;

  // rule RL_blueDMA_s_config_1_axiWriteSpecialIsHandled
  assign WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecialIsHandled =
	     blueDMA_s_config_writeSlave_in$EMPTY_N &&
	     blueDMA_s_config_writeSlave_in$D_OUT[81:78] == 4'd4 ;

  // rule RL_blueDMA_s_config_1_axiWriteSpecial
  assign WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial =
	     blueDMA_s_config_writeSlave_in$EMPTY_N &&
	     blueDMA_s_config_writeSlave_out$FULL_N &&
	     blueDMA_cmdsIn$FULL_N &&
	     blueDMA_s_config_writeSlave_in$D_OUT[81:78] == 4'd4 &&
	     !blueDMA_s_config_writeBusy ;

  // rule RL_blueDMA_s_config_1_axiWriteSpecialIsHandled_1
  assign WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecialIsHandled_1 =
	     blueDMA_s_config_writeSlave_in$EMPTY_N &&
	     blueDMA_s_config_writeSlave_in$D_OUT[81:78] == 4'd0 ;

  // rule RL_blueDMA_s_config_1_axiWriteSpecial_1
  assign WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_1 =
	     blueDMA_s_config_writeSlave_in$EMPTY_N &&
	     blueDMA_s_config_writeSlave_out$FULL_N &&
	     blueDMA_s_config_writeSlave_in$D_OUT[81:78] == 4'd0 &&
	     !blueDMA_s_config_writeBusy ;

  // rule RL_blueDMA_s_config_1_axiWriteSpecialIsHandled_2
  assign WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecialIsHandled_2 =
	     blueDMA_s_config_writeSlave_in$EMPTY_N &&
	     blueDMA_s_config_writeSlave_in$D_OUT[81:78] == 4'd1 ;

  // rule RL_blueDMA_s_config_1_axiWriteSpecial_2
  assign WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_2 =
	     blueDMA_s_config_writeSlave_in$EMPTY_N &&
	     blueDMA_s_config_writeSlave_out$FULL_N &&
	     blueDMA_s_config_writeSlave_in$D_OUT[81:78] == 4'd1 &&
	     !blueDMA_s_config_writeBusy ;

  // rule RL_blueDMA_s_config_1_axiWriteSpecialIsHandled_3
  assign WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecialIsHandled_3 =
	     blueDMA_s_config_writeSlave_in$EMPTY_N &&
	     blueDMA_s_config_writeSlave_in$D_OUT[81:78] == 4'd2 ;

  // rule RL_blueDMA_s_config_1_axiWriteSpecial_3
  assign WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_3 =
	     blueDMA_s_config_writeSlave_in$EMPTY_N &&
	     blueDMA_s_config_writeSlave_out$FULL_N &&
	     blueDMA_s_config_writeSlave_in$D_OUT[81:78] == 4'd2 &&
	     !blueDMA_s_config_writeBusy ;

  // rule RL_blueDMA_s_config_1_axiWriteSpecialIsHandled_4
  assign WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecialIsHandled_4 =
	     blueDMA_s_config_writeSlave_in$EMPTY_N &&
	     blueDMA_s_config_writeSlave_in$D_OUT[81:78] == 4'd10 ;

  // rule RL_blueDMA_s_config_1_axiWriteSpecial_4
  assign WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_4 =
	     blueDMA_s_config_writeSlave_in$EMPTY_N &&
	     blueDMA_s_config_writeSlave_out$FULL_N &&
	     blueDMA_s_config_writeSlave_in$D_OUT[81:78] == 4'd10 &&
	     !blueDMA_s_config_writeBusy ;

  // rule RL_blueDMA_s_config_1_axiWriteSpecialIsHandled_5
  assign WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecialIsHandled_5 =
	     blueDMA_s_config_writeSlave_in$EMPTY_N &&
	     blueDMA_s_config_writeSlave_in$D_OUT[81:78] == 4'd13 ;

  // rule RL_blueDMA_s_config_1_axiWriteSpecial_5
  assign WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_5 =
	     blueDMA_s_config_writeSlave_in$EMPTY_N &&
	     blueDMA_s_config_writeSlave_out$FULL_N &&
	     blueDMA_s_config_writeSlave_in$D_OUT[81:78] == 4'd13 &&
	     !blueDMA_s_config_writeBusy ;

  // rule RL_blueDMA_s_config_1_axiWriteFallback
  assign WILL_FIRE_RL_blueDMA_s_config_1_axiWriteFallback =
	     blueDMA_s_config_writeSlave_in$EMPTY_N &&
	     blueDMA_s_config_writeSlave_out$FULL_N &&
	     !blueDMA_s_config_writeIsHandled$whas &&
	     !WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_5 &&
	     !WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_4 &&
	     !WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_3 &&
	     !WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_2 &&
	     !WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_1 &&
	     !WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial ;

  // inputs to muxes for submodule ports
  assign MUX_blueDMA_readChannel_mimo_words_left$write_1__SEL_2 =
	     blueDMA_readChannel_mimo_impl$EMPTY_N &&
	     blueDMA_readChannel_toMaster_incomingBuffer$FULL_N ;
  assign MUX_blueDMA_readChannel_toMaster_outstanding_writes$write_1__SEL_2 =
	     blueDMA_readChannel_toMaster_master_wr_out$EMPTY_N &&
	     !WILL_FIRE_RL_blueDMA_readChannel_toMaster_placeRequest ;
  assign MUX_blueDMA_writeChannel_mimo_words_left$write_1__SEL_2 =
	     blueDMA_writeChannel_mimo_impl$EMPTY_N &&
	     blueDMA_writeChannel_toMaster_incomingBuffer$FULL_N ;
  assign MUX_blueDMA_writeChannel_toMaster_outstanding_writes$write_1__SEL_2 =
	     blueDMA_writeChannel_toMaster_master_wr_out$EMPTY_N &&
	     !WILL_FIRE_RL_blueDMA_writeChannel_toMaster_placeRequest ;
  assign MUX_blueDMA_readChannel_byteAlignerFrom_buffer$port0__write_1__VAL_1 =
	     { 512'd0,
	       blueDMA_readChannel_byteAlignerFrom_buffer[1023:512] } ;
  assign MUX_blueDMA_readChannel_byteAlignerFrom_bytes_in$write_1__VAL_1 =
	     blueDMA_readChannel_byteAlignerFrom_bytes_in + 32'd64 ;
  assign MUX_blueDMA_readChannel_byteAlignerFrom_bytes_left_in_buffer$port0__write_1__VAL_1 =
	     blueDMA_readChannel_byteAlignerFrom_bytes_left_in_buffer -
	     blueDMA_readChannel_byteAlignerFrom_bytes_out_needed ;
  assign MUX_blueDMA_readChannel_byteAlignerFrom_bytes_out$write_1__VAL_1 =
	     blueDMA_readChannel_byteAlignerFrom_bytes_out + b__h275046 ;
  assign MUX_blueDMA_readChannel_byteAlignerFrom_bytes_out$write_1__VAL_2 =
	     blueDMA_readChannel_byteAlignerFrom_bytes_out + 32'd512 ;
  assign MUX_blueDMA_readChannel_byteAlignerFrom_bytes_out_needed$write_1__VAL_1 =
	     7'd64 - b__h300855 ;
  assign MUX_blueDMA_readChannel_byteAlignerTo_buffer$port0__write_1__VAL_1 =
	     { 512'd0, blueDMA_readChannel_byteAlignerTo_buffer[1023:512] } ;
  assign MUX_blueDMA_readChannel_byteAlignerTo_bytes_in$write_1__VAL_1 =
	     blueDMA_readChannel_byteAlignerTo_bytes_in + 32'd64 ;
  assign MUX_blueDMA_readChannel_byteAlignerTo_bytes_left_in_buffer$port0__write_1__VAL_1 =
	     blueDMA_readChannel_byteAlignerTo_bytes_left_in_buffer -
	     blueDMA_readChannel_byteAlignerTo_bytes_out_needed ;
  assign MUX_blueDMA_readChannel_byteAlignerTo_bytes_out$write_1__VAL_1 =
	     blueDMA_readChannel_byteAlignerTo_bytes_out + b__h360805 ;
  assign MUX_blueDMA_readChannel_byteAlignerTo_bytes_out$write_1__VAL_2 =
	     blueDMA_readChannel_byteAlignerTo_bytes_out + 32'd512 ;
  assign MUX_blueDMA_readChannel_byteAlignerTo_bytes_out_needed$write_1__VAL_1 =
	     7'd64 - b__h386600 ;
  assign MUX_blueDMA_readChannel_fromMaster_task_data_output_reg$write_1__VAL_1 =
	     { blueDMA_readChannel_fromMaster_task_data_output_reg[44:33],
	       x_transfers_total__h198356,
	       blueDMA_readChannel_fromMaster_task_data_output_reg[6:0] } ;
  assign MUX_blueDMA_readChannel_fromMaster_task_data_requests_reg$write_1__VAL_1 =
	     { blueDMA_readChannel_fromMaster_task_data_requests_reg[112:95],
	       x_requests_total__h198021,
	       blueDMA_readChannel_fromMaster_task_data_requests_reg[68:38],
	       x_address_dynamic__h198023,
	       12'd0,
	       blueDMA_readChannel_fromMaster_task_data_requests_reg[4:1],
	       1'd0 } ;
  assign MUX_blueDMA_readChannel_mimo_words_left$write_1__VAL_2 =
	     blueDMA_readChannel_mimo_words_left - 26'd1 ;
  assign MUX_blueDMA_readChannel_toMaster_beatsThisRequestCntr$write_1__VAL_1 =
	     blueDMA_readChannel_toMaster_beatsThisRequestC_ETC___d1304 ?
	       8'd0 :
	       beatsThisRequestCntrT__h203061 ;
  assign MUX_blueDMA_readChannel_toMaster_outstanding_writes$write_1__VAL_1 =
	     blueDMA_readChannel_toMaster_outstanding_writes + 8'd1 ;
  assign MUX_blueDMA_readChannel_toMaster_outstanding_writes$write_1__VAL_2 =
	     blueDMA_readChannel_toMaster_outstanding_writes - 8'd1 ;
  assign MUX_blueDMA_readChannel_toMaster_task_data_output_reg$write_1__VAL_1 =
	     { blueDMA_readChannel_toMaster_task_data_output_reg[44:33],
	       x_transfers_total__h214093,
	       blueDMA_readChannel_toMaster_task_data_output_reg[6:1],
	       1'd0 } ;
  assign MUX_blueDMA_readChannel_toMaster_task_data_requests_reg$write_1__VAL_1 =
	     { blueDMA_readChannel_toMaster_task_data_requests_reg[112:95],
	       x_requests_total__h202793,
	       blueDMA_readChannel_toMaster_task_data_requests_reg[68:38],
	       x_address_dynamic__h202795,
	       12'd0,
	       blueDMA_readChannel_toMaster_task_data_requests_reg[4:1],
	       1'd0 } ;
  assign MUX_blueDMA_s_config_readSlave_out$enq_1__VAL_1 =
	     { blueDMA_host_addr, 2'd0 } ;
  assign MUX_blueDMA_s_config_readSlave_out$enq_1__VAL_2 =
	     { blueDMA_fpga_addr, 2'd0 } ;
  assign MUX_blueDMA_s_config_readSlave_out$enq_1__VAL_3 =
	     { blueDMA_id, 2'd0 } ;
  assign MUX_blueDMA_s_config_readSlave_out$enq_1__VAL_4 =
	     { blueDMA_transfer_length, 2'd0 } ;
  assign MUX_blueDMA_s_config_readSlave_out$enq_1__VAL_5 =
	     { v__h401740, 2'd0 } ;
  assign MUX_blueDMA_s_config_readSlave_out$enq_1__VAL_6 =
	     { v__h401883, 2'd0 } ;
  assign MUX_blueDMA_s_config_readSlave_out$enq_1__VAL_7 =
	     { v__h402026, 2'd0 } ;
  assign MUX_blueDMA_s_config_readSlave_out$enq_1__VAL_8 =
	     { v__h402170, 2'd0 } ;
  assign MUX_blueDMA_s_config_readSlave_out$enq_1__VAL_9 =
	     { v__h402314, 2'd0 } ;
  assign MUX_blueDMA_s_config_readSlave_out$enq_1__VAL_10 =
	     { v__h402457, 2'd0 } ;
  assign MUX_blueDMA_s_config_readSlave_out$enq_1__VAL_11 =
	     { v__h402601, 2'd0 } ;
  assign MUX_blueDMA_s_config_readSlave_out$enq_1__VAL_12 =
	     { v__h402745, 2'd0 } ;
  assign MUX_blueDMA_writeChannel_byteAlignerFrom_buffer$port0__write_1__VAL_1 =
	     { 512'd0,
	       blueDMA_writeChannel_byteAlignerFrom_buffer[1023:512] } ;
  assign MUX_blueDMA_writeChannel_byteAlignerFrom_bytes_in$write_1__VAL_1 =
	     blueDMA_writeChannel_byteAlignerFrom_bytes_in + 32'd64 ;
  assign MUX_blueDMA_writeChannel_byteAlignerFrom_bytes_left_in_buffer$port0__write_1__VAL_1 =
	     blueDMA_writeChannel_byteAlignerFrom_bytes_left_in_buffer -
	     blueDMA_writeChannel_byteAlignerFrom_bytes_out_needed ;
  assign MUX_blueDMA_writeChannel_byteAlignerFrom_bytes_out$write_1__VAL_1 =
	     blueDMA_writeChannel_byteAlignerFrom_bytes_out + b__h80998 ;
  assign MUX_blueDMA_writeChannel_byteAlignerFrom_bytes_out$write_1__VAL_2 =
	     blueDMA_writeChannel_byteAlignerFrom_bytes_out + 32'd512 ;
  assign MUX_blueDMA_writeChannel_byteAlignerFrom_bytes_out_needed$write_1__VAL_1 =
	     7'd64 - b__h106807 ;
  assign MUX_blueDMA_writeChannel_byteAlignerTo_buffer$port0__write_1__VAL_1 =
	     { 512'd0, blueDMA_writeChannel_byteAlignerTo_buffer[1023:512] } ;
  assign MUX_blueDMA_writeChannel_byteAlignerTo_bytes_in$write_1__VAL_1 =
	     blueDMA_writeChannel_byteAlignerTo_bytes_in + 32'd64 ;
  assign MUX_blueDMA_writeChannel_byteAlignerTo_bytes_left_in_buffer$port0__write_1__VAL_1 =
	     blueDMA_writeChannel_byteAlignerTo_bytes_left_in_buffer -
	     blueDMA_writeChannel_byteAlignerTo_bytes_out_needed ;
  assign MUX_blueDMA_writeChannel_byteAlignerTo_bytes_out$write_1__VAL_1 =
	     blueDMA_writeChannel_byteAlignerTo_bytes_out + b__h166757 ;
  assign MUX_blueDMA_writeChannel_byteAlignerTo_bytes_out$write_1__VAL_2 =
	     blueDMA_writeChannel_byteAlignerTo_bytes_out + 32'd512 ;
  assign MUX_blueDMA_writeChannel_byteAlignerTo_bytes_out_needed$write_1__VAL_1 =
	     7'd64 - b__h192552 ;
  assign MUX_blueDMA_writeChannel_fromMaster_task_data_output_reg$write_1__VAL_1 =
	     { blueDMA_writeChannel_fromMaster_task_data_output_reg[44:33],
	       x_transfers_total__h4305,
	       blueDMA_writeChannel_fromMaster_task_data_output_reg[6:0] } ;
  assign MUX_blueDMA_writeChannel_fromMaster_task_data_requests_reg$write_1__VAL_1 =
	     { blueDMA_writeChannel_fromMaster_task_data_requests_reg[112:95],
	       x_requests_total__h3970,
	       blueDMA_writeChannel_fromMaster_task_data_requests_reg[68:38],
	       x_address_dynamic__h3972,
	       12'd0,
	       blueDMA_writeChannel_fromMaster_task_data_requests_reg[4:1],
	       1'd0 } ;
  assign MUX_blueDMA_writeChannel_mimo_words_left$write_1__VAL_2 =
	     blueDMA_writeChannel_mimo_words_left - 26'd1 ;
  assign MUX_blueDMA_writeChannel_toMaster_beatsThisRequestCntr$write_1__VAL_1 =
	     blueDMA_writeChannel_toMaster_beatsThisRequest_ETC___d391 ?
	       8'd0 :
	       beatsThisRequestCntrT__h9013 ;
  assign MUX_blueDMA_writeChannel_toMaster_outstanding_writes$write_1__VAL_1 =
	     blueDMA_writeChannel_toMaster_outstanding_writes + 8'd1 ;
  assign MUX_blueDMA_writeChannel_toMaster_outstanding_writes$write_1__VAL_2 =
	     blueDMA_writeChannel_toMaster_outstanding_writes - 8'd1 ;
  assign MUX_blueDMA_writeChannel_toMaster_task_data_output_reg$write_1__VAL_1 =
	     { blueDMA_writeChannel_toMaster_task_data_output_reg[44:33],
	       x_transfers_total__h20045,
	       blueDMA_writeChannel_toMaster_task_data_output_reg[6:1],
	       1'd0 } ;
  assign MUX_blueDMA_writeChannel_toMaster_task_data_requests_reg$write_1__VAL_1 =
	     { blueDMA_writeChannel_toMaster_task_data_requests_reg[112:95],
	       x_requests_total__h8745,
	       blueDMA_writeChannel_toMaster_task_data_requests_reg[68:38],
	       x_address_dynamic__h8747,
	       12'd0,
	       blueDMA_writeChannel_toMaster_task_data_requests_reg[4:1],
	       1'd0 } ;

  // inlined wires
  always@(blueDMA_writeChannel_fromMaster_master_rd_in$D_OUT)
  begin
    case (blueDMA_writeChannel_fromMaster_master_rd_in$D_OUT[14:11])
      4'd0, 4'd1, 4'd2, 4'd3, 4'd10, 4'd14, 4'd15:
	  blueDMA_writeChannel_fromMaster_master_rd_warcache$wget =
	      blueDMA_writeChannel_fromMaster_master_rd_in$D_OUT[14:11];
      default: blueDMA_writeChannel_fromMaster_master_rd_warcache$wget =
		   4'd11;
    endcase
  end
  always@(blueDMA_writeChannel_toMaster_master_wr_in_addr$D_OUT)
  begin
    case (blueDMA_writeChannel_toMaster_master_wr_in_addr$D_OUT[14:11])
      4'd0, 4'd1, 4'd2, 4'd3, 4'd6, 4'd7, 4'd14:
	  blueDMA_writeChannel_toMaster_master_wr_wawcache$wget =
	      blueDMA_writeChannel_toMaster_master_wr_in_addr$D_OUT[14:11];
      default: blueDMA_writeChannel_toMaster_master_wr_wawcache$wget = 4'd15;
    endcase
  end
  always@(blueDMA_readChannel_fromMaster_master_rd_in$D_OUT)
  begin
    case (blueDMA_readChannel_fromMaster_master_rd_in$D_OUT[14:11])
      4'd0, 4'd1, 4'd2, 4'd3, 4'd10, 4'd14, 4'd15:
	  blueDMA_readChannel_fromMaster_master_rd_warcache$wget =
	      blueDMA_readChannel_fromMaster_master_rd_in$D_OUT[14:11];
      default: blueDMA_readChannel_fromMaster_master_rd_warcache$wget = 4'd11;
    endcase
  end
  always@(blueDMA_readChannel_toMaster_master_wr_in_addr$D_OUT)
  begin
    case (blueDMA_readChannel_toMaster_master_wr_in_addr$D_OUT[14:11])
      4'd0, 4'd1, 4'd2, 4'd3, 4'd6, 4'd7, 4'd14:
	  blueDMA_readChannel_toMaster_master_wr_wawcache$wget =
	      blueDMA_readChannel_toMaster_master_wr_in_addr$D_OUT[14:11];
      default: blueDMA_readChannel_toMaster_master_wr_wawcache$wget = 4'd15;
    endcase
  end
  assign blueDMA_s_config_readIsHandled$whas =
	     WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_11 ||
	     WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_10 ||
	     WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_9 ||
	     WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_8 ||
	     WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_7 ||
	     WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_6 ||
	     WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_5 ||
	     WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_4 ||
	     WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_3 ||
	     WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_2 ||
	     WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_1 ||
	     WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled ;
  assign blueDMA_s_config_writeIsHandled$whas =
	     WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecialIsHandled_5 ||
	     WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecialIsHandled_4 ||
	     WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecialIsHandled_3 ||
	     WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecialIsHandled_2 ||
	     WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecialIsHandled_1 ||
	     WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecialIsHandled ;
  assign blueDMA_writeChannel_fromMaster_master_rd_rinpkg$wget =
	     { m64_axi_rid, m64_axi_rdata, m64_axi_rresp, m64_axi_rlast } ;
  assign blueDMA_writeChannel_toMaster_master_wr_rinpkg$wget =
	     { m32_axi_bid, m32_axi_bresp } ;
  assign blueDMA_readChannel_fromMaster_master_rd_rinpkg$wget =
	     { m32_axi_rid, m32_axi_rdata, m32_axi_rresp, m32_axi_rlast } ;
  assign blueDMA_readChannel_toMaster_master_wr_rinpkg$wget =
	     { m64_axi_bid, m64_axi_bresp } ;
  assign blueDMA_writeChannel_byteAlignerFrom_buffer$EN_port0__write =
	     WILL_FIRE_RL_blueDMA_writeChannel_byteAlignerFrom_forwardOutput ||
	     blueDMA_writeChannel_byteAlignerFrom_addr_ff$dEMPTY_N ;
  assign blueDMA_writeChannel_byteAlignerFrom_buffer$port0__write_1 =
	     WILL_FIRE_RL_blueDMA_writeChannel_byteAlignerFrom_forwardOutput ?
	       MUX_blueDMA_writeChannel_byteAlignerFrom_buffer$port0__write_1__VAL_1 :
	       1024'd0 ;
  assign blueDMA_writeChannel_byteAlignerFrom_buffer$port1__read =
	     blueDMA_writeChannel_byteAlignerFrom_buffer$EN_port0__write ?
	       blueDMA_writeChannel_byteAlignerFrom_buffer$port0__write_1 :
	       blueDMA_writeChannel_byteAlignerFrom_buffer ;
  assign blueDMA_writeChannel_byteAlignerFrom_buffer$port1__write_1 =
	     { blueDMA_writeChannel_byteAlignerFrom_buffer$port1__read[1023:512],
	       blueDMA_writeChannel_byteAlignerFrom_incoming$D_OUT } ;
  assign blueDMA_writeChannel_byteAlignerFrom_buffer$port2__read =
	     WILL_FIRE_RL_blueDMA_writeChannel_byteAlignerFrom_fetchNewData ?
	       blueDMA_writeChannel_byteAlignerFrom_buffer$port1__write_1 :
	       blueDMA_writeChannel_byteAlignerFrom_buffer$port1__read ;
  assign blueDMA_writeChannel_byteAlignerFrom_bytes_left_in_buffer$EN_port0__write =
	     WILL_FIRE_RL_blueDMA_writeChannel_byteAlignerFrom_forwardOutput ||
	     blueDMA_writeChannel_byteAlignerFrom_addr_ff$dEMPTY_N ;
  assign blueDMA_writeChannel_byteAlignerFrom_bytes_left_in_buffer$port0__write_1 =
	     WILL_FIRE_RL_blueDMA_writeChannel_byteAlignerFrom_forwardOutput ?
	       MUX_blueDMA_writeChannel_byteAlignerFrom_bytes_left_in_buffer$port0__write_1__VAL_1 :
	       7'd0 ;
  assign blueDMA_writeChannel_byteAlignerFrom_bytes_left_in_buffer$port1__write_1 =
	     b__h49635 + 7'd64 ;
  assign blueDMA_writeChannel_byteAlignerFrom_bytes_left_in_buffer$port2__read =
	     WILL_FIRE_RL_blueDMA_writeChannel_byteAlignerFrom_fetchNewData ?
	       blueDMA_writeChannel_byteAlignerFrom_bytes_left_in_buffer$port1__write_1 :
	       b__h49635 ;
  assign blueDMA_writeChannel_byteAlignerFrom_fetchedDatum$EN_port0__write =
	     blueDMA_writeChannel_byteAlignerFrom_addr_ff$dEMPTY_N ||
	     !blueDMA_writeChannel_byteAlignerFrom_addr_ff$dEMPTY_N &&
	     blueDMA_writeChannel_byteAlignerFrom_fetchedDatum &&
	     blueDMA_writeChannel_byteAlignerFrom_bytes_lef_ETC___d765 ||
	     WILL_FIRE_RL_blueDMA_writeChannel_byteAlignerFrom_forwardOutput ;
  assign blueDMA_writeChannel_byteAlignerFrom_fetchedDatum$port1__read =
	     !blueDMA_writeChannel_byteAlignerFrom_fetchedDatum$EN_port0__write &&
	     blueDMA_writeChannel_byteAlignerFrom_fetchedDatum ;
  assign blueDMA_writeChannel_byteAlignerFrom_fetchedDatum$port2__read =
	     WILL_FIRE_RL_blueDMA_writeChannel_byteAlignerFrom_fetchNewData ||
	     blueDMA_writeChannel_byteAlignerFrom_fetchedDatum$port1__read ;
  assign blueDMA_writeChannel_byteAlignerTo_buffer$EN_port0__write =
	     WILL_FIRE_RL_blueDMA_writeChannel_byteAlignerTo_forwardOutput ||
	     blueDMA_writeChannel_byteAlignerTo_addr_ff$dEMPTY_N ;
  assign blueDMA_writeChannel_byteAlignerTo_buffer$port0__write_1 =
	     WILL_FIRE_RL_blueDMA_writeChannel_byteAlignerTo_forwardOutput ?
	       MUX_blueDMA_writeChannel_byteAlignerTo_buffer$port0__write_1__VAL_1 :
	       1024'd0 ;
  assign blueDMA_writeChannel_byteAlignerTo_buffer$port1__read =
	     blueDMA_writeChannel_byteAlignerTo_buffer$EN_port0__write ?
	       blueDMA_writeChannel_byteAlignerTo_buffer$port0__write_1 :
	       blueDMA_writeChannel_byteAlignerTo_buffer ;
  assign blueDMA_writeChannel_byteAlignerTo_buffer$port1__write_1 =
	     { blueDMA_writeChannel_byteAlignerTo_buffer$port1__read[1023:512],
	       blueDMA_writeChannel_byteAlignerTo_incoming$D_OUT } ;
  assign blueDMA_writeChannel_byteAlignerTo_buffer$port2__read =
	     WILL_FIRE_RL_blueDMA_writeChannel_byteAlignerTo_fetchNewData ?
	       blueDMA_writeChannel_byteAlignerTo_buffer$port1__write_1 :
	       blueDMA_writeChannel_byteAlignerTo_buffer$port1__read ;
  assign blueDMA_writeChannel_byteAlignerTo_bytes_left_in_buffer$EN_port0__write =
	     WILL_FIRE_RL_blueDMA_writeChannel_byteAlignerTo_forwardOutput ||
	     blueDMA_writeChannel_byteAlignerTo_addr_ff$dEMPTY_N ;
  assign blueDMA_writeChannel_byteAlignerTo_bytes_left_in_buffer$port0__write_1 =
	     WILL_FIRE_RL_blueDMA_writeChannel_byteAlignerTo_forwardOutput ?
	       MUX_blueDMA_writeChannel_byteAlignerTo_bytes_left_in_buffer$port0__write_1__VAL_1 :
	       7'd0 ;
  assign blueDMA_writeChannel_byteAlignerTo_bytes_left_in_buffer$port1__write_1 =
	     b__h135394 + 7'd64 ;
  assign blueDMA_writeChannel_byteAlignerTo_bytes_left_in_buffer$port2__read =
	     WILL_FIRE_RL_blueDMA_writeChannel_byteAlignerTo_fetchNewData ?
	       blueDMA_writeChannel_byteAlignerTo_bytes_left_in_buffer$port1__write_1 :
	       b__h135394 ;
  assign blueDMA_writeChannel_byteAlignerTo_fetchedDatum$EN_port0__write =
	     blueDMA_writeChannel_byteAlignerTo_addr_ff$dEMPTY_N ||
	     !blueDMA_writeChannel_byteAlignerTo_addr_ff$dEMPTY_N &&
	     blueDMA_writeChannel_byteAlignerTo_fetchedDatum &&
	     blueDMA_writeChannel_byteAlignerTo_bytes_left__ETC___d822 ||
	     WILL_FIRE_RL_blueDMA_writeChannel_byteAlignerTo_forwardOutput ;
  assign blueDMA_writeChannel_byteAlignerTo_fetchedDatum$port1__read =
	     !blueDMA_writeChannel_byteAlignerTo_fetchedDatum$EN_port0__write &&
	     blueDMA_writeChannel_byteAlignerTo_fetchedDatum ;
  assign blueDMA_writeChannel_byteAlignerTo_fetchedDatum$port2__read =
	     WILL_FIRE_RL_blueDMA_writeChannel_byteAlignerTo_fetchNewData ||
	     blueDMA_writeChannel_byteAlignerTo_fetchedDatum$port1__read ;
  assign blueDMA_readChannel_byteAlignerFrom_buffer$EN_port0__write =
	     WILL_FIRE_RL_blueDMA_readChannel_byteAlignerFrom_forwardOutput ||
	     blueDMA_readChannel_byteAlignerFrom_addr_ff$dEMPTY_N ;
  assign blueDMA_readChannel_byteAlignerFrom_buffer$port0__write_1 =
	     WILL_FIRE_RL_blueDMA_readChannel_byteAlignerFrom_forwardOutput ?
	       MUX_blueDMA_readChannel_byteAlignerFrom_buffer$port0__write_1__VAL_1 :
	       1024'd0 ;
  assign blueDMA_readChannel_byteAlignerFrom_buffer$port1__read =
	     blueDMA_readChannel_byteAlignerFrom_buffer$EN_port0__write ?
	       blueDMA_readChannel_byteAlignerFrom_buffer$port0__write_1 :
	       blueDMA_readChannel_byteAlignerFrom_buffer ;
  assign blueDMA_readChannel_byteAlignerFrom_buffer$port1__write_1 =
	     { blueDMA_readChannel_byteAlignerFrom_buffer$port1__read[1023:512],
	       blueDMA_readChannel_byteAlignerFrom_incoming$D_OUT } ;
  assign blueDMA_readChannel_byteAlignerFrom_buffer$port2__read =
	     WILL_FIRE_RL_blueDMA_readChannel_byteAlignerFrom_fetchNewData ?
	       blueDMA_readChannel_byteAlignerFrom_buffer$port1__write_1 :
	       blueDMA_readChannel_byteAlignerFrom_buffer$port1__read ;
  assign blueDMA_readChannel_byteAlignerFrom_bytes_left_in_buffer$EN_port0__write =
	     WILL_FIRE_RL_blueDMA_readChannel_byteAlignerFrom_forwardOutput ||
	     blueDMA_readChannel_byteAlignerFrom_addr_ff$dEMPTY_N ;
  assign blueDMA_readChannel_byteAlignerFrom_bytes_left_in_buffer$port0__write_1 =
	     WILL_FIRE_RL_blueDMA_readChannel_byteAlignerFrom_forwardOutput ?
	       MUX_blueDMA_readChannel_byteAlignerFrom_bytes_left_in_buffer$port0__write_1__VAL_1 :
	       7'd0 ;
  assign blueDMA_readChannel_byteAlignerFrom_bytes_left_in_buffer$port1__write_1 =
	     b__h243683 + 7'd64 ;
  assign blueDMA_readChannel_byteAlignerFrom_bytes_left_in_buffer$port2__read =
	     WILL_FIRE_RL_blueDMA_readChannel_byteAlignerFrom_fetchNewData ?
	       blueDMA_readChannel_byteAlignerFrom_bytes_left_in_buffer$port1__write_1 :
	       b__h243683 ;
  assign blueDMA_readChannel_byteAlignerFrom_fetchedDatum$EN_port0__write =
	     blueDMA_readChannel_byteAlignerFrom_addr_ff$dEMPTY_N ||
	     !blueDMA_readChannel_byteAlignerFrom_addr_ff$dEMPTY_N &&
	     blueDMA_readChannel_byteAlignerFrom_fetchedDatum &&
	     blueDMA_readChannel_byteAlignerFrom_bytes_left_ETC___d1678 ||
	     WILL_FIRE_RL_blueDMA_readChannel_byteAlignerFrom_forwardOutput ;
  assign blueDMA_readChannel_byteAlignerFrom_fetchedDatum$port1__read =
	     !blueDMA_readChannel_byteAlignerFrom_fetchedDatum$EN_port0__write &&
	     blueDMA_readChannel_byteAlignerFrom_fetchedDatum ;
  assign blueDMA_readChannel_byteAlignerFrom_fetchedDatum$port2__read =
	     WILL_FIRE_RL_blueDMA_readChannel_byteAlignerFrom_fetchNewData ||
	     blueDMA_readChannel_byteAlignerFrom_fetchedDatum$port1__read ;
  assign blueDMA_readChannel_byteAlignerTo_buffer$EN_port0__write =
	     WILL_FIRE_RL_blueDMA_readChannel_byteAlignerTo_forwardOutput ||
	     blueDMA_readChannel_byteAlignerTo_addr_ff$dEMPTY_N ;
  assign blueDMA_readChannel_byteAlignerTo_buffer$port0__write_1 =
	     WILL_FIRE_RL_blueDMA_readChannel_byteAlignerTo_forwardOutput ?
	       MUX_blueDMA_readChannel_byteAlignerTo_buffer$port0__write_1__VAL_1 :
	       1024'd0 ;
  assign blueDMA_readChannel_byteAlignerTo_buffer$port1__read =
	     blueDMA_readChannel_byteAlignerTo_buffer$EN_port0__write ?
	       blueDMA_readChannel_byteAlignerTo_buffer$port0__write_1 :
	       blueDMA_readChannel_byteAlignerTo_buffer ;
  assign blueDMA_readChannel_byteAlignerTo_buffer$port1__write_1 =
	     { blueDMA_readChannel_byteAlignerTo_buffer$port1__read[1023:512],
	       blueDMA_readChannel_byteAlignerTo_incoming$D_OUT } ;
  assign blueDMA_readChannel_byteAlignerTo_buffer$port2__read =
	     WILL_FIRE_RL_blueDMA_readChannel_byteAlignerTo_fetchNewData ?
	       blueDMA_readChannel_byteAlignerTo_buffer$port1__write_1 :
	       blueDMA_readChannel_byteAlignerTo_buffer$port1__read ;
  assign blueDMA_readChannel_byteAlignerTo_bytes_left_in_buffer$EN_port0__write =
	     WILL_FIRE_RL_blueDMA_readChannel_byteAlignerTo_forwardOutput ||
	     blueDMA_readChannel_byteAlignerTo_addr_ff$dEMPTY_N ;
  assign blueDMA_readChannel_byteAlignerTo_bytes_left_in_buffer$port0__write_1 =
	     WILL_FIRE_RL_blueDMA_readChannel_byteAlignerTo_forwardOutput ?
	       MUX_blueDMA_readChannel_byteAlignerTo_bytes_left_in_buffer$port0__write_1__VAL_1 :
	       7'd0 ;
  assign blueDMA_readChannel_byteAlignerTo_bytes_left_in_buffer$port1__write_1 =
	     b__h329442 + 7'd64 ;
  assign blueDMA_readChannel_byteAlignerTo_bytes_left_in_buffer$port2__read =
	     WILL_FIRE_RL_blueDMA_readChannel_byteAlignerTo_fetchNewData ?
	       blueDMA_readChannel_byteAlignerTo_bytes_left_in_buffer$port1__write_1 :
	       b__h329442 ;
  assign blueDMA_readChannel_byteAlignerTo_fetchedDatum$EN_port0__write =
	     blueDMA_readChannel_byteAlignerTo_addr_ff$dEMPTY_N ||
	     !blueDMA_readChannel_byteAlignerTo_addr_ff$dEMPTY_N &&
	     blueDMA_readChannel_byteAlignerTo_fetchedDatum &&
	     blueDMA_readChannel_byteAlignerTo_bytes_left_i_ETC___d1735 ||
	     WILL_FIRE_RL_blueDMA_readChannel_byteAlignerTo_forwardOutput ;
  assign blueDMA_readChannel_byteAlignerTo_fetchedDatum$port1__read =
	     !blueDMA_readChannel_byteAlignerTo_fetchedDatum$EN_port0__write &&
	     blueDMA_readChannel_byteAlignerTo_fetchedDatum ;
  assign blueDMA_readChannel_byteAlignerTo_fetchedDatum$port2__read =
	     WILL_FIRE_RL_blueDMA_readChannel_byteAlignerTo_fetchNewData ||
	     blueDMA_readChannel_byteAlignerTo_fetchedDatum$port1__read ;
  assign blueDMA_s_config_writeSlave_addrIn_rv$EN_port0__write =
	     !blueDMA_s_config_writeSlave_addrIn_rv[67] && S_AXI_awvalid ;
  assign blueDMA_s_config_writeSlave_addrIn_rv$port0__write_1 =
	     { 1'd1, S_AXI_awaddr, S_AXI_awprot } ;
  assign blueDMA_s_config_writeSlave_addrIn_rv$port1__read =
	     blueDMA_s_config_writeSlave_addrIn_rv$EN_port0__write ?
	       blueDMA_s_config_writeSlave_addrIn_rv$port0__write_1 :
	       blueDMA_s_config_writeSlave_addrIn_rv ;
  assign blueDMA_s_config_writeSlave_addrIn_rv$EN_port1__write =
	     blueDMA_s_config_writeSlave_addrIn_rv$port1__read[67] &&
	     blueDMA_s_config_writeSlave_dataIn_rv$port1__read[72] &&
	     blueDMA_s_config_writeSlave_in$FULL_N ;
  assign blueDMA_s_config_writeSlave_addrIn_rv$port2__read =
	     blueDMA_s_config_writeSlave_addrIn_rv$EN_port1__write ?
	       68'h2AAAAAAAAAAAAAAAA :
	       blueDMA_s_config_writeSlave_addrIn_rv$port1__read ;
  assign blueDMA_s_config_writeSlave_dataIn_rv$EN_port0__write =
	     !blueDMA_s_config_writeSlave_dataIn_rv[72] && S_AXI_wvalid ;
  assign blueDMA_s_config_writeSlave_dataIn_rv$port0__write_1 =
	     { 1'd1, S_AXI_wdata, S_AXI_wstrb } ;
  assign blueDMA_s_config_writeSlave_dataIn_rv$port1__read =
	     blueDMA_s_config_writeSlave_dataIn_rv$EN_port0__write ?
	       blueDMA_s_config_writeSlave_dataIn_rv$port0__write_1 :
	       blueDMA_s_config_writeSlave_dataIn_rv ;
  assign blueDMA_s_config_writeSlave_dataIn_rv$EN_port1__write =
	     blueDMA_s_config_writeSlave_addrIn_rv$port1__read[67] &&
	     blueDMA_s_config_writeSlave_dataIn_rv$port1__read[72] &&
	     blueDMA_s_config_writeSlave_in$FULL_N ;
  assign blueDMA_s_config_writeSlave_dataIn_rv$port2__read =
	     blueDMA_s_config_writeSlave_dataIn_rv$EN_port1__write ?
	       73'h0AAAAAAAAAAAAAAAAAA :
	       blueDMA_s_config_writeSlave_dataIn_rv$port1__read ;

  // register blueDMA_fpga_addr
  assign blueDMA_fpga_addr$D_IN =
	     { blueDMA_s_config_writeSlave_in$D_OUT[10] ?
		 blueDMA_s_config_writeSlave_in$D_OUT[74:67] :
		 blueDMA_fpga_addr[63:56],
	       blueDMA_s_config_writeSlave_in$D_OUT[9] ?
		 blueDMA_s_config_writeSlave_in$D_OUT[66:59] :
		 blueDMA_fpga_addr[55:48],
	       blueDMA_s_config_writeSlave_in$D_OUT[8] ?
		 blueDMA_s_config_writeSlave_in$D_OUT[58:51] :
		 blueDMA_fpga_addr[47:40],
	       blueDMA_s_config_writeSlave_in$D_OUT[7] ?
		 blueDMA_s_config_writeSlave_in$D_OUT[50:43] :
		 blueDMA_fpga_addr[39:32],
	       blueDMA_s_config_writeSlave_in$D_OUT[6] ?
		 blueDMA_s_config_writeSlave_in$D_OUT[42:35] :
		 blueDMA_fpga_addr[31:24],
	       blueDMA_s_config_writeSlave_in$D_OUT[5] ?
		 blueDMA_s_config_writeSlave_in$D_OUT[34:27] :
		 blueDMA_fpga_addr[23:16],
	       blueDMA_s_config_writeSlave_in$D_OUT[4] ?
		 blueDMA_s_config_writeSlave_in$D_OUT[26:19] :
		 blueDMA_fpga_addr[15:8],
	       blueDMA_s_config_writeSlave_in$D_OUT[3] ?
		 blueDMA_s_config_writeSlave_in$D_OUT[18:11] :
		 blueDMA_fpga_addr[7:0] } ;
  assign blueDMA_fpga_addr$EN =
	     WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_2 ;

  // register blueDMA_host_addr
  assign blueDMA_host_addr$D_IN =
	     { blueDMA_s_config_writeSlave_in$D_OUT[10] ?
		 blueDMA_s_config_writeSlave_in$D_OUT[74:67] :
		 blueDMA_host_addr[63:56],
	       blueDMA_s_config_writeSlave_in$D_OUT[9] ?
		 blueDMA_s_config_writeSlave_in$D_OUT[66:59] :
		 blueDMA_host_addr[55:48],
	       blueDMA_s_config_writeSlave_in$D_OUT[8] ?
		 blueDMA_s_config_writeSlave_in$D_OUT[58:51] :
		 blueDMA_host_addr[47:40],
	       blueDMA_s_config_writeSlave_in$D_OUT[7] ?
		 blueDMA_s_config_writeSlave_in$D_OUT[50:43] :
		 blueDMA_host_addr[39:32],
	       blueDMA_s_config_writeSlave_in$D_OUT[6] ?
		 blueDMA_s_config_writeSlave_in$D_OUT[42:35] :
		 blueDMA_host_addr[31:24],
	       blueDMA_s_config_writeSlave_in$D_OUT[5] ?
		 blueDMA_s_config_writeSlave_in$D_OUT[34:27] :
		 blueDMA_host_addr[23:16],
	       blueDMA_s_config_writeSlave_in$D_OUT[4] ?
		 blueDMA_s_config_writeSlave_in$D_OUT[26:19] :
		 blueDMA_host_addr[15:8],
	       blueDMA_s_config_writeSlave_in$D_OUT[3] ?
		 blueDMA_s_config_writeSlave_in$D_OUT[18:11] :
		 blueDMA_host_addr[7:0] } ;
  assign blueDMA_host_addr$EN =
	     WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_1 ;

  // register blueDMA_id
  assign blueDMA_id$D_IN = 64'h0 ;
  assign blueDMA_id$EN = 1'b0 ;

  // register blueDMA_readChannel_byteAlignerFrom_buffer
  assign blueDMA_readChannel_byteAlignerFrom_buffer$D_IN =
	     blueDMA_readChannel_byteAlignerFrom_buffer$port2__read ;
  assign blueDMA_readChannel_byteAlignerFrom_buffer$EN = 1'b1 ;

  // register blueDMA_readChannel_byteAlignerFrom_bytes_in
  assign blueDMA_readChannel_byteAlignerFrom_bytes_in$D_IN =
	     WILL_FIRE_RL_blueDMA_readChannel_byteAlignerFrom_fetchNewData ?
	       MUX_blueDMA_readChannel_byteAlignerFrom_bytes_in$write_1__VAL_1 :
	       32'd0 ;
  assign blueDMA_readChannel_byteAlignerFrom_bytes_in$EN =
	     WILL_FIRE_RL_blueDMA_readChannel_byteAlignerFrom_fetchNewData ||
	     blueDMA_readChannel_byteAlignerFrom_addr_ff$dEMPTY_N ;

  // register blueDMA_readChannel_byteAlignerFrom_bytes_left_in_buffer
  assign blueDMA_readChannel_byteAlignerFrom_bytes_left_in_buffer$D_IN =
	     blueDMA_readChannel_byteAlignerFrom_bytes_left_in_buffer$port2__read ;
  assign blueDMA_readChannel_byteAlignerFrom_bytes_left_in_buffer$EN = 1'b1 ;

  // register blueDMA_readChannel_byteAlignerFrom_bytes_out
  always@(WILL_FIRE_RL_blueDMA_readChannel_byteAlignerFrom_forwardOutput or
	  MUX_blueDMA_readChannel_byteAlignerFrom_bytes_out$write_1__VAL_1 or
	  WILL_FIRE_RL_blueDMA_readChannel_byteAlignerFrom_forwardOutputLast or
	  MUX_blueDMA_readChannel_byteAlignerFrom_bytes_out$write_1__VAL_2 or
	  blueDMA_readChannel_byteAlignerFrom_addr_ff$dEMPTY_N)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_blueDMA_readChannel_byteAlignerFrom_forwardOutput:
	  blueDMA_readChannel_byteAlignerFrom_bytes_out$D_IN =
	      MUX_blueDMA_readChannel_byteAlignerFrom_bytes_out$write_1__VAL_1;
      WILL_FIRE_RL_blueDMA_readChannel_byteAlignerFrom_forwardOutputLast:
	  blueDMA_readChannel_byteAlignerFrom_bytes_out$D_IN =
	      MUX_blueDMA_readChannel_byteAlignerFrom_bytes_out$write_1__VAL_2;
      blueDMA_readChannel_byteAlignerFrom_addr_ff$dEMPTY_N:
	  blueDMA_readChannel_byteAlignerFrom_bytes_out$D_IN = 32'd0;
      default: blueDMA_readChannel_byteAlignerFrom_bytes_out$D_IN =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign blueDMA_readChannel_byteAlignerFrom_bytes_out$EN =
	     WILL_FIRE_RL_blueDMA_readChannel_byteAlignerFrom_forwardOutput ||
	     WILL_FIRE_RL_blueDMA_readChannel_byteAlignerFrom_forwardOutputLast ||
	     blueDMA_readChannel_byteAlignerFrom_addr_ff$dEMPTY_N ;

  // register blueDMA_readChannel_byteAlignerFrom_bytes_out_needed
  assign blueDMA_readChannel_byteAlignerFrom_bytes_out_needed$D_IN =
	     blueDMA_readChannel_byteAlignerFrom_addr_ff$dEMPTY_N ?
	       MUX_blueDMA_readChannel_byteAlignerFrom_bytes_out_needed$write_1__VAL_1 :
	       7'd64 ;
  assign blueDMA_readChannel_byteAlignerFrom_bytes_out_needed$EN =
	     blueDMA_readChannel_byteAlignerFrom_addr_ff$dEMPTY_N ||
	     WILL_FIRE_RL_blueDMA_readChannel_byteAlignerFrom_forwardOutput ;

  // register blueDMA_readChannel_byteAlignerFrom_bytes_total
  assign blueDMA_readChannel_byteAlignerFrom_bytes_total$D_IN =
	     blueDMA_readChannel_byteAlignerFrom_addr_ff$dD_OUT[31:0] ;
  assign blueDMA_readChannel_byteAlignerFrom_bytes_total$EN =
	     blueDMA_readChannel_byteAlignerFrom_addr_ff$dEMPTY_N ;

  // register blueDMA_readChannel_byteAlignerFrom_fetchedDatum
  assign blueDMA_readChannel_byteAlignerFrom_fetchedDatum$D_IN =
	     blueDMA_readChannel_byteAlignerFrom_fetchedDatum$port2__read ;
  assign blueDMA_readChannel_byteAlignerFrom_fetchedDatum$EN = 1'b1 ;

  // register blueDMA_readChannel_byteAlignerTo_buffer
  assign blueDMA_readChannel_byteAlignerTo_buffer$D_IN =
	     blueDMA_readChannel_byteAlignerTo_buffer$port2__read ;
  assign blueDMA_readChannel_byteAlignerTo_buffer$EN = 1'b1 ;

  // register blueDMA_readChannel_byteAlignerTo_bytes_in
  assign blueDMA_readChannel_byteAlignerTo_bytes_in$D_IN =
	     WILL_FIRE_RL_blueDMA_readChannel_byteAlignerTo_fetchNewData ?
	       MUX_blueDMA_readChannel_byteAlignerTo_bytes_in$write_1__VAL_1 :
	       32'd0 ;
  assign blueDMA_readChannel_byteAlignerTo_bytes_in$EN =
	     WILL_FIRE_RL_blueDMA_readChannel_byteAlignerTo_fetchNewData ||
	     blueDMA_readChannel_byteAlignerTo_addr_ff$dEMPTY_N ;

  // register blueDMA_readChannel_byteAlignerTo_bytes_left_in_buffer
  assign blueDMA_readChannel_byteAlignerTo_bytes_left_in_buffer$D_IN =
	     blueDMA_readChannel_byteAlignerTo_bytes_left_in_buffer$port2__read ;
  assign blueDMA_readChannel_byteAlignerTo_bytes_left_in_buffer$EN = 1'b1 ;

  // register blueDMA_readChannel_byteAlignerTo_bytes_out
  always@(WILL_FIRE_RL_blueDMA_readChannel_byteAlignerTo_forwardOutput or
	  MUX_blueDMA_readChannel_byteAlignerTo_bytes_out$write_1__VAL_1 or
	  WILL_FIRE_RL_blueDMA_readChannel_byteAlignerTo_forwardOutputLast or
	  MUX_blueDMA_readChannel_byteAlignerTo_bytes_out$write_1__VAL_2 or
	  blueDMA_readChannel_byteAlignerTo_addr_ff$dEMPTY_N)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_blueDMA_readChannel_byteAlignerTo_forwardOutput:
	  blueDMA_readChannel_byteAlignerTo_bytes_out$D_IN =
	      MUX_blueDMA_readChannel_byteAlignerTo_bytes_out$write_1__VAL_1;
      WILL_FIRE_RL_blueDMA_readChannel_byteAlignerTo_forwardOutputLast:
	  blueDMA_readChannel_byteAlignerTo_bytes_out$D_IN =
	      MUX_blueDMA_readChannel_byteAlignerTo_bytes_out$write_1__VAL_2;
      blueDMA_readChannel_byteAlignerTo_addr_ff$dEMPTY_N:
	  blueDMA_readChannel_byteAlignerTo_bytes_out$D_IN = 32'd0;
      default: blueDMA_readChannel_byteAlignerTo_bytes_out$D_IN =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign blueDMA_readChannel_byteAlignerTo_bytes_out$EN =
	     WILL_FIRE_RL_blueDMA_readChannel_byteAlignerTo_forwardOutput ||
	     WILL_FIRE_RL_blueDMA_readChannel_byteAlignerTo_forwardOutputLast ||
	     blueDMA_readChannel_byteAlignerTo_addr_ff$dEMPTY_N ;

  // register blueDMA_readChannel_byteAlignerTo_bytes_out_needed
  assign blueDMA_readChannel_byteAlignerTo_bytes_out_needed$D_IN =
	     blueDMA_readChannel_byteAlignerTo_addr_ff$dEMPTY_N ?
	       MUX_blueDMA_readChannel_byteAlignerTo_bytes_out_needed$write_1__VAL_1 :
	       7'd64 ;
  assign blueDMA_readChannel_byteAlignerTo_bytes_out_needed$EN =
	     blueDMA_readChannel_byteAlignerTo_addr_ff$dEMPTY_N ||
	     WILL_FIRE_RL_blueDMA_readChannel_byteAlignerTo_forwardOutput ;

  // register blueDMA_readChannel_byteAlignerTo_bytes_total
  assign blueDMA_readChannel_byteAlignerTo_bytes_total$D_IN =
	     blueDMA_readChannel_byteAlignerTo_addr_ff$dD_OUT[31:0] ;
  assign blueDMA_readChannel_byteAlignerTo_bytes_total$EN =
	     blueDMA_readChannel_byteAlignerTo_addr_ff$dEMPTY_N ;

  // register blueDMA_readChannel_byteAlignerTo_fetchedDatum
  assign blueDMA_readChannel_byteAlignerTo_fetchedDatum$D_IN =
	     blueDMA_readChannel_byteAlignerTo_fetchedDatum$port2__read ;
  assign blueDMA_readChannel_byteAlignerTo_fetchedDatum$EN = 1'b1 ;

  // register blueDMA_readChannel_cycleCounter
  assign blueDMA_readChannel_cycleCounter$D_IN =
	     blueDMA_readChannel_cycleCounter + 32'd1 ;
  assign blueDMA_readChannel_cycleCounter$EN = 1'd1 ;

  // register blueDMA_readChannel_doneInterruptReg
  assign blueDMA_readChannel_doneInterruptReg$D_IN =
	     WILL_FIRE_RL_blueDMA_readChannel_setInterrupt ;
  assign blueDMA_readChannel_doneInterruptReg$EN = 1'd1 ;

  // register blueDMA_readChannel_fromLastCycle
  assign blueDMA_readChannel_fromLastCycle$D_IN =
	     blueDMA_readChannel_fromMaster_task_data_output_reg[32:7] !=
	     26'd0 ||
	     blueDMA_readChannel_fromMaster_task_data_requests_reg[94:69] !=
	     26'd0 ;
  assign blueDMA_readChannel_fromLastCycle$EN =
	     blueDMA_readChannel_fromDone$sFULL_N ;

  // register blueDMA_readChannel_fromMaster_task_data_output_reg
  assign blueDMA_readChannel_fromMaster_task_data_output_reg$D_IN =
	     WILL_FIRE_RL_blueDMA_readChannel_fromMaster_forwardData ?
	       MUX_blueDMA_readChannel_fromMaster_task_data_output_reg$write_1__VAL_1 :
	       blueDMA_readChannel_fromMaster_reqGen_outgoingBuffer$D_OUT[44:0] ;
  assign blueDMA_readChannel_fromMaster_task_data_output_reg$EN =
	     WILL_FIRE_RL_blueDMA_readChannel_fromMaster_forwardData ||
	     WILL_FIRE_RL_blueDMA_readChannel_fromMaster_fillBuffer ;

  // register blueDMA_readChannel_fromMaster_task_data_requests_reg
  assign blueDMA_readChannel_fromMaster_task_data_requests_reg$D_IN =
	     WILL_FIRE_RL_blueDMA_readChannel_fromMaster_placeRequest ?
	       MUX_blueDMA_readChannel_fromMaster_task_data_requests_reg$write_1__VAL_1 :
	       blueDMA_readChannel_fromMaster_reqGen_outgoingBuffer$D_OUT[157:45] ;
  assign blueDMA_readChannel_fromMaster_task_data_requests_reg$EN =
	     WILL_FIRE_RL_blueDMA_readChannel_fromMaster_placeRequest ||
	     WILL_FIRE_RL_blueDMA_readChannel_fromMaster_fillBuffer ;

  // register blueDMA_readChannel_mimo_words_left
  assign blueDMA_readChannel_mimo_words_left$D_IN =
	     blueDMA_readChannel_mimoConv_ff$dEMPTY_N ?
	       IF_blueDMA_readChannel_mimoConv_ff_first__644__ETC___d1650[25:0] :
	       MUX_blueDMA_readChannel_mimo_words_left$write_1__VAL_2 ;
  assign blueDMA_readChannel_mimo_words_left$EN =
	     blueDMA_readChannel_mimoConv_ff$dEMPTY_N ||
	     blueDMA_readChannel_mimo_impl$EMPTY_N &&
	     blueDMA_readChannel_toMaster_incomingBuffer$FULL_N ;

  // register blueDMA_readChannel_opInProgress
  assign blueDMA_readChannel_opInProgress$D_IN =
	     !WILL_FIRE_RL_blueDMA_readChannel_setInterrupt ;
  assign blueDMA_readChannel_opInProgress$EN =
	     WILL_FIRE_RL_blueDMA_readChannel_setInterrupt ||
	     WILL_FIRE_RL_blueDMA_readChannel_handleCommand ;

  // register blueDMA_readChannel_perf_cycleCounterCur
  assign blueDMA_readChannel_perf_cycleCounterCur$D_IN =
	     blueDMA_readChannel_cycleCounter -
	     blueDMA_readChannel_perf_cycleCounterCurStart ;
  assign blueDMA_readChannel_perf_cycleCounterCur$EN =
	     WILL_FIRE_RL_blueDMA_readChannel_setInterrupt ;

  // register blueDMA_readChannel_perf_cycleCounterCurStart
  assign blueDMA_readChannel_perf_cycleCounterCurStart$D_IN =
	     blueDMA_readChannel_cycleCounter ;
  assign blueDMA_readChannel_perf_cycleCounterCurStart$EN =
	     WILL_FIRE_RL_blueDMA_readChannel_handleCommand ;

  // register blueDMA_readChannel_perf_cycleCounterInterval
  assign blueDMA_readChannel_perf_cycleCounterInterval$D_IN =
	     blueDMA_readChannel_cycleCounter -
	     blueDMA_readChannel_perf_cycleCounterIntervalStart ;
  assign blueDMA_readChannel_perf_cycleCounterInterval$EN =
	     WILL_FIRE_RL_blueDMA_readChannel_setInterrupt &&
	     blueDMA_readChannel_perf_intervalCounter_777_E_ETC___d1822 ;

  // register blueDMA_readChannel_perf_cycleCounterIntervalStart
  assign blueDMA_readChannel_perf_cycleCounterIntervalStart$D_IN =
	     blueDMA_readChannel_cycleCounter ;
  assign blueDMA_readChannel_perf_cycleCounterIntervalStart$EN =
	     WILL_FIRE_RL_blueDMA_readChannel_handleCommand &&
	     blueDMA_readChannel_perf_intervalCounter == 12'd0 ;

  // register blueDMA_readChannel_perf_intervalCounter
  assign blueDMA_readChannel_perf_intervalCounter$D_IN =
	     blueDMA_readChannel_perf_intervalCounter_777_E_ETC___d1822 ?
	       12'd0 :
	       blueDMA_readChannel_perf_intervalCounter + 12'd1 ;
  assign blueDMA_readChannel_perf_intervalCounter$EN =
	     WILL_FIRE_RL_blueDMA_readChannel_setInterrupt ;

  // register blueDMA_readChannel_perf_intervalSet
  assign blueDMA_readChannel_perf_intervalSet$D_IN =
	     blueDMA_s_config_writeSlave_in$D_OUT[22:11] ;
  assign blueDMA_readChannel_perf_intervalSet$EN =
	     WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_4 ;

  // register blueDMA_readChannel_toLastCycle
  assign blueDMA_readChannel_toLastCycle$D_IN =
	     blueDMA_readChannel_toMaster_task_data_output_reg[32:7] !=
	     26'd0 ||
	     blueDMA_readChannel_toMaster_task_data_requests_reg[94:69] !=
	     26'd0 ||
	     blueDMA_readChannel_toMaster_outstanding_writes != 8'd0 ;
  assign blueDMA_readChannel_toLastCycle$EN =
	     blueDMA_readChannel_toDone$sFULL_N ;

  // register blueDMA_readChannel_toMaster_beatsThisRequestCntr
  assign blueDMA_readChannel_toMaster_beatsThisRequestCntr$D_IN =
	     WILL_FIRE_RL_blueDMA_readChannel_toMaster_forwardData ?
	       MUX_blueDMA_readChannel_toMaster_beatsThisRequestCntr$write_1__VAL_1 :
	       8'd0 ;
  assign blueDMA_readChannel_toMaster_beatsThisRequestCntr$EN =
	     WILL_FIRE_RL_blueDMA_readChannel_toMaster_forwardData ||
	     WILL_FIRE_RL_blueDMA_readChannel_toMaster_fillBuffer ;

  // register blueDMA_readChannel_toMaster_outstanding_writes
  assign blueDMA_readChannel_toMaster_outstanding_writes$D_IN =
	     WILL_FIRE_RL_blueDMA_readChannel_toMaster_placeRequest ?
	       MUX_blueDMA_readChannel_toMaster_outstanding_writes$write_1__VAL_1 :
	       MUX_blueDMA_readChannel_toMaster_outstanding_writes$write_1__VAL_2 ;
  assign blueDMA_readChannel_toMaster_outstanding_writes$EN =
	     WILL_FIRE_RL_blueDMA_readChannel_toMaster_placeRequest ||
	     blueDMA_readChannel_toMaster_master_wr_out$EMPTY_N &&
	     !WILL_FIRE_RL_blueDMA_readChannel_toMaster_placeRequest ;

  // register blueDMA_readChannel_toMaster_task_data_output_reg
  assign blueDMA_readChannel_toMaster_task_data_output_reg$D_IN =
	     WILL_FIRE_RL_blueDMA_readChannel_toMaster_forwardData ?
	       MUX_blueDMA_readChannel_toMaster_task_data_output_reg$write_1__VAL_1 :
	       blueDMA_readChannel_toMaster_reqGen_outgoingBuffer$D_OUT[44:0] ;
  assign blueDMA_readChannel_toMaster_task_data_output_reg$EN =
	     WILL_FIRE_RL_blueDMA_readChannel_toMaster_forwardData ||
	     WILL_FIRE_RL_blueDMA_readChannel_toMaster_fillBuffer ;

  // register blueDMA_readChannel_toMaster_task_data_requests_reg
  assign blueDMA_readChannel_toMaster_task_data_requests_reg$D_IN =
	     WILL_FIRE_RL_blueDMA_readChannel_toMaster_placeRequest ?
	       MUX_blueDMA_readChannel_toMaster_task_data_requests_reg$write_1__VAL_1 :
	       blueDMA_readChannel_toMaster_reqGen_outgoingBuffer$D_OUT[157:45] ;
  assign blueDMA_readChannel_toMaster_task_data_requests_reg$EN =
	     WILL_FIRE_RL_blueDMA_readChannel_toMaster_placeRequest ||
	     WILL_FIRE_RL_blueDMA_readChannel_toMaster_fillBuffer ;

  // register blueDMA_readChannel_total_requests_reg
  assign blueDMA_readChannel_total_requests_reg$D_IN =
	     blueDMA_readChannel_total_requests_reg + 32'd1 ;
  assign blueDMA_readChannel_total_requests_reg$EN =
	     WILL_FIRE_RL_blueDMA_readChannel_handleCommand ;

  // register blueDMA_s_config_readBusy
  assign blueDMA_s_config_readBusy$D_IN = 1'b0 ;
  assign blueDMA_s_config_readBusy$EN = 1'b0 ;

  // register blueDMA_s_config_writeBusy
  assign blueDMA_s_config_writeBusy$D_IN = 1'b0 ;
  assign blueDMA_s_config_writeBusy$EN = 1'b0 ;

  // register blueDMA_s_config_writeSlave_addrIn_rv
  assign blueDMA_s_config_writeSlave_addrIn_rv$D_IN =
	     blueDMA_s_config_writeSlave_addrIn_rv$port2__read ;
  assign blueDMA_s_config_writeSlave_addrIn_rv$EN = 1'b1 ;

  // register blueDMA_s_config_writeSlave_dataIn_rv
  assign blueDMA_s_config_writeSlave_dataIn_rv$D_IN =
	     blueDMA_s_config_writeSlave_dataIn_rv$port2__read ;
  assign blueDMA_s_config_writeSlave_dataIn_rv$EN = 1'b1 ;

  // register blueDMA_transfer_length
  assign blueDMA_transfer_length$D_IN =
	     { blueDMA_s_config_writeSlave_in$D_OUT[10] ?
		 blueDMA_s_config_writeSlave_in$D_OUT[74:67] :
		 blueDMA_transfer_length[63:56],
	       blueDMA_s_config_writeSlave_in$D_OUT[9] ?
		 blueDMA_s_config_writeSlave_in$D_OUT[66:59] :
		 blueDMA_transfer_length[55:48],
	       blueDMA_s_config_writeSlave_in$D_OUT[8] ?
		 blueDMA_s_config_writeSlave_in$D_OUT[58:51] :
		 blueDMA_transfer_length[47:40],
	       blueDMA_s_config_writeSlave_in$D_OUT[7] ?
		 blueDMA_s_config_writeSlave_in$D_OUT[50:43] :
		 blueDMA_transfer_length[39:32],
	       blueDMA_s_config_writeSlave_in$D_OUT[6] ?
		 blueDMA_s_config_writeSlave_in$D_OUT[42:35] :
		 blueDMA_transfer_length[31:24],
	       blueDMA_s_config_writeSlave_in$D_OUT[5] ?
		 blueDMA_s_config_writeSlave_in$D_OUT[34:27] :
		 blueDMA_transfer_length[23:16],
	       blueDMA_s_config_writeSlave_in$D_OUT[4] ?
		 blueDMA_s_config_writeSlave_in$D_OUT[26:19] :
		 blueDMA_transfer_length[15:8],
	       blueDMA_s_config_writeSlave_in$D_OUT[3] ?
		 blueDMA_s_config_writeSlave_in$D_OUT[18:11] :
		 blueDMA_transfer_length[7:0] } ;
  assign blueDMA_transfer_length$EN =
	     WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_3 ;

  // register blueDMA_writeChannel_byteAlignerFrom_buffer
  assign blueDMA_writeChannel_byteAlignerFrom_buffer$D_IN =
	     blueDMA_writeChannel_byteAlignerFrom_buffer$port2__read ;
  assign blueDMA_writeChannel_byteAlignerFrom_buffer$EN = 1'b1 ;

  // register blueDMA_writeChannel_byteAlignerFrom_bytes_in
  assign blueDMA_writeChannel_byteAlignerFrom_bytes_in$D_IN =
	     WILL_FIRE_RL_blueDMA_writeChannel_byteAlignerFrom_fetchNewData ?
	       MUX_blueDMA_writeChannel_byteAlignerFrom_bytes_in$write_1__VAL_1 :
	       32'd0 ;
  assign blueDMA_writeChannel_byteAlignerFrom_bytes_in$EN =
	     WILL_FIRE_RL_blueDMA_writeChannel_byteAlignerFrom_fetchNewData ||
	     blueDMA_writeChannel_byteAlignerFrom_addr_ff$dEMPTY_N ;

  // register blueDMA_writeChannel_byteAlignerFrom_bytes_left_in_buffer
  assign blueDMA_writeChannel_byteAlignerFrom_bytes_left_in_buffer$D_IN =
	     blueDMA_writeChannel_byteAlignerFrom_bytes_left_in_buffer$port2__read ;
  assign blueDMA_writeChannel_byteAlignerFrom_bytes_left_in_buffer$EN = 1'b1 ;

  // register blueDMA_writeChannel_byteAlignerFrom_bytes_out
  always@(WILL_FIRE_RL_blueDMA_writeChannel_byteAlignerFrom_forwardOutput or
	  MUX_blueDMA_writeChannel_byteAlignerFrom_bytes_out$write_1__VAL_1 or
	  WILL_FIRE_RL_blueDMA_writeChannel_byteAlignerFrom_forwardOutputLast or
	  MUX_blueDMA_writeChannel_byteAlignerFrom_bytes_out$write_1__VAL_2 or
	  blueDMA_writeChannel_byteAlignerFrom_addr_ff$dEMPTY_N)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_blueDMA_writeChannel_byteAlignerFrom_forwardOutput:
	  blueDMA_writeChannel_byteAlignerFrom_bytes_out$D_IN =
	      MUX_blueDMA_writeChannel_byteAlignerFrom_bytes_out$write_1__VAL_1;
      WILL_FIRE_RL_blueDMA_writeChannel_byteAlignerFrom_forwardOutputLast:
	  blueDMA_writeChannel_byteAlignerFrom_bytes_out$D_IN =
	      MUX_blueDMA_writeChannel_byteAlignerFrom_bytes_out$write_1__VAL_2;
      blueDMA_writeChannel_byteAlignerFrom_addr_ff$dEMPTY_N:
	  blueDMA_writeChannel_byteAlignerFrom_bytes_out$D_IN = 32'd0;
      default: blueDMA_writeChannel_byteAlignerFrom_bytes_out$D_IN =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign blueDMA_writeChannel_byteAlignerFrom_bytes_out$EN =
	     WILL_FIRE_RL_blueDMA_writeChannel_byteAlignerFrom_forwardOutput ||
	     WILL_FIRE_RL_blueDMA_writeChannel_byteAlignerFrom_forwardOutputLast ||
	     blueDMA_writeChannel_byteAlignerFrom_addr_ff$dEMPTY_N ;

  // register blueDMA_writeChannel_byteAlignerFrom_bytes_out_needed
  assign blueDMA_writeChannel_byteAlignerFrom_bytes_out_needed$D_IN =
	     blueDMA_writeChannel_byteAlignerFrom_addr_ff$dEMPTY_N ?
	       MUX_blueDMA_writeChannel_byteAlignerFrom_bytes_out_needed$write_1__VAL_1 :
	       7'd64 ;
  assign blueDMA_writeChannel_byteAlignerFrom_bytes_out_needed$EN =
	     blueDMA_writeChannel_byteAlignerFrom_addr_ff$dEMPTY_N ||
	     WILL_FIRE_RL_blueDMA_writeChannel_byteAlignerFrom_forwardOutput ;

  // register blueDMA_writeChannel_byteAlignerFrom_bytes_total
  assign blueDMA_writeChannel_byteAlignerFrom_bytes_total$D_IN =
	     blueDMA_writeChannel_byteAlignerFrom_addr_ff$dD_OUT[31:0] ;
  assign blueDMA_writeChannel_byteAlignerFrom_bytes_total$EN =
	     blueDMA_writeChannel_byteAlignerFrom_addr_ff$dEMPTY_N ;

  // register blueDMA_writeChannel_byteAlignerFrom_fetchedDatum
  assign blueDMA_writeChannel_byteAlignerFrom_fetchedDatum$D_IN =
	     blueDMA_writeChannel_byteAlignerFrom_fetchedDatum$port2__read ;
  assign blueDMA_writeChannel_byteAlignerFrom_fetchedDatum$EN = 1'b1 ;

  // register blueDMA_writeChannel_byteAlignerTo_buffer
  assign blueDMA_writeChannel_byteAlignerTo_buffer$D_IN =
	     blueDMA_writeChannel_byteAlignerTo_buffer$port2__read ;
  assign blueDMA_writeChannel_byteAlignerTo_buffer$EN = 1'b1 ;

  // register blueDMA_writeChannel_byteAlignerTo_bytes_in
  assign blueDMA_writeChannel_byteAlignerTo_bytes_in$D_IN =
	     WILL_FIRE_RL_blueDMA_writeChannel_byteAlignerTo_fetchNewData ?
	       MUX_blueDMA_writeChannel_byteAlignerTo_bytes_in$write_1__VAL_1 :
	       32'd0 ;
  assign blueDMA_writeChannel_byteAlignerTo_bytes_in$EN =
	     WILL_FIRE_RL_blueDMA_writeChannel_byteAlignerTo_fetchNewData ||
	     blueDMA_writeChannel_byteAlignerTo_addr_ff$dEMPTY_N ;

  // register blueDMA_writeChannel_byteAlignerTo_bytes_left_in_buffer
  assign blueDMA_writeChannel_byteAlignerTo_bytes_left_in_buffer$D_IN =
	     blueDMA_writeChannel_byteAlignerTo_bytes_left_in_buffer$port2__read ;
  assign blueDMA_writeChannel_byteAlignerTo_bytes_left_in_buffer$EN = 1'b1 ;

  // register blueDMA_writeChannel_byteAlignerTo_bytes_out
  always@(WILL_FIRE_RL_blueDMA_writeChannel_byteAlignerTo_forwardOutput or
	  MUX_blueDMA_writeChannel_byteAlignerTo_bytes_out$write_1__VAL_1 or
	  WILL_FIRE_RL_blueDMA_writeChannel_byteAlignerTo_forwardOutputLast or
	  MUX_blueDMA_writeChannel_byteAlignerTo_bytes_out$write_1__VAL_2 or
	  blueDMA_writeChannel_byteAlignerTo_addr_ff$dEMPTY_N)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_blueDMA_writeChannel_byteAlignerTo_forwardOutput:
	  blueDMA_writeChannel_byteAlignerTo_bytes_out$D_IN =
	      MUX_blueDMA_writeChannel_byteAlignerTo_bytes_out$write_1__VAL_1;
      WILL_FIRE_RL_blueDMA_writeChannel_byteAlignerTo_forwardOutputLast:
	  blueDMA_writeChannel_byteAlignerTo_bytes_out$D_IN =
	      MUX_blueDMA_writeChannel_byteAlignerTo_bytes_out$write_1__VAL_2;
      blueDMA_writeChannel_byteAlignerTo_addr_ff$dEMPTY_N:
	  blueDMA_writeChannel_byteAlignerTo_bytes_out$D_IN = 32'd0;
      default: blueDMA_writeChannel_byteAlignerTo_bytes_out$D_IN =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign blueDMA_writeChannel_byteAlignerTo_bytes_out$EN =
	     WILL_FIRE_RL_blueDMA_writeChannel_byteAlignerTo_forwardOutput ||
	     WILL_FIRE_RL_blueDMA_writeChannel_byteAlignerTo_forwardOutputLast ||
	     blueDMA_writeChannel_byteAlignerTo_addr_ff$dEMPTY_N ;

  // register blueDMA_writeChannel_byteAlignerTo_bytes_out_needed
  assign blueDMA_writeChannel_byteAlignerTo_bytes_out_needed$D_IN =
	     blueDMA_writeChannel_byteAlignerTo_addr_ff$dEMPTY_N ?
	       MUX_blueDMA_writeChannel_byteAlignerTo_bytes_out_needed$write_1__VAL_1 :
	       7'd64 ;
  assign blueDMA_writeChannel_byteAlignerTo_bytes_out_needed$EN =
	     blueDMA_writeChannel_byteAlignerTo_addr_ff$dEMPTY_N ||
	     WILL_FIRE_RL_blueDMA_writeChannel_byteAlignerTo_forwardOutput ;

  // register blueDMA_writeChannel_byteAlignerTo_bytes_total
  assign blueDMA_writeChannel_byteAlignerTo_bytes_total$D_IN =
	     blueDMA_writeChannel_byteAlignerTo_addr_ff$dD_OUT[31:0] ;
  assign blueDMA_writeChannel_byteAlignerTo_bytes_total$EN =
	     blueDMA_writeChannel_byteAlignerTo_addr_ff$dEMPTY_N ;

  // register blueDMA_writeChannel_byteAlignerTo_fetchedDatum
  assign blueDMA_writeChannel_byteAlignerTo_fetchedDatum$D_IN =
	     blueDMA_writeChannel_byteAlignerTo_fetchedDatum$port2__read ;
  assign blueDMA_writeChannel_byteAlignerTo_fetchedDatum$EN = 1'b1 ;

  // register blueDMA_writeChannel_cycleCounter
  assign blueDMA_writeChannel_cycleCounter$D_IN =
	     blueDMA_writeChannel_cycleCounter + 32'd1 ;
  assign blueDMA_writeChannel_cycleCounter$EN = 1'd1 ;

  // register blueDMA_writeChannel_doneInterruptReg
  assign blueDMA_writeChannel_doneInterruptReg$D_IN =
	     WILL_FIRE_RL_blueDMA_writeChannel_setInterrupt ;
  assign blueDMA_writeChannel_doneInterruptReg$EN = 1'd1 ;

  // register blueDMA_writeChannel_fromLastCycle
  assign blueDMA_writeChannel_fromLastCycle$D_IN =
	     blueDMA_writeChannel_fromMaster_task_data_output_reg[32:7] !=
	     26'd0 ||
	     blueDMA_writeChannel_fromMaster_task_data_requests_reg[94:69] !=
	     26'd0 ;
  assign blueDMA_writeChannel_fromLastCycle$EN =
	     blueDMA_writeChannel_fromDone$sFULL_N ;

  // register blueDMA_writeChannel_fromMaster_task_data_output_reg
  assign blueDMA_writeChannel_fromMaster_task_data_output_reg$D_IN =
	     WILL_FIRE_RL_blueDMA_writeChannel_fromMaster_forwardData ?
	       MUX_blueDMA_writeChannel_fromMaster_task_data_output_reg$write_1__VAL_1 :
	       blueDMA_writeChannel_fromMaster_reqGen_outgoingBuffer$D_OUT[44:0] ;
  assign blueDMA_writeChannel_fromMaster_task_data_output_reg$EN =
	     WILL_FIRE_RL_blueDMA_writeChannel_fromMaster_forwardData ||
	     WILL_FIRE_RL_blueDMA_writeChannel_fromMaster_fillBuffer ;

  // register blueDMA_writeChannel_fromMaster_task_data_requests_reg
  assign blueDMA_writeChannel_fromMaster_task_data_requests_reg$D_IN =
	     WILL_FIRE_RL_blueDMA_writeChannel_fromMaster_placeRequest ?
	       MUX_blueDMA_writeChannel_fromMaster_task_data_requests_reg$write_1__VAL_1 :
	       blueDMA_writeChannel_fromMaster_reqGen_outgoingBuffer$D_OUT[157:45] ;
  assign blueDMA_writeChannel_fromMaster_task_data_requests_reg$EN =
	     WILL_FIRE_RL_blueDMA_writeChannel_fromMaster_placeRequest ||
	     WILL_FIRE_RL_blueDMA_writeChannel_fromMaster_fillBuffer ;

  // register blueDMA_writeChannel_mimo_words_left
  assign blueDMA_writeChannel_mimo_words_left$D_IN =
	     blueDMA_writeChannel_mimoConv_ff$dEMPTY_N ?
	       IF_blueDMA_writeChannel_mimoConv_ff_first__31__ETC___d737[25:0] :
	       MUX_blueDMA_writeChannel_mimo_words_left$write_1__VAL_2 ;
  assign blueDMA_writeChannel_mimo_words_left$EN =
	     blueDMA_writeChannel_mimoConv_ff$dEMPTY_N ||
	     blueDMA_writeChannel_mimo_impl$EMPTY_N &&
	     blueDMA_writeChannel_toMaster_incomingBuffer$FULL_N ;

  // register blueDMA_writeChannel_opInProgress
  assign blueDMA_writeChannel_opInProgress$D_IN =
	     !WILL_FIRE_RL_blueDMA_writeChannel_setInterrupt ;
  assign blueDMA_writeChannel_opInProgress$EN =
	     WILL_FIRE_RL_blueDMA_writeChannel_setInterrupt ||
	     WILL_FIRE_RL_blueDMA_writeChannel_handleCommand ;

  // register blueDMA_writeChannel_perf_cycleCounterCur
  assign blueDMA_writeChannel_perf_cycleCounterCur$D_IN =
	     blueDMA_writeChannel_cycleCounter -
	     blueDMA_writeChannel_perf_cycleCounterCurStart ;
  assign blueDMA_writeChannel_perf_cycleCounterCur$EN =
	     WILL_FIRE_RL_blueDMA_writeChannel_setInterrupt ;

  // register blueDMA_writeChannel_perf_cycleCounterCurStart
  assign blueDMA_writeChannel_perf_cycleCounterCurStart$D_IN =
	     blueDMA_writeChannel_cycleCounter ;
  assign blueDMA_writeChannel_perf_cycleCounterCurStart$EN =
	     WILL_FIRE_RL_blueDMA_writeChannel_handleCommand ;

  // register blueDMA_writeChannel_perf_cycleCounterInterval
  assign blueDMA_writeChannel_perf_cycleCounterInterval$D_IN =
	     blueDMA_writeChannel_cycleCounter -
	     blueDMA_writeChannel_perf_cycleCounterIntervalStart ;
  assign blueDMA_writeChannel_perf_cycleCounterInterval$EN =
	     WILL_FIRE_RL_blueDMA_writeChannel_setInterrupt &&
	     blueDMA_writeChannel_perf_intervalCounter_64_E_ETC___d909 ;

  // register blueDMA_writeChannel_perf_cycleCounterIntervalStart
  assign blueDMA_writeChannel_perf_cycleCounterIntervalStart$D_IN =
	     blueDMA_writeChannel_cycleCounter ;
  assign blueDMA_writeChannel_perf_cycleCounterIntervalStart$EN =
	     WILL_FIRE_RL_blueDMA_writeChannel_handleCommand &&
	     blueDMA_writeChannel_perf_intervalCounter == 12'd0 ;

  // register blueDMA_writeChannel_perf_intervalCounter
  assign blueDMA_writeChannel_perf_intervalCounter$D_IN =
	     blueDMA_writeChannel_perf_intervalCounter_64_E_ETC___d909 ?
	       12'd0 :
	       blueDMA_writeChannel_perf_intervalCounter + 12'd1 ;
  assign blueDMA_writeChannel_perf_intervalCounter$EN =
	     WILL_FIRE_RL_blueDMA_writeChannel_setInterrupt ;

  // register blueDMA_writeChannel_perf_intervalSet
  assign blueDMA_writeChannel_perf_intervalSet$D_IN =
	     blueDMA_s_config_writeSlave_in$D_OUT[22:11] ;
  assign blueDMA_writeChannel_perf_intervalSet$EN =
	     WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_5 ;

  // register blueDMA_writeChannel_toLastCycle
  assign blueDMA_writeChannel_toLastCycle$D_IN =
	     blueDMA_writeChannel_toMaster_task_data_output_reg[32:7] !=
	     26'd0 ||
	     blueDMA_writeChannel_toMaster_task_data_requests_reg[94:69] !=
	     26'd0 ||
	     blueDMA_writeChannel_toMaster_outstanding_writes != 8'd0 ;
  assign blueDMA_writeChannel_toLastCycle$EN =
	     blueDMA_writeChannel_toDone$sFULL_N ;

  // register blueDMA_writeChannel_toMaster_beatsThisRequestCntr
  assign blueDMA_writeChannel_toMaster_beatsThisRequestCntr$D_IN =
	     WILL_FIRE_RL_blueDMA_writeChannel_toMaster_forwardData ?
	       MUX_blueDMA_writeChannel_toMaster_beatsThisRequestCntr$write_1__VAL_1 :
	       8'd0 ;
  assign blueDMA_writeChannel_toMaster_beatsThisRequestCntr$EN =
	     WILL_FIRE_RL_blueDMA_writeChannel_toMaster_forwardData ||
	     WILL_FIRE_RL_blueDMA_writeChannel_toMaster_fillBuffer ;

  // register blueDMA_writeChannel_toMaster_outstanding_writes
  assign blueDMA_writeChannel_toMaster_outstanding_writes$D_IN =
	     WILL_FIRE_RL_blueDMA_writeChannel_toMaster_placeRequest ?
	       MUX_blueDMA_writeChannel_toMaster_outstanding_writes$write_1__VAL_1 :
	       MUX_blueDMA_writeChannel_toMaster_outstanding_writes$write_1__VAL_2 ;
  assign blueDMA_writeChannel_toMaster_outstanding_writes$EN =
	     WILL_FIRE_RL_blueDMA_writeChannel_toMaster_placeRequest ||
	     blueDMA_writeChannel_toMaster_master_wr_out$EMPTY_N &&
	     !WILL_FIRE_RL_blueDMA_writeChannel_toMaster_placeRequest ;

  // register blueDMA_writeChannel_toMaster_task_data_output_reg
  assign blueDMA_writeChannel_toMaster_task_data_output_reg$D_IN =
	     WILL_FIRE_RL_blueDMA_writeChannel_toMaster_forwardData ?
	       MUX_blueDMA_writeChannel_toMaster_task_data_output_reg$write_1__VAL_1 :
	       blueDMA_writeChannel_toMaster_reqGen_outgoingBuffer$D_OUT[44:0] ;
  assign blueDMA_writeChannel_toMaster_task_data_output_reg$EN =
	     WILL_FIRE_RL_blueDMA_writeChannel_toMaster_forwardData ||
	     WILL_FIRE_RL_blueDMA_writeChannel_toMaster_fillBuffer ;

  // register blueDMA_writeChannel_toMaster_task_data_requests_reg
  assign blueDMA_writeChannel_toMaster_task_data_requests_reg$D_IN =
	     WILL_FIRE_RL_blueDMA_writeChannel_toMaster_placeRequest ?
	       MUX_blueDMA_writeChannel_toMaster_task_data_requests_reg$write_1__VAL_1 :
	       blueDMA_writeChannel_toMaster_reqGen_outgoingBuffer$D_OUT[157:45] ;
  assign blueDMA_writeChannel_toMaster_task_data_requests_reg$EN =
	     WILL_FIRE_RL_blueDMA_writeChannel_toMaster_placeRequest ||
	     WILL_FIRE_RL_blueDMA_writeChannel_toMaster_fillBuffer ;

  // register blueDMA_writeChannel_total_requests_reg
  assign blueDMA_writeChannel_total_requests_reg$D_IN =
	     blueDMA_writeChannel_total_requests_reg + 32'd1 ;
  assign blueDMA_writeChannel_total_requests_reg$EN =
	     WILL_FIRE_RL_blueDMA_writeChannel_handleCommand ;

  // submodule blueDMA_cmdsIn
  assign blueDMA_cmdsIn$D_IN =
	     blueDMA_s_config_writeSlave_in$D_OUT[74:11] !=
	     64'h0000000010001000 ;
  assign blueDMA_cmdsIn$ENQ =
	     WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial &&
	     blueDMA_s_config_writeSlave_in$D_OUT[10:3] == 8'd255 &&
	     (blueDMA_s_config_writeSlave_in$D_OUT[74:11] ==
	      64'h0000000010001000 ||
	      blueDMA_s_config_writeSlave_in$D_OUT[74:11] ==
	      64'h0000000010000001) ;
  assign blueDMA_cmdsIn$DEQ =
	     blueDMA_cmdsIn$EMPTY_N && blueDMA_writeChannel_cmdIn$FULL_N &&
	     blueDMA_cmdsIn$D_OUT ||
	     blueDMA_cmdsIn$EMPTY_N && blueDMA_readChannel_cmdIn$FULL_N &&
	     !blueDMA_cmdsIn$D_OUT ;
  assign blueDMA_cmdsIn$CLR = 1'b0 ;

  // submodule blueDMA_readChannel_byteAlignerFrom_addr_ff
  assign blueDMA_readChannel_byteAlignerFrom_addr_ff$sD_IN = 160'h0 ;
  assign blueDMA_readChannel_byteAlignerFrom_addr_ff$sENQ = 1'b0 ;
  assign blueDMA_readChannel_byteAlignerFrom_addr_ff$dDEQ =
	     blueDMA_readChannel_byteAlignerFrom_addr_ff$dEMPTY_N ;

  // submodule blueDMA_readChannel_byteAlignerFrom_incoming
  assign blueDMA_readChannel_byteAlignerFrom_incoming$D_IN = 512'h0 ;
  assign blueDMA_readChannel_byteAlignerFrom_incoming$ENQ = 1'b0 ;
  assign blueDMA_readChannel_byteAlignerFrom_incoming$DEQ =
	     WILL_FIRE_RL_blueDMA_readChannel_byteAlignerFrom_fetchNewData ;
  assign blueDMA_readChannel_byteAlignerFrom_incoming$CLR = 1'b0 ;

  // submodule blueDMA_readChannel_byteAlignerFrom_outgoing
  assign blueDMA_readChannel_byteAlignerFrom_outgoing$D_IN =
	     blueDMA_readChannel_byteAlignerFrom_buffer[511:0] ;
  assign blueDMA_readChannel_byteAlignerFrom_outgoing$ENQ =
	     WILL_FIRE_RL_blueDMA_readChannel_byteAlignerFrom_forwardOutputLast ||
	     WILL_FIRE_RL_blueDMA_readChannel_byteAlignerFrom_forwardOutput ;
  assign blueDMA_readChannel_byteAlignerFrom_outgoing$DEQ = 1'b0 ;
  assign blueDMA_readChannel_byteAlignerFrom_outgoing$CLR = 1'b0 ;

  // submodule blueDMA_readChannel_byteAlignerTo_addr_ff
  assign blueDMA_readChannel_byteAlignerTo_addr_ff$sD_IN = 160'h0 ;
  assign blueDMA_readChannel_byteAlignerTo_addr_ff$sENQ = 1'b0 ;
  assign blueDMA_readChannel_byteAlignerTo_addr_ff$dDEQ =
	     blueDMA_readChannel_byteAlignerTo_addr_ff$dEMPTY_N ;

  // submodule blueDMA_readChannel_byteAlignerTo_incoming
  assign blueDMA_readChannel_byteAlignerTo_incoming$D_IN = 512'h0 ;
  assign blueDMA_readChannel_byteAlignerTo_incoming$ENQ = 1'b0 ;
  assign blueDMA_readChannel_byteAlignerTo_incoming$DEQ =
	     WILL_FIRE_RL_blueDMA_readChannel_byteAlignerTo_fetchNewData ;
  assign blueDMA_readChannel_byteAlignerTo_incoming$CLR = 1'b0 ;

  // submodule blueDMA_readChannel_byteAlignerTo_outgoing
  assign blueDMA_readChannel_byteAlignerTo_outgoing$D_IN =
	     blueDMA_readChannel_byteAlignerTo_buffer[511:0] ;
  assign blueDMA_readChannel_byteAlignerTo_outgoing$ENQ =
	     WILL_FIRE_RL_blueDMA_readChannel_byteAlignerTo_forwardOutputLast ||
	     WILL_FIRE_RL_blueDMA_readChannel_byteAlignerTo_forwardOutput ;
  assign blueDMA_readChannel_byteAlignerTo_outgoing$DEQ = 1'b0 ;
  assign blueDMA_readChannel_byteAlignerTo_outgoing$CLR = 1'b0 ;

  // submodule blueDMA_readChannel_clockConverter_fifo
  assign blueDMA_readChannel_clockConverter_fifo$sD_IN =
	     blueDMA_readChannel_fromMaster_outgoingBuffer$D_OUT ;
  assign blueDMA_readChannel_clockConverter_fifo$sENQ =
	     blueDMA_readChannel_clockConverter_fifo$sFULL_N &&
	     blueDMA_readChannel_fromMaster_outgoingBuffer$EMPTY_N ;
  assign blueDMA_readChannel_clockConverter_fifo$dDEQ =
	     blueDMA_readChannel_clockConverter_fifo$dEMPTY_N &&
	     blueDMA_readChannel_mimo_impl$FULL_N ;

  // submodule blueDMA_readChannel_cmdIn
  assign blueDMA_readChannel_cmdIn$D_IN =
	     { blueDMA_fpga_addr,
	       blueDMA_host_addr,
	       blueDMA_transfer_length[31:0] } ;
  assign blueDMA_readChannel_cmdIn$ENQ =
	     blueDMA_cmdsIn$EMPTY_N && blueDMA_readChannel_cmdIn$FULL_N &&
	     !blueDMA_cmdsIn$D_OUT ;
  assign blueDMA_readChannel_cmdIn$DEQ =
	     WILL_FIRE_RL_blueDMA_readChannel_handleCommand ;
  assign blueDMA_readChannel_cmdIn$CLR = 1'b0 ;

  // submodule blueDMA_readChannel_fromDone
  assign blueDMA_readChannel_fromDone$sD_IN = 1'd1 ;
  assign blueDMA_readChannel_fromDone$sENQ =
	     blueDMA_readChannel_fromDone$sFULL_N &&
	     blueDMA_readChannel_fromLastCycle &&
	     blueDMA_readChannel_fromMaster_task_data_output_reg[32:7] ==
	     26'd0 &&
	     blueDMA_readChannel_fromMaster_task_data_requests_reg[94:69] ==
	     26'd0 ;
  assign blueDMA_readChannel_fromDone$dDEQ =
	     WILL_FIRE_RL_blueDMA_readChannel_setInterrupt ;

  // submodule blueDMA_readChannel_fromMasterReq_ff
  assign blueDMA_readChannel_fromMasterReq_ff$sD_IN =
	     { blueDMA_readChannel_cmdIn$D_OUT[159:96],
	       blueDMA_readChannel_cmdIn$D_OUT[31:0],
	       4'd0 } ;
  assign blueDMA_readChannel_fromMasterReq_ff$sENQ =
	     WILL_FIRE_RL_blueDMA_readChannel_handleCommand ;
  assign blueDMA_readChannel_fromMasterReq_ff$dDEQ =
	     blueDMA_readChannel_fromMasterReq_ff$dEMPTY_N &&
	     blueDMA_readChannel_fromMaster_reqGen_incomingBuffer$FULL_N ;

  // submodule blueDMA_readChannel_fromMaster_master_rd_in
  assign blueDMA_readChannel_fromMaster_master_rd_in$D_IN =
	     { 1'd0,
	       blueDMA_readChannel_fromMaster_task_data_requests_reg[68:5],
	       _theResult_____2__h197885,
	       17'd102784,
	       blueDMA_readChannel_fromMaster_task_data_requests_reg[4:1] } ;
  assign blueDMA_readChannel_fromMaster_master_rd_in$ENQ =
	     WILL_FIRE_RL_blueDMA_readChannel_fromMaster_placeRequest ;
  assign blueDMA_readChannel_fromMaster_master_rd_in$DEQ =
	     blueDMA_readChannel_fromMaster_master_rd_in$EMPTY_N &&
	     m32_axi_arready ;
  assign blueDMA_readChannel_fromMaster_master_rd_in$CLR = 1'b0 ;

  // submodule blueDMA_readChannel_fromMaster_master_rd_out
  assign blueDMA_readChannel_fromMaster_master_rd_out$D_IN =
	     blueDMA_readChannel_fromMaster_master_rd_rinpkg$wget ;
  assign blueDMA_readChannel_fromMaster_master_rd_out$ENQ =
	     blueDMA_readChannel_fromMaster_master_rd_out$FULL_N &&
	     m32_axi_rvalid ;
  assign blueDMA_readChannel_fromMaster_master_rd_out$DEQ =
	     WILL_FIRE_RL_blueDMA_readChannel_fromMaster_forwardData ;
  assign blueDMA_readChannel_fromMaster_master_rd_out$CLR = 1'b0 ;

  // submodule blueDMA_readChannel_fromMaster_maxOutstandingFIFO
  assign blueDMA_readChannel_fromMaster_maxOutstandingFIFO$D_IN = 1'd1 ;
  assign blueDMA_readChannel_fromMaster_maxOutstandingFIFO$ENQ =
	     WILL_FIRE_RL_blueDMA_readChannel_fromMaster_placeRequest ;
  assign blueDMA_readChannel_fromMaster_maxOutstandingFIFO$DEQ =
	     WILL_FIRE_RL_blueDMA_readChannel_fromMaster_forwardData &&
	     blueDMA_readChannel_fromMaster_master_rd_out$D_OUT[0] ;
  assign blueDMA_readChannel_fromMaster_maxOutstandingFIFO$CLR = 1'b0 ;

  // submodule blueDMA_readChannel_fromMaster_outgoingBuffer
  assign blueDMA_readChannel_fromMaster_outgoingBuffer$D_IN =
	     blueDMA_readChannel_fromMaster_master_rd_out$D_OUT[514:3] ;
  assign blueDMA_readChannel_fromMaster_outgoingBuffer$ENQ =
	     WILL_FIRE_RL_blueDMA_readChannel_fromMaster_forwardData ;
  assign blueDMA_readChannel_fromMaster_outgoingBuffer$DEQ =
	     blueDMA_readChannel_clockConverter_fifo$sFULL_N &&
	     blueDMA_readChannel_fromMaster_outgoingBuffer$EMPTY_N ;
  assign blueDMA_readChannel_fromMaster_outgoingBuffer$CLR = 1'b0 ;

  // submodule blueDMA_readChannel_fromMaster_reqGen_incomingBuffer
  assign blueDMA_readChannel_fromMaster_reqGen_incomingBuffer$D_IN =
	     blueDMA_readChannel_fromMasterReq_ff$dD_OUT ;
  assign blueDMA_readChannel_fromMaster_reqGen_incomingBuffer$ENQ =
	     blueDMA_readChannel_fromMasterReq_ff$dEMPTY_N &&
	     blueDMA_readChannel_fromMaster_reqGen_incomingBuffer$FULL_N ;
  assign blueDMA_readChannel_fromMaster_reqGen_incomingBuffer$DEQ =
	     blueDMA_readChannel_fromMaster_reqGen_incomingBuffer$EMPTY_N &&
	     blueDMA_readChannel_fromMaster_reqGen_intermediateBuffer$FULL_N ;
  assign blueDMA_readChannel_fromMaster_reqGen_incomingBuffer$CLR = 1'b0 ;

  // submodule blueDMA_readChannel_fromMaster_reqGen_intermediateBuffer
  assign blueDMA_readChannel_fromMaster_reqGen_intermediateBuffer$D_IN =
	     { x__h195212[5:0],
	       blueDMA_readChannel_fromMaster_reqGen_incoming_ETC__q5[5:0],
	       blueDMA_readChannel_fromMaster_reqGen_incomingBuffer$D_OUT } ;
  assign blueDMA_readChannel_fromMaster_reqGen_intermediateBuffer$ENQ =
	     blueDMA_readChannel_fromMaster_reqGen_incomingBuffer$EMPTY_N &&
	     blueDMA_readChannel_fromMaster_reqGen_intermediateBuffer$FULL_N ;
  assign blueDMA_readChannel_fromMaster_reqGen_intermediateBuffer$DEQ =
	     blueDMA_readChannel_fromMaster_reqGen_intermediateBuffer$EMPTY_N &&
	     blueDMA_readChannel_fromMaster_reqGen_intermediateBuffer2$FULL_N ;
  assign blueDMA_readChannel_fromMaster_reqGen_intermediateBuffer$CLR = 1'b0 ;

  // submodule blueDMA_readChannel_fromMaster_reqGen_intermediateBuffer2
  assign blueDMA_readChannel_fromMaster_reqGen_intermediateBuffer2$D_IN =
	     { blueDMA_readChannel_fromMaster_reqGen_intermediateBuffer$D_OUT[111:100],
	       x__h195386[25:0],
	       blueDMA_readChannel_fromMaster_reqGen_intermediateBuffer$D_OUT[99:0] } ;
  assign blueDMA_readChannel_fromMaster_reqGen_intermediateBuffer2$ENQ =
	     blueDMA_readChannel_fromMaster_reqGen_intermediateBuffer$EMPTY_N &&
	     blueDMA_readChannel_fromMaster_reqGen_intermediateBuffer2$FULL_N ;
  assign blueDMA_readChannel_fromMaster_reqGen_intermediateBuffer2$DEQ =
	     blueDMA_readChannel_fromMaster_reqGen_intermediateBuffer2$EMPTY_N &&
	     blueDMA_readChannel_fromMaster_reqGen_intermediateBuffer3$FULL_N ;
  assign blueDMA_readChannel_fromMaster_reqGen_intermediateBuffer2$CLR =
	     1'b0 ;

  // submodule blueDMA_readChannel_fromMaster_reqGen_intermediateBuffer3
  assign blueDMA_readChannel_fromMaster_reqGen_intermediateBuffer3$D_IN =
	     { blueDMA_readChannel_fromMaster_reqGen_intermediateBuffer2$D_OUT,
	       requests_first__h195488 } ;
  assign blueDMA_readChannel_fromMaster_reqGen_intermediateBuffer3$ENQ =
	     blueDMA_readChannel_fromMaster_reqGen_intermediateBuffer2$EMPTY_N &&
	     blueDMA_readChannel_fromMaster_reqGen_intermediateBuffer3$FULL_N ;
  assign blueDMA_readChannel_fromMaster_reqGen_intermediateBuffer3$DEQ =
	     WILL_FIRE_RL_blueDMA_readChannel_fromMaster_reqGen_finishRequest ;
  assign blueDMA_readChannel_fromMaster_reqGen_intermediateBuffer3$CLR =
	     1'b0 ;

  // submodule blueDMA_readChannel_fromMaster_reqGen_outgoingBuffer
  assign blueDMA_readChannel_fromMaster_reqGen_outgoingBuffer$D_IN =
	     { blueDMA_readChannel_fromMaster_reqGen_intermediateBuffer3$D_OUT[8:0],
	       x__h195728,
	       request_data_requests_total__h195702,
	       blueDMA_readChannel_fromMaster_reqGen_intermediateBuffer3$D_OUT[108:45],
	       blueDMA_readChannel_fromMaster_reqGen_intermediateBuffer3$D_OUT[12:9],
	       1'd1,
	       blueDMA_readChannel_fromMaster_reqGen_intermediateBuffer3$D_OUT[146:109],
	       blueDMA_readChannel_fromMaster_reqGen_intermediateBuffer3$D_OUT[50:45],
	       1'd1 } ;
  assign blueDMA_readChannel_fromMaster_reqGen_outgoingBuffer$ENQ =
	     WILL_FIRE_RL_blueDMA_readChannel_fromMaster_reqGen_finishRequest ;
  assign blueDMA_readChannel_fromMaster_reqGen_outgoingBuffer$DEQ =
	     WILL_FIRE_RL_blueDMA_readChannel_fromMaster_fillBuffer ;
  assign blueDMA_readChannel_fromMaster_reqGen_outgoingBuffer$CLR = 1'b0 ;

  // submodule blueDMA_readChannel_mimoConv_ff
  assign blueDMA_readChannel_mimoConv_ff$sD_IN =
	     { blueDMA_readChannel_cmdIn$D_OUT[31:0],
	       blueDMA_readChannel_cmdIn$D_OUT[63:32] } ;
  assign blueDMA_readChannel_mimoConv_ff$sENQ =
	     WILL_FIRE_RL_blueDMA_readChannel_handleCommand ;
  assign blueDMA_readChannel_mimoConv_ff$dDEQ =
	     blueDMA_readChannel_mimoConv_ff$dEMPTY_N ;

  // submodule blueDMA_readChannel_mimo_impl
  assign blueDMA_readChannel_mimo_impl$D_IN =
	     blueDMA_readChannel_clockConverter_fifo$dD_OUT ;
  assign blueDMA_readChannel_mimo_impl$ENQ =
	     blueDMA_readChannel_clockConverter_fifo$dEMPTY_N &&
	     blueDMA_readChannel_mimo_impl$FULL_N ;
  assign blueDMA_readChannel_mimo_impl$DEQ =
	     MUX_blueDMA_readChannel_mimo_words_left$write_1__SEL_2 ;
  assign blueDMA_readChannel_mimo_impl$CLR = 1'b0 ;

  // submodule blueDMA_readChannel_toDone
  assign blueDMA_readChannel_toDone$sD_IN = 1'd1 ;
  assign blueDMA_readChannel_toDone$sENQ =
	     blueDMA_readChannel_toDone$sFULL_N &&
	     blueDMA_readChannel_toLastCycle &&
	     blueDMA_readChannel_toMaster_task_data_output_reg[32:7] ==
	     26'd0 &&
	     blueDMA_readChannel_toMaster_task_data_requests_reg[94:69] ==
	     26'd0 &&
	     blueDMA_readChannel_toMaster_outstanding_writes == 8'd0 ;
  assign blueDMA_readChannel_toDone$dDEQ =
	     WILL_FIRE_RL_blueDMA_readChannel_setInterrupt ;

  // submodule blueDMA_readChannel_toMasterReq_ff
  assign blueDMA_readChannel_toMasterReq_ff$sD_IN =
	     { blueDMA_readChannel_cmdIn$D_OUT[95:0], 4'd0 } ;
  assign blueDMA_readChannel_toMasterReq_ff$sENQ =
	     WILL_FIRE_RL_blueDMA_readChannel_handleCommand ;
  assign blueDMA_readChannel_toMasterReq_ff$dDEQ =
	     blueDMA_readChannel_toMasterReq_ff$dEMPTY_N &&
	     blueDMA_readChannel_toMaster_reqGen_incomingBuffer$FULL_N ;

  // submodule blueDMA_readChannel_toMaster_beatsPerRequestFIFO
  assign blueDMA_readChannel_toMaster_beatsPerRequestFIFO$D_IN =
	     _theResult_____3__h202628 ;
  assign blueDMA_readChannel_toMaster_beatsPerRequestFIFO$ENQ =
	     WILL_FIRE_RL_blueDMA_readChannel_toMaster_placeRequest ;
  assign blueDMA_readChannel_toMaster_beatsPerRequestFIFO$DEQ =
	     WILL_FIRE_RL_blueDMA_readChannel_toMaster_forwardData &&
	     blueDMA_readChannel_toMaster_beatsThisRequestC_ETC___d1304 ;
  assign blueDMA_readChannel_toMaster_beatsPerRequestFIFO$CLR = 1'b0 ;

  // submodule blueDMA_readChannel_toMaster_incomingBuffer
  assign blueDMA_readChannel_toMaster_incomingBuffer$D_IN =
	     blueDMA_readChannel_mimo_impl$D_OUT ;
  assign blueDMA_readChannel_toMaster_incomingBuffer$ENQ =
	     MUX_blueDMA_readChannel_mimo_words_left$write_1__SEL_2 ;
  assign blueDMA_readChannel_toMaster_incomingBuffer$DEQ =
	     WILL_FIRE_RL_blueDMA_readChannel_toMaster_forwardData ;
  assign blueDMA_readChannel_toMaster_incomingBuffer$CLR = 1'b0 ;

  // submodule blueDMA_readChannel_toMaster_master_wr_in_addr
  assign blueDMA_readChannel_toMaster_master_wr_in_addr$D_IN =
	     { 1'd0,
	       blueDMA_readChannel_toMaster_task_data_requests_reg[68:5],
	       _theResult_____3__h202628,
	       17'd102784,
	       blueDMA_readChannel_toMaster_task_data_requests_reg[4:1] } ;
  assign blueDMA_readChannel_toMaster_master_wr_in_addr$ENQ =
	     WILL_FIRE_RL_blueDMA_readChannel_toMaster_placeRequest ;
  assign blueDMA_readChannel_toMaster_master_wr_in_addr$DEQ =
	     blueDMA_readChannel_toMaster_master_wr_in_addr$EMPTY_N &&
	     m64_axi_awready ;
  assign blueDMA_readChannel_toMaster_master_wr_in_addr$CLR = 1'b0 ;

  // submodule blueDMA_readChannel_toMaster_master_wr_in_data
  assign blueDMA_readChannel_toMaster_master_wr_in_data$D_IN =
	     { blueDMA_readChannel_toMaster_incomingBuffer$D_OUT,
	       x_strb__h203175,
	       blueDMA_readChannel_toMaster_beatsThisRequestC_ETC___d1304 } ;
  assign blueDMA_readChannel_toMaster_master_wr_in_data$ENQ =
	     WILL_FIRE_RL_blueDMA_readChannel_toMaster_forwardData ;
  assign blueDMA_readChannel_toMaster_master_wr_in_data$DEQ =
	     blueDMA_readChannel_toMaster_master_wr_in_data$EMPTY_N &&
	     m64_axi_wready ;
  assign blueDMA_readChannel_toMaster_master_wr_in_data$CLR = 1'b0 ;

  // submodule blueDMA_readChannel_toMaster_master_wr_out
  assign blueDMA_readChannel_toMaster_master_wr_out$D_IN =
	     blueDMA_readChannel_toMaster_master_wr_rinpkg$wget ;
  assign blueDMA_readChannel_toMaster_master_wr_out$ENQ =
	     blueDMA_readChannel_toMaster_master_wr_out$FULL_N &&
	     m64_axi_bvalid ;
  assign blueDMA_readChannel_toMaster_master_wr_out$DEQ =
	     MUX_blueDMA_readChannel_toMaster_outstanding_writes$write_1__SEL_2 ;
  assign blueDMA_readChannel_toMaster_master_wr_out$CLR = 1'b0 ;

  // submodule blueDMA_readChannel_toMaster_reqGen_incomingBuffer
  assign blueDMA_readChannel_toMaster_reqGen_incomingBuffer$D_IN =
	     blueDMA_readChannel_toMasterReq_ff$dD_OUT ;
  assign blueDMA_readChannel_toMaster_reqGen_incomingBuffer$ENQ =
	     blueDMA_readChannel_toMasterReq_ff$dEMPTY_N &&
	     blueDMA_readChannel_toMaster_reqGen_incomingBuffer$FULL_N ;
  assign blueDMA_readChannel_toMaster_reqGen_incomingBuffer$DEQ =
	     blueDMA_readChannel_toMaster_reqGen_incomingBuffer$EMPTY_N &&
	     blueDMA_readChannel_toMaster_reqGen_intermediateBuffer$FULL_N ;
  assign blueDMA_readChannel_toMaster_reqGen_incomingBuffer$CLR = 1'b0 ;

  // submodule blueDMA_readChannel_toMaster_reqGen_intermediateBuffer
  assign blueDMA_readChannel_toMaster_reqGen_intermediateBuffer$D_IN =
	     { x__h199260[5:0],
	       blueDMA_readChannel_toMaster_reqGen_incomingBu_ETC__q6[5:0],
	       blueDMA_readChannel_toMaster_reqGen_incomingBuffer$D_OUT } ;
  assign blueDMA_readChannel_toMaster_reqGen_intermediateBuffer$ENQ =
	     blueDMA_readChannel_toMaster_reqGen_incomingBuffer$EMPTY_N &&
	     blueDMA_readChannel_toMaster_reqGen_intermediateBuffer$FULL_N ;
  assign blueDMA_readChannel_toMaster_reqGen_intermediateBuffer$DEQ =
	     blueDMA_readChannel_toMaster_reqGen_intermediateBuffer$EMPTY_N &&
	     blueDMA_readChannel_toMaster_reqGen_intermediateBuffer2$FULL_N ;
  assign blueDMA_readChannel_toMaster_reqGen_intermediateBuffer$CLR = 1'b0 ;

  // submodule blueDMA_readChannel_toMaster_reqGen_intermediateBuffer2
  assign blueDMA_readChannel_toMaster_reqGen_intermediateBuffer2$D_IN =
	     { blueDMA_readChannel_toMaster_reqGen_intermediateBuffer$D_OUT[111:100],
	       x__h199434[25:0],
	       blueDMA_readChannel_toMaster_reqGen_intermediateBuffer$D_OUT[99:0] } ;
  assign blueDMA_readChannel_toMaster_reqGen_intermediateBuffer2$ENQ =
	     blueDMA_readChannel_toMaster_reqGen_intermediateBuffer$EMPTY_N &&
	     blueDMA_readChannel_toMaster_reqGen_intermediateBuffer2$FULL_N ;
  assign blueDMA_readChannel_toMaster_reqGen_intermediateBuffer2$DEQ =
	     blueDMA_readChannel_toMaster_reqGen_intermediateBuffer2$EMPTY_N &&
	     blueDMA_readChannel_toMaster_reqGen_intermediateBuffer3$FULL_N ;
  assign blueDMA_readChannel_toMaster_reqGen_intermediateBuffer2$CLR = 1'b0 ;

  // submodule blueDMA_readChannel_toMaster_reqGen_intermediateBuffer3
  assign blueDMA_readChannel_toMaster_reqGen_intermediateBuffer3$D_IN =
	     { blueDMA_readChannel_toMaster_reqGen_intermediateBuffer2$D_OUT,
	       requests_first__h199536 } ;
  assign blueDMA_readChannel_toMaster_reqGen_intermediateBuffer3$ENQ =
	     blueDMA_readChannel_toMaster_reqGen_intermediateBuffer2$EMPTY_N &&
	     blueDMA_readChannel_toMaster_reqGen_intermediateBuffer3$FULL_N ;
  assign blueDMA_readChannel_toMaster_reqGen_intermediateBuffer3$DEQ =
	     WILL_FIRE_RL_blueDMA_readChannel_toMaster_reqGen_finishRequest ;
  assign blueDMA_readChannel_toMaster_reqGen_intermediateBuffer3$CLR = 1'b0 ;

  // submodule blueDMA_readChannel_toMaster_reqGen_outgoingBuffer
  assign blueDMA_readChannel_toMaster_reqGen_outgoingBuffer$D_IN =
	     { blueDMA_readChannel_toMaster_reqGen_intermediateBuffer3$D_OUT[8:0],
	       x__h199776,
	       request_data_requests_total__h199750,
	       blueDMA_readChannel_toMaster_reqGen_intermediateBuffer3$D_OUT[108:45],
	       blueDMA_readChannel_toMaster_reqGen_intermediateBuffer3$D_OUT[12:9],
	       1'd1,
	       blueDMA_readChannel_toMaster_reqGen_intermediateBuffer3$D_OUT[146:109],
	       blueDMA_readChannel_toMaster_reqGen_intermediateBuffer3$D_OUT[50:45],
	       1'd1 } ;
  assign blueDMA_readChannel_toMaster_reqGen_outgoingBuffer$ENQ =
	     WILL_FIRE_RL_blueDMA_readChannel_toMaster_reqGen_finishRequest ;
  assign blueDMA_readChannel_toMaster_reqGen_outgoingBuffer$DEQ =
	     WILL_FIRE_RL_blueDMA_readChannel_toMaster_fillBuffer ;
  assign blueDMA_readChannel_toMaster_reqGen_outgoingBuffer$CLR = 1'b0 ;

  // submodule blueDMA_s_config_readSlave_in
  assign blueDMA_s_config_readSlave_in$D_IN = { S_AXI_araddr, S_AXI_arprot } ;
  assign blueDMA_s_config_readSlave_in$ENQ =
	     blueDMA_s_config_readSlave_in$FULL_N && S_AXI_arvalid ;
  assign blueDMA_s_config_readSlave_in$DEQ =
	     WILL_FIRE_RL_blueDMA_s_config_axiReadFallback ||
	     WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_11 ||
	     WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_10 ||
	     WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_9 ||
	     WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_8 ||
	     WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_7 ||
	     WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_6 ||
	     WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_5 ||
	     WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_4 ||
	     WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_3 ||
	     WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_2 ||
	     WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_1 ||
	     WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial ;
  assign blueDMA_s_config_readSlave_in$CLR = 1'b0 ;

  // submodule blueDMA_s_config_readSlave_out
  always@(WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial or
	  MUX_blueDMA_s_config_readSlave_out$enq_1__VAL_1 or
	  WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_1 or
	  MUX_blueDMA_s_config_readSlave_out$enq_1__VAL_2 or
	  WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_2 or
	  MUX_blueDMA_s_config_readSlave_out$enq_1__VAL_3 or
	  WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_3 or
	  MUX_blueDMA_s_config_readSlave_out$enq_1__VAL_4 or
	  WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_4 or
	  MUX_blueDMA_s_config_readSlave_out$enq_1__VAL_5 or
	  WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_5 or
	  MUX_blueDMA_s_config_readSlave_out$enq_1__VAL_6 or
	  WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_6 or
	  MUX_blueDMA_s_config_readSlave_out$enq_1__VAL_7 or
	  WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_7 or
	  MUX_blueDMA_s_config_readSlave_out$enq_1__VAL_8 or
	  WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_8 or
	  MUX_blueDMA_s_config_readSlave_out$enq_1__VAL_9 or
	  WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_9 or
	  MUX_blueDMA_s_config_readSlave_out$enq_1__VAL_10 or
	  WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_10 or
	  MUX_blueDMA_s_config_readSlave_out$enq_1__VAL_11 or
	  WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_11 or
	  MUX_blueDMA_s_config_readSlave_out$enq_1__VAL_12 or
	  WILL_FIRE_RL_blueDMA_s_config_axiReadFallback)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial:
	  blueDMA_s_config_readSlave_out$D_IN =
	      MUX_blueDMA_s_config_readSlave_out$enq_1__VAL_1;
      WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_1:
	  blueDMA_s_config_readSlave_out$D_IN =
	      MUX_blueDMA_s_config_readSlave_out$enq_1__VAL_2;
      WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_2:
	  blueDMA_s_config_readSlave_out$D_IN =
	      MUX_blueDMA_s_config_readSlave_out$enq_1__VAL_3;
      WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_3:
	  blueDMA_s_config_readSlave_out$D_IN =
	      MUX_blueDMA_s_config_readSlave_out$enq_1__VAL_4;
      WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_4:
	  blueDMA_s_config_readSlave_out$D_IN =
	      MUX_blueDMA_s_config_readSlave_out$enq_1__VAL_5;
      WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_5:
	  blueDMA_s_config_readSlave_out$D_IN =
	      MUX_blueDMA_s_config_readSlave_out$enq_1__VAL_6;
      WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_6:
	  blueDMA_s_config_readSlave_out$D_IN =
	      MUX_blueDMA_s_config_readSlave_out$enq_1__VAL_7;
      WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_7:
	  blueDMA_s_config_readSlave_out$D_IN =
	      MUX_blueDMA_s_config_readSlave_out$enq_1__VAL_8;
      WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_8:
	  blueDMA_s_config_readSlave_out$D_IN =
	      MUX_blueDMA_s_config_readSlave_out$enq_1__VAL_9;
      WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_9:
	  blueDMA_s_config_readSlave_out$D_IN =
	      MUX_blueDMA_s_config_readSlave_out$enq_1__VAL_10;
      WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_10:
	  blueDMA_s_config_readSlave_out$D_IN =
	      MUX_blueDMA_s_config_readSlave_out$enq_1__VAL_11;
      WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_11:
	  blueDMA_s_config_readSlave_out$D_IN =
	      MUX_blueDMA_s_config_readSlave_out$enq_1__VAL_12;
      WILL_FIRE_RL_blueDMA_s_config_axiReadFallback:
	  blueDMA_s_config_readSlave_out$D_IN = 66'd0;
      default: blueDMA_s_config_readSlave_out$D_IN =
		   66'h2AAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign blueDMA_s_config_readSlave_out$ENQ =
	     WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial ||
	     WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_1 ||
	     WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_2 ||
	     WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_3 ||
	     WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_4 ||
	     WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_5 ||
	     WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_6 ||
	     WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_7 ||
	     WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_8 ||
	     WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_9 ||
	     WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_10 ||
	     WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_11 ||
	     WILL_FIRE_RL_blueDMA_s_config_axiReadFallback ;
  assign blueDMA_s_config_readSlave_out$DEQ =
	     blueDMA_s_config_readSlave_out$EMPTY_N && S_AXI_rready ;
  assign blueDMA_s_config_readSlave_out$CLR = 1'b0 ;

  // submodule blueDMA_s_config_writeSlave_in
  assign blueDMA_s_config_writeSlave_in$D_IN =
	     { blueDMA_s_config_writeSlave_addrIn_rv$port1__read[66:3],
	       blueDMA_s_config_writeSlave_dataIn_rv$port1__read[71:0],
	       blueDMA_s_config_writeSlave_addrIn_rv$port1__read[2:0] } ;
  assign blueDMA_s_config_writeSlave_in$ENQ =
	     blueDMA_s_config_writeSlave_addrIn_rv$port1__read[67] &&
	     blueDMA_s_config_writeSlave_dataIn_rv$port1__read[72] &&
	     blueDMA_s_config_writeSlave_in$FULL_N ;
  assign blueDMA_s_config_writeSlave_in$DEQ =
	     WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_5 ||
	     WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_4 ||
	     WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_3 ||
	     WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_2 ||
	     WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_1 ||
	     WILL_FIRE_RL_blueDMA_s_config_1_axiWriteFallback ||
	     WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial ;
  assign blueDMA_s_config_writeSlave_in$CLR = 1'b0 ;

  // submodule blueDMA_s_config_writeSlave_out
  assign blueDMA_s_config_writeSlave_out$D_IN = 2'd0 ;
  assign blueDMA_s_config_writeSlave_out$ENQ =
	     WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_5 ||
	     WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_4 ||
	     WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_3 ||
	     WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_2 ||
	     WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_1 ||
	     WILL_FIRE_RL_blueDMA_s_config_1_axiWriteFallback ||
	     WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial ;
  assign blueDMA_s_config_writeSlave_out$DEQ =
	     blueDMA_s_config_writeSlave_out$EMPTY_N && S_AXI_bready ;
  assign blueDMA_s_config_writeSlave_out$CLR = 1'b0 ;

  // submodule blueDMA_writeChannel_byteAlignerFrom_addr_ff
  assign blueDMA_writeChannel_byteAlignerFrom_addr_ff$sD_IN = 160'h0 ;
  assign blueDMA_writeChannel_byteAlignerFrom_addr_ff$sENQ = 1'b0 ;
  assign blueDMA_writeChannel_byteAlignerFrom_addr_ff$dDEQ =
	     blueDMA_writeChannel_byteAlignerFrom_addr_ff$dEMPTY_N ;

  // submodule blueDMA_writeChannel_byteAlignerFrom_incoming
  assign blueDMA_writeChannel_byteAlignerFrom_incoming$D_IN = 512'h0 ;
  assign blueDMA_writeChannel_byteAlignerFrom_incoming$ENQ = 1'b0 ;
  assign blueDMA_writeChannel_byteAlignerFrom_incoming$DEQ =
	     WILL_FIRE_RL_blueDMA_writeChannel_byteAlignerFrom_fetchNewData ;
  assign blueDMA_writeChannel_byteAlignerFrom_incoming$CLR = 1'b0 ;

  // submodule blueDMA_writeChannel_byteAlignerFrom_outgoing
  assign blueDMA_writeChannel_byteAlignerFrom_outgoing$D_IN =
	     blueDMA_writeChannel_byteAlignerFrom_buffer[511:0] ;
  assign blueDMA_writeChannel_byteAlignerFrom_outgoing$ENQ =
	     WILL_FIRE_RL_blueDMA_writeChannel_byteAlignerFrom_forwardOutputLast ||
	     WILL_FIRE_RL_blueDMA_writeChannel_byteAlignerFrom_forwardOutput ;
  assign blueDMA_writeChannel_byteAlignerFrom_outgoing$DEQ = 1'b0 ;
  assign blueDMA_writeChannel_byteAlignerFrom_outgoing$CLR = 1'b0 ;

  // submodule blueDMA_writeChannel_byteAlignerTo_addr_ff
  assign blueDMA_writeChannel_byteAlignerTo_addr_ff$sD_IN = 160'h0 ;
  assign blueDMA_writeChannel_byteAlignerTo_addr_ff$sENQ = 1'b0 ;
  assign blueDMA_writeChannel_byteAlignerTo_addr_ff$dDEQ =
	     blueDMA_writeChannel_byteAlignerTo_addr_ff$dEMPTY_N ;

  // submodule blueDMA_writeChannel_byteAlignerTo_incoming
  assign blueDMA_writeChannel_byteAlignerTo_incoming$D_IN = 512'h0 ;
  assign blueDMA_writeChannel_byteAlignerTo_incoming$ENQ = 1'b0 ;
  assign blueDMA_writeChannel_byteAlignerTo_incoming$DEQ =
	     WILL_FIRE_RL_blueDMA_writeChannel_byteAlignerTo_fetchNewData ;
  assign blueDMA_writeChannel_byteAlignerTo_incoming$CLR = 1'b0 ;

  // submodule blueDMA_writeChannel_byteAlignerTo_outgoing
  assign blueDMA_writeChannel_byteAlignerTo_outgoing$D_IN =
	     blueDMA_writeChannel_byteAlignerTo_buffer[511:0] ;
  assign blueDMA_writeChannel_byteAlignerTo_outgoing$ENQ =
	     WILL_FIRE_RL_blueDMA_writeChannel_byteAlignerTo_forwardOutputLast ||
	     WILL_FIRE_RL_blueDMA_writeChannel_byteAlignerTo_forwardOutput ;
  assign blueDMA_writeChannel_byteAlignerTo_outgoing$DEQ = 1'b0 ;
  assign blueDMA_writeChannel_byteAlignerTo_outgoing$CLR = 1'b0 ;

  // submodule blueDMA_writeChannel_clockConverter_fifo
  assign blueDMA_writeChannel_clockConverter_fifo$sD_IN =
	     blueDMA_writeChannel_fromMaster_outgoingBuffer$D_OUT ;
  assign blueDMA_writeChannel_clockConverter_fifo$sENQ =
	     blueDMA_writeChannel_clockConverter_fifo$sFULL_N &&
	     blueDMA_writeChannel_fromMaster_outgoingBuffer$EMPTY_N ;
  assign blueDMA_writeChannel_clockConverter_fifo$dDEQ =
	     blueDMA_writeChannel_clockConverter_fifo$dEMPTY_N &&
	     blueDMA_writeChannel_mimo_impl$FULL_N ;

  // submodule blueDMA_writeChannel_cmdIn
  assign blueDMA_writeChannel_cmdIn$D_IN =
	     { blueDMA_host_addr,
	       blueDMA_fpga_addr,
	       blueDMA_transfer_length[31:0] } ;
  assign blueDMA_writeChannel_cmdIn$ENQ =
	     blueDMA_cmdsIn$EMPTY_N && blueDMA_writeChannel_cmdIn$FULL_N &&
	     blueDMA_cmdsIn$D_OUT ;
  assign blueDMA_writeChannel_cmdIn$DEQ =
	     WILL_FIRE_RL_blueDMA_writeChannel_handleCommand ;
  assign blueDMA_writeChannel_cmdIn$CLR = 1'b0 ;

  // submodule blueDMA_writeChannel_fromDone
  assign blueDMA_writeChannel_fromDone$sD_IN = 1'd1 ;
  assign blueDMA_writeChannel_fromDone$sENQ =
	     blueDMA_writeChannel_fromDone$sFULL_N &&
	     blueDMA_writeChannel_fromLastCycle &&
	     blueDMA_writeChannel_fromMaster_task_data_output_reg[32:7] ==
	     26'd0 &&
	     blueDMA_writeChannel_fromMaster_task_data_requests_reg[94:69] ==
	     26'd0 ;
  assign blueDMA_writeChannel_fromDone$dDEQ =
	     WILL_FIRE_RL_blueDMA_writeChannel_setInterrupt ;

  // submodule blueDMA_writeChannel_fromMasterReq_ff
  assign blueDMA_writeChannel_fromMasterReq_ff$sD_IN =
	     { blueDMA_writeChannel_cmdIn$D_OUT[159:96],
	       blueDMA_writeChannel_cmdIn$D_OUT[31:0],
	       4'd0 } ;
  assign blueDMA_writeChannel_fromMasterReq_ff$sENQ =
	     WILL_FIRE_RL_blueDMA_writeChannel_handleCommand ;
  assign blueDMA_writeChannel_fromMasterReq_ff$dDEQ =
	     blueDMA_writeChannel_fromMasterReq_ff$dEMPTY_N &&
	     blueDMA_writeChannel_fromMaster_reqGen_incomingBuffer$FULL_N ;

  // submodule blueDMA_writeChannel_fromMaster_master_rd_in
  assign blueDMA_writeChannel_fromMaster_master_rd_in$D_IN =
	     { 1'd0,
	       blueDMA_writeChannel_fromMaster_task_data_requests_reg[68:5],
	       _theResult_____2__h3834,
	       17'd102784,
	       blueDMA_writeChannel_fromMaster_task_data_requests_reg[4:1] } ;
  assign blueDMA_writeChannel_fromMaster_master_rd_in$ENQ =
	     WILL_FIRE_RL_blueDMA_writeChannel_fromMaster_placeRequest ;
  assign blueDMA_writeChannel_fromMaster_master_rd_in$DEQ =
	     blueDMA_writeChannel_fromMaster_master_rd_in$EMPTY_N &&
	     m64_axi_arready ;
  assign blueDMA_writeChannel_fromMaster_master_rd_in$CLR = 1'b0 ;

  // submodule blueDMA_writeChannel_fromMaster_master_rd_out
  assign blueDMA_writeChannel_fromMaster_master_rd_out$D_IN =
	     blueDMA_writeChannel_fromMaster_master_rd_rinpkg$wget ;
  assign blueDMA_writeChannel_fromMaster_master_rd_out$ENQ =
	     blueDMA_writeChannel_fromMaster_master_rd_out$FULL_N &&
	     m64_axi_rvalid ;
  assign blueDMA_writeChannel_fromMaster_master_rd_out$DEQ =
	     WILL_FIRE_RL_blueDMA_writeChannel_fromMaster_forwardData ;
  assign blueDMA_writeChannel_fromMaster_master_rd_out$CLR = 1'b0 ;

  // submodule blueDMA_writeChannel_fromMaster_maxOutstandingFIFO
  assign blueDMA_writeChannel_fromMaster_maxOutstandingFIFO$D_IN = 1'd1 ;
  assign blueDMA_writeChannel_fromMaster_maxOutstandingFIFO$ENQ =
	     WILL_FIRE_RL_blueDMA_writeChannel_fromMaster_placeRequest ;
  assign blueDMA_writeChannel_fromMaster_maxOutstandingFIFO$DEQ =
	     WILL_FIRE_RL_blueDMA_writeChannel_fromMaster_forwardData &&
	     blueDMA_writeChannel_fromMaster_master_rd_out$D_OUT[0] ;
  assign blueDMA_writeChannel_fromMaster_maxOutstandingFIFO$CLR = 1'b0 ;

  // submodule blueDMA_writeChannel_fromMaster_outgoingBuffer
  assign blueDMA_writeChannel_fromMaster_outgoingBuffer$D_IN =
	     blueDMA_writeChannel_fromMaster_master_rd_out$D_OUT[514:3] ;
  assign blueDMA_writeChannel_fromMaster_outgoingBuffer$ENQ =
	     WILL_FIRE_RL_blueDMA_writeChannel_fromMaster_forwardData ;
  assign blueDMA_writeChannel_fromMaster_outgoingBuffer$DEQ =
	     blueDMA_writeChannel_clockConverter_fifo$sFULL_N &&
	     blueDMA_writeChannel_fromMaster_outgoingBuffer$EMPTY_N ;
  assign blueDMA_writeChannel_fromMaster_outgoingBuffer$CLR = 1'b0 ;

  // submodule blueDMA_writeChannel_fromMaster_reqGen_incomingBuffer
  assign blueDMA_writeChannel_fromMaster_reqGen_incomingBuffer$D_IN =
	     blueDMA_writeChannel_fromMasterReq_ff$dD_OUT ;
  assign blueDMA_writeChannel_fromMaster_reqGen_incomingBuffer$ENQ =
	     blueDMA_writeChannel_fromMasterReq_ff$dEMPTY_N &&
	     blueDMA_writeChannel_fromMaster_reqGen_incomingBuffer$FULL_N ;
  assign blueDMA_writeChannel_fromMaster_reqGen_incomingBuffer$DEQ =
	     blueDMA_writeChannel_fromMaster_reqGen_incomingBuffer$EMPTY_N &&
	     blueDMA_writeChannel_fromMaster_reqGen_intermediateBuffer$FULL_N ;
  assign blueDMA_writeChannel_fromMaster_reqGen_incomingBuffer$CLR = 1'b0 ;

  // submodule blueDMA_writeChannel_fromMaster_reqGen_intermediateBuffer
  assign blueDMA_writeChannel_fromMaster_reqGen_intermediateBuffer$D_IN =
	     { x__h1136[5:0],
	       blueDMA_writeChannel_fromMaster_reqGen_incomin_ETC__q7[5:0],
	       blueDMA_writeChannel_fromMaster_reqGen_incomingBuffer$D_OUT } ;
  assign blueDMA_writeChannel_fromMaster_reqGen_intermediateBuffer$ENQ =
	     blueDMA_writeChannel_fromMaster_reqGen_incomingBuffer$EMPTY_N &&
	     blueDMA_writeChannel_fromMaster_reqGen_intermediateBuffer$FULL_N ;
  assign blueDMA_writeChannel_fromMaster_reqGen_intermediateBuffer$DEQ =
	     blueDMA_writeChannel_fromMaster_reqGen_intermediateBuffer$EMPTY_N &&
	     blueDMA_writeChannel_fromMaster_reqGen_intermediateBuffer2$FULL_N ;
  assign blueDMA_writeChannel_fromMaster_reqGen_intermediateBuffer$CLR =
	     1'b0 ;

  // submodule blueDMA_writeChannel_fromMaster_reqGen_intermediateBuffer2
  assign blueDMA_writeChannel_fromMaster_reqGen_intermediateBuffer2$D_IN =
	     { blueDMA_writeChannel_fromMaster_reqGen_intermediateBuffer$D_OUT[111:100],
	       x__h1310[25:0],
	       blueDMA_writeChannel_fromMaster_reqGen_intermediateBuffer$D_OUT[99:0] } ;
  assign blueDMA_writeChannel_fromMaster_reqGen_intermediateBuffer2$ENQ =
	     blueDMA_writeChannel_fromMaster_reqGen_intermediateBuffer$EMPTY_N &&
	     blueDMA_writeChannel_fromMaster_reqGen_intermediateBuffer2$FULL_N ;
  assign blueDMA_writeChannel_fromMaster_reqGen_intermediateBuffer2$DEQ =
	     blueDMA_writeChannel_fromMaster_reqGen_intermediateBuffer2$EMPTY_N &&
	     blueDMA_writeChannel_fromMaster_reqGen_intermediateBuffer3$FULL_N ;
  assign blueDMA_writeChannel_fromMaster_reqGen_intermediateBuffer2$CLR =
	     1'b0 ;

  // submodule blueDMA_writeChannel_fromMaster_reqGen_intermediateBuffer3
  assign blueDMA_writeChannel_fromMaster_reqGen_intermediateBuffer3$D_IN =
	     { blueDMA_writeChannel_fromMaster_reqGen_intermediateBuffer2$D_OUT,
	       requests_first__h1412 } ;
  assign blueDMA_writeChannel_fromMaster_reqGen_intermediateBuffer3$ENQ =
	     blueDMA_writeChannel_fromMaster_reqGen_intermediateBuffer2$EMPTY_N &&
	     blueDMA_writeChannel_fromMaster_reqGen_intermediateBuffer3$FULL_N ;
  assign blueDMA_writeChannel_fromMaster_reqGen_intermediateBuffer3$DEQ =
	     WILL_FIRE_RL_blueDMA_writeChannel_fromMaster_reqGen_finishRequest ;
  assign blueDMA_writeChannel_fromMaster_reqGen_intermediateBuffer3$CLR =
	     1'b0 ;

  // submodule blueDMA_writeChannel_fromMaster_reqGen_outgoingBuffer
  assign blueDMA_writeChannel_fromMaster_reqGen_outgoingBuffer$D_IN =
	     { blueDMA_writeChannel_fromMaster_reqGen_intermediateBuffer3$D_OUT[8:0],
	       x__h1652,
	       request_data_requests_total__h1626,
	       blueDMA_writeChannel_fromMaster_reqGen_intermediateBuffer3$D_OUT[108:45],
	       blueDMA_writeChannel_fromMaster_reqGen_intermediateBuffer3$D_OUT[12:9],
	       1'd1,
	       blueDMA_writeChannel_fromMaster_reqGen_intermediateBuffer3$D_OUT[146:109],
	       blueDMA_writeChannel_fromMaster_reqGen_intermediateBuffer3$D_OUT[50:45],
	       1'd1 } ;
  assign blueDMA_writeChannel_fromMaster_reqGen_outgoingBuffer$ENQ =
	     WILL_FIRE_RL_blueDMA_writeChannel_fromMaster_reqGen_finishRequest ;
  assign blueDMA_writeChannel_fromMaster_reqGen_outgoingBuffer$DEQ =
	     WILL_FIRE_RL_blueDMA_writeChannel_fromMaster_fillBuffer ;
  assign blueDMA_writeChannel_fromMaster_reqGen_outgoingBuffer$CLR = 1'b0 ;

  // submodule blueDMA_writeChannel_mimoConv_ff
  assign blueDMA_writeChannel_mimoConv_ff$sD_IN =
	     { blueDMA_writeChannel_cmdIn$D_OUT[31:0],
	       blueDMA_writeChannel_cmdIn$D_OUT[63:32] } ;
  assign blueDMA_writeChannel_mimoConv_ff$sENQ =
	     WILL_FIRE_RL_blueDMA_writeChannel_handleCommand ;
  assign blueDMA_writeChannel_mimoConv_ff$dDEQ =
	     blueDMA_writeChannel_mimoConv_ff$dEMPTY_N ;

  // submodule blueDMA_writeChannel_mimo_impl
  assign blueDMA_writeChannel_mimo_impl$D_IN =
	     blueDMA_writeChannel_clockConverter_fifo$dD_OUT ;
  assign blueDMA_writeChannel_mimo_impl$ENQ =
	     blueDMA_writeChannel_clockConverter_fifo$dEMPTY_N &&
	     blueDMA_writeChannel_mimo_impl$FULL_N ;
  assign blueDMA_writeChannel_mimo_impl$DEQ =
	     MUX_blueDMA_writeChannel_mimo_words_left$write_1__SEL_2 ;
  assign blueDMA_writeChannel_mimo_impl$CLR = 1'b0 ;

  // submodule blueDMA_writeChannel_toDone
  assign blueDMA_writeChannel_toDone$sD_IN = 1'd1 ;
  assign blueDMA_writeChannel_toDone$sENQ =
	     blueDMA_writeChannel_toDone$sFULL_N &&
	     blueDMA_writeChannel_toLastCycle &&
	     blueDMA_writeChannel_toMaster_task_data_output_reg[32:7] ==
	     26'd0 &&
	     blueDMA_writeChannel_toMaster_task_data_requests_reg[94:69] ==
	     26'd0 &&
	     blueDMA_writeChannel_toMaster_outstanding_writes == 8'd0 ;
  assign blueDMA_writeChannel_toDone$dDEQ =
	     WILL_FIRE_RL_blueDMA_writeChannel_setInterrupt ;

  // submodule blueDMA_writeChannel_toMasterReq_ff
  assign blueDMA_writeChannel_toMasterReq_ff$sD_IN =
	     { blueDMA_writeChannel_cmdIn$D_OUT[95:0], 4'd0 } ;
  assign blueDMA_writeChannel_toMasterReq_ff$sENQ =
	     WILL_FIRE_RL_blueDMA_writeChannel_handleCommand ;
  assign blueDMA_writeChannel_toMasterReq_ff$dDEQ =
	     blueDMA_writeChannel_toMasterReq_ff$dEMPTY_N &&
	     blueDMA_writeChannel_toMaster_reqGen_incomingBuffer$FULL_N ;

  // submodule blueDMA_writeChannel_toMaster_beatsPerRequestFIFO
  assign blueDMA_writeChannel_toMaster_beatsPerRequestFIFO$D_IN =
	     _theResult_____3__h8580 ;
  assign blueDMA_writeChannel_toMaster_beatsPerRequestFIFO$ENQ =
	     WILL_FIRE_RL_blueDMA_writeChannel_toMaster_placeRequest ;
  assign blueDMA_writeChannel_toMaster_beatsPerRequestFIFO$DEQ =
	     WILL_FIRE_RL_blueDMA_writeChannel_toMaster_forwardData &&
	     blueDMA_writeChannel_toMaster_beatsThisRequest_ETC___d391 ;
  assign blueDMA_writeChannel_toMaster_beatsPerRequestFIFO$CLR = 1'b0 ;

  // submodule blueDMA_writeChannel_toMaster_incomingBuffer
  assign blueDMA_writeChannel_toMaster_incomingBuffer$D_IN =
	     blueDMA_writeChannel_mimo_impl$D_OUT ;
  assign blueDMA_writeChannel_toMaster_incomingBuffer$ENQ =
	     MUX_blueDMA_writeChannel_mimo_words_left$write_1__SEL_2 ;
  assign blueDMA_writeChannel_toMaster_incomingBuffer$DEQ =
	     WILL_FIRE_RL_blueDMA_writeChannel_toMaster_forwardData ;
  assign blueDMA_writeChannel_toMaster_incomingBuffer$CLR = 1'b0 ;

  // submodule blueDMA_writeChannel_toMaster_master_wr_in_addr
  assign blueDMA_writeChannel_toMaster_master_wr_in_addr$D_IN =
	     { 1'd0,
	       blueDMA_writeChannel_toMaster_task_data_requests_reg[68:5],
	       _theResult_____3__h8580,
	       17'd102784,
	       blueDMA_writeChannel_toMaster_task_data_requests_reg[4:1] } ;
  assign blueDMA_writeChannel_toMaster_master_wr_in_addr$ENQ =
	     WILL_FIRE_RL_blueDMA_writeChannel_toMaster_placeRequest ;
  assign blueDMA_writeChannel_toMaster_master_wr_in_addr$DEQ =
	     blueDMA_writeChannel_toMaster_master_wr_in_addr$EMPTY_N &&
	     m32_axi_awready ;
  assign blueDMA_writeChannel_toMaster_master_wr_in_addr$CLR = 1'b0 ;

  // submodule blueDMA_writeChannel_toMaster_master_wr_in_data
  assign blueDMA_writeChannel_toMaster_master_wr_in_data$D_IN =
	     { blueDMA_writeChannel_toMaster_incomingBuffer$D_OUT,
	       x_strb__h9127,
	       blueDMA_writeChannel_toMaster_beatsThisRequest_ETC___d391 } ;
  assign blueDMA_writeChannel_toMaster_master_wr_in_data$ENQ =
	     WILL_FIRE_RL_blueDMA_writeChannel_toMaster_forwardData ;
  assign blueDMA_writeChannel_toMaster_master_wr_in_data$DEQ =
	     blueDMA_writeChannel_toMaster_master_wr_in_data$EMPTY_N &&
	     m32_axi_wready ;
  assign blueDMA_writeChannel_toMaster_master_wr_in_data$CLR = 1'b0 ;

  // submodule blueDMA_writeChannel_toMaster_master_wr_out
  assign blueDMA_writeChannel_toMaster_master_wr_out$D_IN =
	     blueDMA_writeChannel_toMaster_master_wr_rinpkg$wget ;
  assign blueDMA_writeChannel_toMaster_master_wr_out$ENQ =
	     blueDMA_writeChannel_toMaster_master_wr_out$FULL_N &&
	     m32_axi_bvalid ;
  assign blueDMA_writeChannel_toMaster_master_wr_out$DEQ =
	     MUX_blueDMA_writeChannel_toMaster_outstanding_writes$write_1__SEL_2 ;
  assign blueDMA_writeChannel_toMaster_master_wr_out$CLR = 1'b0 ;

  // submodule blueDMA_writeChannel_toMaster_reqGen_incomingBuffer
  assign blueDMA_writeChannel_toMaster_reqGen_incomingBuffer$D_IN =
	     blueDMA_writeChannel_toMasterReq_ff$dD_OUT ;
  assign blueDMA_writeChannel_toMaster_reqGen_incomingBuffer$ENQ =
	     blueDMA_writeChannel_toMasterReq_ff$dEMPTY_N &&
	     blueDMA_writeChannel_toMaster_reqGen_incomingBuffer$FULL_N ;
  assign blueDMA_writeChannel_toMaster_reqGen_incomingBuffer$DEQ =
	     blueDMA_writeChannel_toMaster_reqGen_incomingBuffer$EMPTY_N &&
	     blueDMA_writeChannel_toMaster_reqGen_intermediateBuffer$FULL_N ;
  assign blueDMA_writeChannel_toMaster_reqGen_incomingBuffer$CLR = 1'b0 ;

  // submodule blueDMA_writeChannel_toMaster_reqGen_intermediateBuffer
  assign blueDMA_writeChannel_toMaster_reqGen_intermediateBuffer$D_IN =
	     { x__h5209[5:0],
	       blueDMA_writeChannel_toMaster_reqGen_incomingB_ETC__q8[5:0],
	       blueDMA_writeChannel_toMaster_reqGen_incomingBuffer$D_OUT } ;
  assign blueDMA_writeChannel_toMaster_reqGen_intermediateBuffer$ENQ =
	     blueDMA_writeChannel_toMaster_reqGen_incomingBuffer$EMPTY_N &&
	     blueDMA_writeChannel_toMaster_reqGen_intermediateBuffer$FULL_N ;
  assign blueDMA_writeChannel_toMaster_reqGen_intermediateBuffer$DEQ =
	     blueDMA_writeChannel_toMaster_reqGen_intermediateBuffer$EMPTY_N &&
	     blueDMA_writeChannel_toMaster_reqGen_intermediateBuffer2$FULL_N ;
  assign blueDMA_writeChannel_toMaster_reqGen_intermediateBuffer$CLR = 1'b0 ;

  // submodule blueDMA_writeChannel_toMaster_reqGen_intermediateBuffer2
  assign blueDMA_writeChannel_toMaster_reqGen_intermediateBuffer2$D_IN =
	     { blueDMA_writeChannel_toMaster_reqGen_intermediateBuffer$D_OUT[111:100],
	       x__h5383[25:0],
	       blueDMA_writeChannel_toMaster_reqGen_intermediateBuffer$D_OUT[99:0] } ;
  assign blueDMA_writeChannel_toMaster_reqGen_intermediateBuffer2$ENQ =
	     blueDMA_writeChannel_toMaster_reqGen_intermediateBuffer$EMPTY_N &&
	     blueDMA_writeChannel_toMaster_reqGen_intermediateBuffer2$FULL_N ;
  assign blueDMA_writeChannel_toMaster_reqGen_intermediateBuffer2$DEQ =
	     blueDMA_writeChannel_toMaster_reqGen_intermediateBuffer2$EMPTY_N &&
	     blueDMA_writeChannel_toMaster_reqGen_intermediateBuffer3$FULL_N ;
  assign blueDMA_writeChannel_toMaster_reqGen_intermediateBuffer2$CLR = 1'b0 ;

  // submodule blueDMA_writeChannel_toMaster_reqGen_intermediateBuffer3
  assign blueDMA_writeChannel_toMaster_reqGen_intermediateBuffer3$D_IN =
	     { blueDMA_writeChannel_toMaster_reqGen_intermediateBuffer2$D_OUT,
	       requests_first__h5485 } ;
  assign blueDMA_writeChannel_toMaster_reqGen_intermediateBuffer3$ENQ =
	     blueDMA_writeChannel_toMaster_reqGen_intermediateBuffer2$EMPTY_N &&
	     blueDMA_writeChannel_toMaster_reqGen_intermediateBuffer3$FULL_N ;
  assign blueDMA_writeChannel_toMaster_reqGen_intermediateBuffer3$DEQ =
	     WILL_FIRE_RL_blueDMA_writeChannel_toMaster_reqGen_finishRequest ;
  assign blueDMA_writeChannel_toMaster_reqGen_intermediateBuffer3$CLR = 1'b0 ;

  // submodule blueDMA_writeChannel_toMaster_reqGen_outgoingBuffer
  assign blueDMA_writeChannel_toMaster_reqGen_outgoingBuffer$D_IN =
	     { blueDMA_writeChannel_toMaster_reqGen_intermediateBuffer3$D_OUT[8:0],
	       x__h5725,
	       request_data_requests_total__h5699,
	       blueDMA_writeChannel_toMaster_reqGen_intermediateBuffer3$D_OUT[108:45],
	       blueDMA_writeChannel_toMaster_reqGen_intermediateBuffer3$D_OUT[12:9],
	       1'd1,
	       blueDMA_writeChannel_toMaster_reqGen_intermediateBuffer3$D_OUT[146:109],
	       blueDMA_writeChannel_toMaster_reqGen_intermediateBuffer3$D_OUT[50:45],
	       1'd1 } ;
  assign blueDMA_writeChannel_toMaster_reqGen_outgoingBuffer$ENQ =
	     WILL_FIRE_RL_blueDMA_writeChannel_toMaster_reqGen_finishRequest ;
  assign blueDMA_writeChannel_toMaster_reqGen_outgoingBuffer$DEQ =
	     WILL_FIRE_RL_blueDMA_writeChannel_toMaster_fillBuffer ;
  assign blueDMA_writeChannel_toMaster_reqGen_outgoingBuffer$CLR = 1'b0 ;

  // remaining internal signals
  assign IF_blueDMA_readChannel_mimoConv_ff_first__644__ETC___d1650 =
	     (blueDMA_readChannel_mimoConv_ff$dD_OUT[37:32] == 6'd0) ?
	       { 6'd0, blueDMA_readChannel_mimoConv_ff$dD_OUT[63:38] } :
	       { 6'd0, blueDMA_readChannel_mimoConv_ff$dD_OUT[63:38] } +
	       32'd1 ;
  assign IF_blueDMA_readChannel_toMaster_task_data_outp_ETC___d1325 =
	     (blueDMA_readChannel_toMaster_task_data_output_reg[0] &&
	      blueDMA_readChannel_toMaster_task_data_output_reg[44:39] !=
	      6'd0) ?
	       endByte___1__h206084 :
	       ((blueDMA_readChannel_toMaster_task_data_output_reg[32:7] ==
		 26'd1) ?
		  ((blueDMA_readChannel_toMaster_task_data_output_reg[38:33] ==
		    6'd0) ?
		     7'd64 :
		     endByte___1__h206110) :
		  7'd64) ;
  assign IF_blueDMA_writeChannel_mimoConv_ff_first__31__ETC___d737 =
	     (blueDMA_writeChannel_mimoConv_ff$dD_OUT[37:32] == 6'd0) ?
	       { 6'd0, blueDMA_writeChannel_mimoConv_ff$dD_OUT[63:38] } :
	       { 6'd0, blueDMA_writeChannel_mimoConv_ff$dD_OUT[63:38] } +
	       32'd1 ;
  assign IF_blueDMA_writeChannel_toMaster_task_data_out_ETC___d412 =
	     (blueDMA_writeChannel_toMaster_task_data_output_reg[0] &&
	      blueDMA_writeChannel_toMaster_task_data_output_reg[44:39] !=
	      6'd0) ?
	       endByte___1__h12036 :
	       ((blueDMA_writeChannel_toMaster_task_data_output_reg[32:7] ==
		 26'd1) ?
		  ((blueDMA_writeChannel_toMaster_task_data_output_reg[38:33] ==
		    6'd0) ?
		     7'd64 :
		     endByte___1__h12062) :
		  7'd64) ;
  assign _theResult_____2__h197885 =
	     (blueDMA_readChannel_fromMaster_task_data_requests_reg[94:69] ==
	      26'd1 &&
	      blueDMA_readChannel_fromMaster_task_data_requests_reg[103:95] !=
	      9'd0) ?
	       x__h197937[7:0] :
	       ((blueDMA_readChannel_fromMaster_task_data_requests_reg[0] &&
		 blueDMA_readChannel_fromMaster_task_data_requests_reg[112:104] !=
		 9'd0) ?
		  x__h197947[7:0] :
		  8'd63) ;
  assign _theResult_____2__h3834 =
	     (blueDMA_writeChannel_fromMaster_task_data_requests_reg[94:69] ==
	      26'd1 &&
	      blueDMA_writeChannel_fromMaster_task_data_requests_reg[103:95] !=
	      9'd0) ?
	       x__h3886[7:0] :
	       ((blueDMA_writeChannel_fromMaster_task_data_requests_reg[0] &&
		 blueDMA_writeChannel_fromMaster_task_data_requests_reg[112:104] !=
		 9'd0) ?
		  x__h3896[7:0] :
		  8'd63) ;
  assign _theResult_____3__h202628 =
	     (blueDMA_readChannel_toMaster_task_data_requests_reg[94:69] ==
	      26'd1 &&
	      blueDMA_readChannel_toMaster_task_data_requests_reg[103:95] !=
	      9'd0) ?
	       x__h202680[7:0] :
	       ((blueDMA_readChannel_toMaster_task_data_requests_reg[0] &&
		 blueDMA_readChannel_toMaster_task_data_requests_reg[112:104] !=
		 9'd0) ?
		  x__h202690[7:0] :
		  8'd63) ;
  assign _theResult_____3__h8580 =
	     (blueDMA_writeChannel_toMaster_task_data_requests_reg[94:69] ==
	      26'd1 &&
	      blueDMA_writeChannel_toMaster_task_data_requests_reg[103:95] !=
	      9'd0) ?
	       x__h8632[7:0] :
	       ((blueDMA_writeChannel_toMaster_task_data_requests_reg[0] &&
		 blueDMA_writeChannel_toMaster_task_data_requests_reg[112:104] !=
		 9'd0) ?
		  x__h8642[7:0] :
		  8'd63) ;
  assign _theResult____h1131 =
	     (blueDMA_writeChannel_fromMaster_reqGen_incomingBuffer$D_OUT[41:36] ==
	      6'd0) ?
	       bytes_first__h1130 :
	       bytes_first___1__h1162 ;
  assign _theResult____h1308 =
	     (blueDMA_writeChannel_fromMaster_reqGen_intermediateBuffer$D_OUT[111:106] ==
	      6'd0) ?
	       transfers_total__h1307 :
	       transfers_total___1__h1316 ;
  assign _theResult____h1659 =
	     (blueDMA_writeChannel_fromMaster_reqGen_interme_ETC___d75[5:0] ==
	      6'd0) ?
	       requests_total__h1579 :
	       requests_total___1__h1666 ;
  assign _theResult____h195207 =
	     (blueDMA_readChannel_fromMaster_reqGen_incomingBuffer$D_OUT[41:36] ==
	      6'd0) ?
	       bytes_first__h195206 :
	       bytes_first___1__h195238 ;
  assign _theResult____h195384 =
	     (blueDMA_readChannel_fromMaster_reqGen_intermediateBuffer$D_OUT[111:106] ==
	      6'd0) ?
	       transfers_total__h195383 :
	       transfers_total___1__h195392 ;
  assign _theResult____h195735 =
	     (blueDMA_readChannel_fromMaster_reqGen_intermed_ETC___d988[5:0] ==
	      6'd0) ?
	       requests_total__h195655 :
	       requests_total___1__h195742 ;
  assign _theResult____h199255 =
	     (blueDMA_readChannel_toMaster_reqGen_incomingBuffer$D_OUT[41:36] ==
	      6'd0) ?
	       bytes_first__h199254 :
	       bytes_first___1__h199286 ;
  assign _theResult____h199432 =
	     (blueDMA_readChannel_toMaster_reqGen_intermediateBuffer$D_OUT[111:106] ==
	      6'd0) ?
	       transfers_total__h199431 :
	       transfers_total___1__h199440 ;
  assign _theResult____h199783 =
	     (blueDMA_readChannel_toMaster_reqGen_intermedia_ETC___d1181[5:0] ==
	      6'd0) ?
	       requests_total__h199703 :
	       requests_total___1__h199790 ;
  assign _theResult____h5204 =
	     (blueDMA_writeChannel_toMaster_reqGen_incomingBuffer$D_OUT[41:36] ==
	      6'd0) ?
	       bytes_first__h5203 :
	       bytes_first___1__h5235 ;
  assign _theResult____h5381 =
	     (blueDMA_writeChannel_toMaster_reqGen_intermediateBuffer$D_OUT[111:106] ==
	      6'd0) ?
	       transfers_total__h5380 :
	       transfers_total___1__h5389 ;
  assign _theResult____h5732 =
	     (blueDMA_writeChannel_toMaster_reqGen_intermedi_ETC___d268[5:0] ==
	      6'd0) ?
	       requests_total__h5652 :
	       requests_total___1__h5739 ;
  assign addr_last__h1483 =
	     blueDMA_writeChannel_fromMaster_reqGen_intermediateBuffer2$D_OUT[47:36] +
	     y__h1504 ;
  assign addr_last__h1484 = addr_last__h1483 - 12'd1 ;
  assign addr_last__h195559 =
	     blueDMA_readChannel_fromMaster_reqGen_intermediateBuffer2$D_OUT[47:36] +
	     y__h195580 ;
  assign addr_last__h195560 = addr_last__h195559 - 12'd1 ;
  assign addr_last__h199607 =
	     blueDMA_readChannel_toMaster_reqGen_intermediateBuffer2$D_OUT[47:36] +
	     y__h199628 ;
  assign addr_last__h199608 = addr_last__h199607 - 12'd1 ;
  assign addr_last__h5556 =
	     blueDMA_writeChannel_toMaster_reqGen_intermediateBuffer2$D_OUT[47:36] +
	     y__h5577 ;
  assign addr_last__h5557 = addr_last__h5556 - 12'd1 ;
  assign b__h106807 =
	     { 1'd0,
	       blueDMA_writeChannel_byteAlignerFrom_addr_ff$dD_OUT[37:32] } ;
  assign b__h135394 =
	     blueDMA_writeChannel_byteAlignerTo_bytes_left_in_buffer$EN_port0__write ?
	       blueDMA_writeChannel_byteAlignerTo_bytes_left_in_buffer$port0__write_1 :
	       blueDMA_writeChannel_byteAlignerTo_bytes_left_in_buffer ;
  assign b__h166757 =
	     { 25'd0, blueDMA_writeChannel_byteAlignerTo_bytes_out_needed } ;
  assign b__h192552 =
	     { 1'd0,
	       blueDMA_writeChannel_byteAlignerTo_addr_ff$dD_OUT[37:32] } ;
  assign b__h243683 =
	     blueDMA_readChannel_byteAlignerFrom_bytes_left_in_buffer$EN_port0__write ?
	       blueDMA_readChannel_byteAlignerFrom_bytes_left_in_buffer$port0__write_1 :
	       blueDMA_readChannel_byteAlignerFrom_bytes_left_in_buffer ;
  assign b__h275046 =
	     { 25'd0, blueDMA_readChannel_byteAlignerFrom_bytes_out_needed } ;
  assign b__h300855 =
	     { 1'd0,
	       blueDMA_readChannel_byteAlignerFrom_addr_ff$dD_OUT[37:32] } ;
  assign b__h329442 =
	     blueDMA_readChannel_byteAlignerTo_bytes_left_in_buffer$EN_port0__write ?
	       blueDMA_readChannel_byteAlignerTo_bytes_left_in_buffer$port0__write_1 :
	       blueDMA_readChannel_byteAlignerTo_bytes_left_in_buffer ;
  assign b__h360805 =
	     { 25'd0, blueDMA_readChannel_byteAlignerTo_bytes_out_needed } ;
  assign b__h386600 =
	     { 1'd0,
	       blueDMA_readChannel_byteAlignerTo_addr_ff$dD_OUT[37:32] } ;
  assign b__h49635 =
	     blueDMA_writeChannel_byteAlignerFrom_bytes_left_in_buffer$EN_port0__write ?
	       blueDMA_writeChannel_byteAlignerFrom_bytes_left_in_buffer$port0__write_1 :
	       blueDMA_writeChannel_byteAlignerFrom_bytes_left_in_buffer ;
  assign b__h80998 =
	     { 25'd0,
	       blueDMA_writeChannel_byteAlignerFrom_bytes_out_needed } ;
  assign barrier_transfers__h1527 = x__h1537[11:0] >> 6 ;
  assign barrier_transfers__h195603 = x__h195613[11:0] >> 6 ;
  assign barrier_transfers__h199651 = x__h199661[11:0] >> 6 ;
  assign barrier_transfers__h5600 = x__h5610[11:0] >> 6 ;
  assign beatsThisRequestCntrT__h203061 =
	     blueDMA_readChannel_toMaster_beatsThisRequestCntr + 8'd1 ;
  assign beatsThisRequestCntrT__h9013 =
	     blueDMA_writeChannel_toMaster_beatsThisRequestCntr + 8'd1 ;
  assign blueDMA_readChannel_byteAlignerFrom_bytes_in_6_ETC___d1663 =
	     blueDMA_readChannel_byteAlignerFrom_bytes_in <
	     blueDMA_readChannel_byteAlignerFrom_bytes_total ;
  assign blueDMA_readChannel_byteAlignerFrom_bytes_left_ETC___d1678 =
	     blueDMA_readChannel_byteAlignerFrom_bytes_left_in_buffer <
	     blueDMA_readChannel_byteAlignerFrom_bytes_out_needed ;
  assign blueDMA_readChannel_byteAlignerTo_bytes_in_718_ETC___d1720 =
	     blueDMA_readChannel_byteAlignerTo_bytes_in <
	     blueDMA_readChannel_byteAlignerTo_bytes_total ;
  assign blueDMA_readChannel_byteAlignerTo_bytes_left_i_ETC___d1735 =
	     blueDMA_readChannel_byteAlignerTo_bytes_left_in_buffer <
	     blueDMA_readChannel_byteAlignerTo_bytes_out_needed ;
  assign blueDMA_readChannel_fromMaster_reqGen_incoming_ETC__q5 =
	     blueDMA_readChannel_fromMaster_reqGen_incomingBuffer$D_OUT[35:4] -
	     y__h195279 ;
  assign blueDMA_readChannel_fromMaster_reqGen_intermed_ETC___d988 =
	     blueDMA_readChannel_fromMaster_reqGen_intermediateBuffer3$D_OUT[134:109] -
	     { 17'd0,
	       blueDMA_readChannel_fromMaster_reqGen_intermediateBuffer3$D_OUT[8:0] } ;
  assign blueDMA_readChannel_perf_intervalCounter_777_E_ETC___d1822 =
	     blueDMA_readChannel_perf_intervalCounter ==
	     blueDMA_readChannel_perf_intervalSet ;
  assign blueDMA_readChannel_toMaster_beatsThisRequestC_ETC___d1304 =
	     blueDMA_readChannel_toMaster_beatsThisRequestCntr ==
	     blueDMA_readChannel_toMaster_beatsPerRequestFIFO$D_OUT ;
  assign blueDMA_readChannel_toMaster_reqGen_incomingBu_ETC__q6 =
	     blueDMA_readChannel_toMaster_reqGen_incomingBuffer$D_OUT[35:4] -
	     y__h199327 ;
  assign blueDMA_readChannel_toMaster_reqGen_intermedia_ETC___d1181 =
	     blueDMA_readChannel_toMaster_reqGen_intermediateBuffer3$D_OUT[134:109] -
	     { 17'd0,
	       blueDMA_readChannel_toMaster_reqGen_intermediateBuffer3$D_OUT[8:0] } ;
  assign blueDMA_writeChannel_byteAlignerFrom_bytes_in__ETC___d750 =
	     blueDMA_writeChannel_byteAlignerFrom_bytes_in <
	     blueDMA_writeChannel_byteAlignerFrom_bytes_total ;
  assign blueDMA_writeChannel_byteAlignerFrom_bytes_lef_ETC___d765 =
	     blueDMA_writeChannel_byteAlignerFrom_bytes_left_in_buffer <
	     blueDMA_writeChannel_byteAlignerFrom_bytes_out_needed ;
  assign blueDMA_writeChannel_byteAlignerTo_bytes_in_05_ETC___d807 =
	     blueDMA_writeChannel_byteAlignerTo_bytes_in <
	     blueDMA_writeChannel_byteAlignerTo_bytes_total ;
  assign blueDMA_writeChannel_byteAlignerTo_bytes_left__ETC___d822 =
	     blueDMA_writeChannel_byteAlignerTo_bytes_left_in_buffer <
	     blueDMA_writeChannel_byteAlignerTo_bytes_out_needed ;
  assign blueDMA_writeChannel_fromMaster_reqGen_incomin_ETC__q7 =
	     blueDMA_writeChannel_fromMaster_reqGen_incomingBuffer$D_OUT[35:4] -
	     y__h1203 ;
  assign blueDMA_writeChannel_fromMaster_reqGen_interme_ETC___d75 =
	     blueDMA_writeChannel_fromMaster_reqGen_intermediateBuffer3$D_OUT[134:109] -
	     { 17'd0,
	       blueDMA_writeChannel_fromMaster_reqGen_intermediateBuffer3$D_OUT[8:0] } ;
  assign blueDMA_writeChannel_perf_intervalCounter_64_E_ETC___d909 =
	     blueDMA_writeChannel_perf_intervalCounter ==
	     blueDMA_writeChannel_perf_intervalSet ;
  assign blueDMA_writeChannel_toMaster_beatsThisRequest_ETC___d391 =
	     blueDMA_writeChannel_toMaster_beatsThisRequestCntr ==
	     blueDMA_writeChannel_toMaster_beatsPerRequestFIFO$D_OUT ;
  assign blueDMA_writeChannel_toMaster_reqGen_incomingB_ETC__q8 =
	     blueDMA_writeChannel_toMaster_reqGen_incomingBuffer$D_OUT[35:4] -
	     y__h5276 ;
  assign blueDMA_writeChannel_toMaster_reqGen_intermedi_ETC___d268 =
	     blueDMA_writeChannel_toMaster_reqGen_intermediateBuffer3$D_OUT[134:109] -
	     { 17'd0,
	       blueDMA_writeChannel_toMaster_reqGen_intermediateBuffer3$D_OUT[8:0] } ;
  assign burst_length__h1481 =
	     (blueDMA_writeChannel_fromMaster_reqGen_intermediateBuffer2$D_OUT[125:100] <
	      26'd64) ?
	       blueDMA_writeChannel_fromMaster_reqGen_intermediateBuffer2$D_OUT[108:100] :
	       9'd64 ;
  assign burst_length__h195557 =
	     (blueDMA_readChannel_fromMaster_reqGen_intermediateBuffer2$D_OUT[125:100] <
	      26'd64) ?
	       blueDMA_readChannel_fromMaster_reqGen_intermediateBuffer2$D_OUT[108:100] :
	       9'd64 ;
  assign burst_length__h199605 =
	     (blueDMA_readChannel_toMaster_reqGen_intermediateBuffer2$D_OUT[125:100] <
	      26'd64) ?
	       blueDMA_readChannel_toMaster_reqGen_intermediateBuffer2$D_OUT[108:100] :
	       9'd64 ;
  assign burst_length__h5554 =
	     (blueDMA_writeChannel_toMaster_reqGen_intermediateBuffer2$D_OUT[125:100] <
	      26'd64) ?
	       blueDMA_writeChannel_toMaster_reqGen_intermediateBuffer2$D_OUT[108:100] :
	       9'd64 ;
  assign bytes_first___1__h1162 = 64'd64 - bytes_first__h1130 ;
  assign bytes_first___1__h195238 = 64'd64 - bytes_first__h195206 ;
  assign bytes_first___1__h199286 = 64'd64 - bytes_first__h199254 ;
  assign bytes_first___1__h5235 = 64'd64 - bytes_first__h5203 ;
  assign bytes_first__h1130 =
	     { 58'd0,
	       blueDMA_writeChannel_fromMaster_reqGen_incomingBuffer$D_OUT[41:36] } ;
  assign bytes_first__h195206 =
	     { 58'd0,
	       blueDMA_readChannel_fromMaster_reqGen_incomingBuffer$D_OUT[41:36] } ;
  assign bytes_first__h199254 =
	     { 58'd0,
	       blueDMA_readChannel_toMaster_reqGen_incomingBuffer$D_OUT[41:36] } ;
  assign bytes_first__h5203 =
	     { 58'd0,
	       blueDMA_writeChannel_toMaster_reqGen_incomingBuffer$D_OUT[41:36] } ;
  assign endByte___1__h12036 =
	     startByte___1__h12035 +
	     { 1'd0,
	       blueDMA_writeChannel_toMaster_task_data_output_reg[44:39] } ;
  assign endByte___1__h12062 =
	     { 1'd0,
	       blueDMA_writeChannel_toMaster_task_data_output_reg[38:33] } ;
  assign endByte___1__h206084 =
	     startByte___1__h206083 +
	     { 1'd0,
	       blueDMA_readChannel_toMaster_task_data_output_reg[44:39] } ;
  assign endByte___1__h206110 =
	     { 1'd0,
	       blueDMA_readChannel_toMaster_task_data_output_reg[38:33] } ;
  assign request_data_requests_total__h1626 =
	     (blueDMA_writeChannel_fromMaster_reqGen_intermediateBuffer3$D_OUT[8:0] ==
	      9'd0) ?
	       _theResult____h1659 :
	       requests_total__h1663 ;
  assign request_data_requests_total__h195702 =
	     (blueDMA_readChannel_fromMaster_reqGen_intermediateBuffer3$D_OUT[8:0] ==
	      9'd0) ?
	       _theResult____h195735 :
	       requests_total__h195739 ;
  assign request_data_requests_total__h199750 =
	     (blueDMA_readChannel_toMaster_reqGen_intermediateBuffer3$D_OUT[8:0] ==
	      9'd0) ?
	       _theResult____h199783 :
	       requests_total__h199787 ;
  assign request_data_requests_total__h5699 =
	     (blueDMA_writeChannel_toMaster_reqGen_intermediateBuffer3$D_OUT[8:0] ==
	      9'd0) ?
	       _theResult____h5732 :
	       requests_total__h5736 ;
  assign requests_first__h1412 =
	     (addr_last__h1484 <=
	      blueDMA_writeChannel_fromMaster_reqGen_intermediateBuffer2$D_OUT[47:36]) ?
	       barrier_transfers__h1527[8:0] :
	       9'd0 ;
  assign requests_first__h195488 =
	     (addr_last__h195560 <=
	      blueDMA_readChannel_fromMaster_reqGen_intermediateBuffer2$D_OUT[47:36]) ?
	       barrier_transfers__h195603[8:0] :
	       9'd0 ;
  assign requests_first__h199536 =
	     (addr_last__h199608 <=
	      blueDMA_readChannel_toMaster_reqGen_intermediateBuffer2$D_OUT[47:36]) ?
	       barrier_transfers__h199651[8:0] :
	       9'd0 ;
  assign requests_first__h5485 =
	     (addr_last__h5557 <=
	      blueDMA_writeChannel_toMaster_reqGen_intermediateBuffer2$D_OUT[47:36]) ?
	       barrier_transfers__h5600[8:0] :
	       9'd0 ;
  assign requests_total___1__h1666 = requests_total__h1579 + 26'd1 ;
  assign requests_total___1__h195742 = requests_total__h195655 + 26'd1 ;
  assign requests_total___1__h199790 = requests_total__h199703 + 26'd1 ;
  assign requests_total___1__h5739 = requests_total__h5652 + 26'd1 ;
  assign requests_total__h1579 =
	     blueDMA_writeChannel_fromMaster_reqGen_interme_ETC___d75 >> 6 ;
  assign requests_total__h1663 = _theResult____h1659 + 26'd1 ;
  assign requests_total__h195655 =
	     blueDMA_readChannel_fromMaster_reqGen_intermed_ETC___d988 >> 6 ;
  assign requests_total__h195739 = _theResult____h195735 + 26'd1 ;
  assign requests_total__h199703 =
	     blueDMA_readChannel_toMaster_reqGen_intermedia_ETC___d1181 >> 6 ;
  assign requests_total__h199787 = _theResult____h199783 + 26'd1 ;
  assign requests_total__h5652 =
	     blueDMA_writeChannel_toMaster_reqGen_intermedi_ETC___d268 >> 6 ;
  assign requests_total__h5736 = _theResult____h5732 + 26'd1 ;
  assign startByte___1__h12035 =
	     { 1'd0,
	       blueDMA_writeChannel_toMaster_task_data_output_reg[6:1] } ;
  assign startByte___1__h206083 =
	     { 1'd0,
	       blueDMA_readChannel_toMaster_task_data_output_reg[6:1] } ;
  assign transfers_total___1__h1316 = transfers_total__h1307 + 32'd1 ;
  assign transfers_total___1__h195392 = transfers_total__h195383 + 32'd1 ;
  assign transfers_total___1__h199440 = transfers_total__h199431 + 32'd1 ;
  assign transfers_total___1__h5389 = transfers_total__h5380 + 32'd1 ;
  assign transfers_total__h1307 = (x__h1336 - y__h1337) >> 6 ;
  assign transfers_total__h1313 = _theResult____h1308 + 32'd1 ;
  assign transfers_total__h195383 = (x__h195412 - y__h195413) >> 6 ;
  assign transfers_total__h195389 = _theResult____h195384 + 32'd1 ;
  assign transfers_total__h199431 = (x__h199460 - y__h199461) >> 6 ;
  assign transfers_total__h199437 = _theResult____h199432 + 32'd1 ;
  assign transfers_total__h5380 = (x__h5409 - y__h5410) >> 6 ;
  assign transfers_total__h5386 = _theResult____h5381 + 32'd1 ;
  assign v__h401740 = { 32'd0, blueDMA_readChannel_total_requests_reg } ;
  assign v__h401883 = { 32'd0, blueDMA_writeChannel_total_requests_reg } ;
  assign v__h402026 = { 32'd0, blueDMA_readChannel_perf_cycleCounterCur } ;
  assign v__h402170 =
	     { 32'd0, blueDMA_readChannel_perf_cycleCounterInterval } ;
  assign v__h402314 = { 52'd0, blueDMA_readChannel_perf_intervalSet } ;
  assign v__h402457 = { 32'd0, blueDMA_writeChannel_perf_cycleCounterCur } ;
  assign v__h402601 =
	     { 32'd0, blueDMA_writeChannel_perf_cycleCounterInterval } ;
  assign v__h402745 = { 52'd0, blueDMA_writeChannel_perf_intervalSet } ;
  assign x__h1136 =
	     ({ 32'd0,
		blueDMA_writeChannel_fromMaster_reqGen_incomingBuffer$D_OUT[35:4] } <
	      _theResult____h1131 ||
	      _theResult____h1131 == 64'd0 &&
	      blueDMA_writeChannel_fromMaster_reqGen_incomingBuffer$D_OUT[35:4] <
	      32'd64) ?
	       { 32'd0,
		 blueDMA_writeChannel_fromMaster_reqGen_incomingBuffer$D_OUT[35:4] } :
	       _theResult____h1131 ;
  assign x__h12022 =
	     (blueDMA_writeChannel_toMaster_task_data_output_reg[0] &&
	      blueDMA_writeChannel_toMaster_task_data_output_reg[44:39] !=
	      6'd0) ?
	       startByte___1__h12035 :
	       7'd0 ;
  assign x__h1310 =
	     (blueDMA_writeChannel_fromMaster_reqGen_intermediateBuffer$D_OUT[105:100] ==
	      6'd0) ?
	       _theResult____h1308 :
	       transfers_total__h1313 ;
  assign x__h1336 =
	     blueDMA_writeChannel_fromMaster_reqGen_intermediateBuffer$D_OUT[35:4] -
	     y__h1339 ;
  assign x__h1537 =
	     13'd4096 -
	     { 1'd0,
	       blueDMA_writeChannel_fromMaster_reqGen_intermediateBuffer2$D_OUT[47:36] } ;
  assign x__h1652 =
	     { 3'd0,
	       blueDMA_writeChannel_fromMaster_reqGen_interme_ETC___d75[5:0] } ;
  assign x__h195212 =
	     ({ 32'd0,
		blueDMA_readChannel_fromMaster_reqGen_incomingBuffer$D_OUT[35:4] } <
	      _theResult____h195207 ||
	      _theResult____h195207 == 64'd0 &&
	      blueDMA_readChannel_fromMaster_reqGen_incomingBuffer$D_OUT[35:4] <
	      32'd64) ?
	       { 32'd0,
		 blueDMA_readChannel_fromMaster_reqGen_incomingBuffer$D_OUT[35:4] } :
	       _theResult____h195207 ;
  assign x__h195386 =
	     (blueDMA_readChannel_fromMaster_reqGen_intermediateBuffer$D_OUT[105:100] ==
	      6'd0) ?
	       _theResult____h195384 :
	       transfers_total__h195389 ;
  assign x__h195412 =
	     blueDMA_readChannel_fromMaster_reqGen_intermediateBuffer$D_OUT[35:4] -
	     y__h195415 ;
  assign x__h195613 =
	     13'd4096 -
	     { 1'd0,
	       blueDMA_readChannel_fromMaster_reqGen_intermediateBuffer2$D_OUT[47:36] } ;
  assign x__h195728 =
	     { 3'd0,
	       blueDMA_readChannel_fromMaster_reqGen_intermed_ETC___d988[5:0] } ;
  assign x__h197937 =
	     blueDMA_readChannel_fromMaster_task_data_requests_reg[103:95] -
	     9'd1 ;
  assign x__h197947 =
	     blueDMA_readChannel_fromMaster_task_data_requests_reg[112:104] -
	     9'd1 ;
  assign x__h199260 =
	     ({ 32'd0,
		blueDMA_readChannel_toMaster_reqGen_incomingBuffer$D_OUT[35:4] } <
	      _theResult____h199255 ||
	      _theResult____h199255 == 64'd0 &&
	      blueDMA_readChannel_toMaster_reqGen_incomingBuffer$D_OUT[35:4] <
	      32'd64) ?
	       { 32'd0,
		 blueDMA_readChannel_toMaster_reqGen_incomingBuffer$D_OUT[35:4] } :
	       _theResult____h199255 ;
  assign x__h199434 =
	     (blueDMA_readChannel_toMaster_reqGen_intermediateBuffer$D_OUT[105:100] ==
	      6'd0) ?
	       _theResult____h199432 :
	       transfers_total__h199437 ;
  assign x__h199460 =
	     blueDMA_readChannel_toMaster_reqGen_intermediateBuffer$D_OUT[35:4] -
	     y__h199463 ;
  assign x__h199661 =
	     13'd4096 -
	     { 1'd0,
	       blueDMA_readChannel_toMaster_reqGen_intermediateBuffer2$D_OUT[47:36] } ;
  assign x__h199776 =
	     { 3'd0,
	       blueDMA_readChannel_toMaster_reqGen_intermedia_ETC___d1181[5:0] } ;
  assign x__h202680 =
	     blueDMA_readChannel_toMaster_task_data_requests_reg[103:95] -
	     9'd1 ;
  assign x__h202690 =
	     blueDMA_readChannel_toMaster_task_data_requests_reg[112:104] -
	     9'd1 ;
  assign x__h206070 =
	     (blueDMA_readChannel_toMaster_task_data_output_reg[0] &&
	      blueDMA_readChannel_toMaster_task_data_output_reg[44:39] !=
	      6'd0) ?
	       startByte___1__h206083 :
	       7'd0 ;
  assign x__h3886 =
	     blueDMA_writeChannel_fromMaster_task_data_requests_reg[103:95] -
	     9'd1 ;
  assign x__h3896 =
	     blueDMA_writeChannel_fromMaster_task_data_requests_reg[112:104] -
	     9'd1 ;
  assign x__h5209 =
	     ({ 32'd0,
		blueDMA_writeChannel_toMaster_reqGen_incomingBuffer$D_OUT[35:4] } <
	      _theResult____h5204 ||
	      _theResult____h5204 == 64'd0 &&
	      blueDMA_writeChannel_toMaster_reqGen_incomingBuffer$D_OUT[35:4] <
	      32'd64) ?
	       { 32'd0,
		 blueDMA_writeChannel_toMaster_reqGen_incomingBuffer$D_OUT[35:4] } :
	       _theResult____h5204 ;
  assign x__h5383 =
	     (blueDMA_writeChannel_toMaster_reqGen_intermediateBuffer$D_OUT[105:100] ==
	      6'd0) ?
	       _theResult____h5381 :
	       transfers_total__h5386 ;
  assign x__h5409 =
	     blueDMA_writeChannel_toMaster_reqGen_intermediateBuffer$D_OUT[35:4] -
	     y__h5412 ;
  assign x__h5610 =
	     13'd4096 -
	     { 1'd0,
	       blueDMA_writeChannel_toMaster_reqGen_intermediateBuffer2$D_OUT[47:36] } ;
  assign x__h5725 =
	     { 3'd0,
	       blueDMA_writeChannel_toMaster_reqGen_intermedi_ETC___d268[5:0] } ;
  assign x__h8632 =
	     blueDMA_writeChannel_toMaster_task_data_requests_reg[103:95] -
	     9'd1 ;
  assign x__h8642 =
	     blueDMA_writeChannel_toMaster_task_data_requests_reg[112:104] -
	     9'd1 ;
  assign x_address_dynamic__h198023 =
	     blueDMA_readChannel_fromMaster_task_data_requests_reg[37:17] +
	     21'd1 ;
  assign x_address_dynamic__h202795 =
	     blueDMA_readChannel_toMaster_task_data_requests_reg[37:17] +
	     21'd1 ;
  assign x_address_dynamic__h3972 =
	     blueDMA_writeChannel_fromMaster_task_data_requests_reg[37:17] +
	     21'd1 ;
  assign x_address_dynamic__h8747 =
	     blueDMA_writeChannel_toMaster_task_data_requests_reg[37:17] +
	     21'd1 ;
  assign x_requests_total__h198021 =
	     blueDMA_readChannel_fromMaster_task_data_requests_reg[94:69] -
	     26'd1 ;
  assign x_requests_total__h202793 =
	     blueDMA_readChannel_toMaster_task_data_requests_reg[94:69] -
	     26'd1 ;
  assign x_requests_total__h3970 =
	     blueDMA_writeChannel_fromMaster_task_data_requests_reg[94:69] -
	     26'd1 ;
  assign x_requests_total__h8745 =
	     blueDMA_writeChannel_toMaster_task_data_requests_reg[94:69] -
	     26'd1 ;
  assign x_strb__h203175 =
	     { x__h206070 <= 7'd63 &&
	       IF_blueDMA_readChannel_toMaster_task_data_outp_ETC___d1325 >
	       7'd63,
	       x__h206070 <= 7'd62 &&
	       IF_blueDMA_readChannel_toMaster_task_data_outp_ETC___d1325 >
	       7'd62,
	       x__h206070 <= 7'd61 &&
	       IF_blueDMA_readChannel_toMaster_task_data_outp_ETC___d1325 >
	       7'd61,
	       x__h206070 <= 7'd60 &&
	       IF_blueDMA_readChannel_toMaster_task_data_outp_ETC___d1325 >
	       7'd60,
	       x__h206070 <= 7'd59 &&
	       IF_blueDMA_readChannel_toMaster_task_data_outp_ETC___d1325 >
	       7'd59,
	       x__h206070 <= 7'd58 &&
	       IF_blueDMA_readChannel_toMaster_task_data_outp_ETC___d1325 >
	       7'd58,
	       x__h206070 <= 7'd57 &&
	       IF_blueDMA_readChannel_toMaster_task_data_outp_ETC___d1325 >
	       7'd57,
	       x__h206070 <= 7'd56 &&
	       IF_blueDMA_readChannel_toMaster_task_data_outp_ETC___d1325 >
	       7'd56,
	       x__h206070 <= 7'd55 &&
	       IF_blueDMA_readChannel_toMaster_task_data_outp_ETC___d1325 >
	       7'd55,
	       x__h206070 <= 7'd54 &&
	       IF_blueDMA_readChannel_toMaster_task_data_outp_ETC___d1325 >
	       7'd54,
	       x__h206070 <= 7'd53 &&
	       IF_blueDMA_readChannel_toMaster_task_data_outp_ETC___d1325 >
	       7'd53,
	       x__h206070 <= 7'd52 &&
	       IF_blueDMA_readChannel_toMaster_task_data_outp_ETC___d1325 >
	       7'd52,
	       x__h206070 <= 7'd51 &&
	       IF_blueDMA_readChannel_toMaster_task_data_outp_ETC___d1325 >
	       7'd51,
	       x__h206070 <= 7'd50 &&
	       IF_blueDMA_readChannel_toMaster_task_data_outp_ETC___d1325 >
	       7'd50,
	       x__h206070 <= 7'd49 &&
	       IF_blueDMA_readChannel_toMaster_task_data_outp_ETC___d1325 >
	       7'd49,
	       x__h206070 <= 7'd48 &&
	       IF_blueDMA_readChannel_toMaster_task_data_outp_ETC___d1325 >
	       7'd48,
	       x__h206070 <= 7'd47 &&
	       IF_blueDMA_readChannel_toMaster_task_data_outp_ETC___d1325 >
	       7'd47,
	       x__h206070 <= 7'd46 &&
	       IF_blueDMA_readChannel_toMaster_task_data_outp_ETC___d1325 >
	       7'd46,
	       x__h206070 <= 7'd45 &&
	       IF_blueDMA_readChannel_toMaster_task_data_outp_ETC___d1325 >
	       7'd45,
	       x__h206070 <= 7'd44 &&
	       IF_blueDMA_readChannel_toMaster_task_data_outp_ETC___d1325 >
	       7'd44,
	       x__h206070 <= 7'd43 &&
	       IF_blueDMA_readChannel_toMaster_task_data_outp_ETC___d1325 >
	       7'd43,
	       x__h206070 <= 7'd42 &&
	       IF_blueDMA_readChannel_toMaster_task_data_outp_ETC___d1325 >
	       7'd42,
	       x__h206070 <= 7'd41 &&
	       IF_blueDMA_readChannel_toMaster_task_data_outp_ETC___d1325 >
	       7'd41,
	       x__h206070 <= 7'd40 &&
	       IF_blueDMA_readChannel_toMaster_task_data_outp_ETC___d1325 >
	       7'd40,
	       x__h206070 <= 7'd39 &&
	       IF_blueDMA_readChannel_toMaster_task_data_outp_ETC___d1325 >
	       7'd39,
	       x__h206070 <= 7'd38 &&
	       IF_blueDMA_readChannel_toMaster_task_data_outp_ETC___d1325 >
	       7'd38,
	       x__h206070 <= 7'd37 &&
	       IF_blueDMA_readChannel_toMaster_task_data_outp_ETC___d1325 >
	       7'd37,
	       x__h206070 <= 7'd36 &&
	       IF_blueDMA_readChannel_toMaster_task_data_outp_ETC___d1325 >
	       7'd36,
	       x__h206070 <= 7'd35 &&
	       IF_blueDMA_readChannel_toMaster_task_data_outp_ETC___d1325 >
	       7'd35,
	       x__h206070 <= 7'd34 &&
	       IF_blueDMA_readChannel_toMaster_task_data_outp_ETC___d1325 >
	       7'd34,
	       x__h206070 <= 7'd33 &&
	       IF_blueDMA_readChannel_toMaster_task_data_outp_ETC___d1325 >
	       7'd33,
	       x__h206070 <= 7'd32 &&
	       IF_blueDMA_readChannel_toMaster_task_data_outp_ETC___d1325 >
	       7'd32,
	       x__h206070 <= 7'd31 &&
	       IF_blueDMA_readChannel_toMaster_task_data_outp_ETC___d1325 >
	       7'd31,
	       x__h206070 <= 7'd30 &&
	       IF_blueDMA_readChannel_toMaster_task_data_outp_ETC___d1325 >
	       7'd30,
	       x__h206070 <= 7'd29 &&
	       IF_blueDMA_readChannel_toMaster_task_data_outp_ETC___d1325 >
	       7'd29,
	       x__h206070 <= 7'd28 &&
	       IF_blueDMA_readChannel_toMaster_task_data_outp_ETC___d1325 >
	       7'd28,
	       x__h206070 <= 7'd27 &&
	       IF_blueDMA_readChannel_toMaster_task_data_outp_ETC___d1325 >
	       7'd27,
	       x__h206070 <= 7'd26 &&
	       IF_blueDMA_readChannel_toMaster_task_data_outp_ETC___d1325 >
	       7'd26,
	       x__h206070 <= 7'd25 &&
	       IF_blueDMA_readChannel_toMaster_task_data_outp_ETC___d1325 >
	       7'd25,
	       x__h206070 <= 7'd24 &&
	       IF_blueDMA_readChannel_toMaster_task_data_outp_ETC___d1325 >
	       7'd24,
	       x__h206070 <= 7'd23 &&
	       IF_blueDMA_readChannel_toMaster_task_data_outp_ETC___d1325 >
	       7'd23,
	       x__h206070 <= 7'd22 &&
	       IF_blueDMA_readChannel_toMaster_task_data_outp_ETC___d1325 >
	       7'd22,
	       x__h206070 <= 7'd21 &&
	       IF_blueDMA_readChannel_toMaster_task_data_outp_ETC___d1325 >
	       7'd21,
	       x__h206070 <= 7'd20 &&
	       IF_blueDMA_readChannel_toMaster_task_data_outp_ETC___d1325 >
	       7'd20,
	       x__h206070 <= 7'd19 &&
	       IF_blueDMA_readChannel_toMaster_task_data_outp_ETC___d1325 >
	       7'd19,
	       x__h206070 <= 7'd18 &&
	       IF_blueDMA_readChannel_toMaster_task_data_outp_ETC___d1325 >
	       7'd18,
	       x__h206070 <= 7'd17 &&
	       IF_blueDMA_readChannel_toMaster_task_data_outp_ETC___d1325 >
	       7'd17,
	       x__h206070 <= 7'd16 &&
	       IF_blueDMA_readChannel_toMaster_task_data_outp_ETC___d1325 >
	       7'd16,
	       x__h206070 <= 7'd15 &&
	       IF_blueDMA_readChannel_toMaster_task_data_outp_ETC___d1325 >
	       7'd15,
	       x__h206070 <= 7'd14 &&
	       IF_blueDMA_readChannel_toMaster_task_data_outp_ETC___d1325 >
	       7'd14,
	       x__h206070 <= 7'd13 &&
	       IF_blueDMA_readChannel_toMaster_task_data_outp_ETC___d1325 >
	       7'd13,
	       x__h206070 <= 7'd12 &&
	       IF_blueDMA_readChannel_toMaster_task_data_outp_ETC___d1325 >
	       7'd12,
	       x__h206070 <= 7'd11 &&
	       IF_blueDMA_readChannel_toMaster_task_data_outp_ETC___d1325 >
	       7'd11,
	       x__h206070 <= 7'd10 &&
	       IF_blueDMA_readChannel_toMaster_task_data_outp_ETC___d1325 >
	       7'd10,
	       x__h206070 <= 7'd9 &&
	       IF_blueDMA_readChannel_toMaster_task_data_outp_ETC___d1325 >
	       7'd9,
	       x__h206070 <= 7'd8 &&
	       IF_blueDMA_readChannel_toMaster_task_data_outp_ETC___d1325 >
	       7'd8,
	       x__h206070 <= 7'd7 &&
	       IF_blueDMA_readChannel_toMaster_task_data_outp_ETC___d1325 >
	       7'd7,
	       x__h206070 <= 7'd6 &&
	       IF_blueDMA_readChannel_toMaster_task_data_outp_ETC___d1325 >
	       7'd6,
	       x__h206070 <= 7'd5 &&
	       IF_blueDMA_readChannel_toMaster_task_data_outp_ETC___d1325 >
	       7'd5,
	       x__h206070 <= 7'd4 &&
	       IF_blueDMA_readChannel_toMaster_task_data_outp_ETC___d1325 >
	       7'd4,
	       x__h206070 <= 7'd3 &&
	       IF_blueDMA_readChannel_toMaster_task_data_outp_ETC___d1325 >
	       7'd3,
	       x__h206070 <= 7'd2 &&
	       IF_blueDMA_readChannel_toMaster_task_data_outp_ETC___d1325 >
	       7'd2,
	       x__h206070 <= 7'd1 &&
	       IF_blueDMA_readChannel_toMaster_task_data_outp_ETC___d1325 >
	       7'd1,
	       x__h206070 == 7'd0 &&
	       IF_blueDMA_readChannel_toMaster_task_data_outp_ETC___d1325 !=
	       7'd0 } ;
  assign x_strb__h9127 =
	     { x__h12022 <= 7'd63 &&
	       IF_blueDMA_writeChannel_toMaster_task_data_out_ETC___d412 >
	       7'd63,
	       x__h12022 <= 7'd62 &&
	       IF_blueDMA_writeChannel_toMaster_task_data_out_ETC___d412 >
	       7'd62,
	       x__h12022 <= 7'd61 &&
	       IF_blueDMA_writeChannel_toMaster_task_data_out_ETC___d412 >
	       7'd61,
	       x__h12022 <= 7'd60 &&
	       IF_blueDMA_writeChannel_toMaster_task_data_out_ETC___d412 >
	       7'd60,
	       x__h12022 <= 7'd59 &&
	       IF_blueDMA_writeChannel_toMaster_task_data_out_ETC___d412 >
	       7'd59,
	       x__h12022 <= 7'd58 &&
	       IF_blueDMA_writeChannel_toMaster_task_data_out_ETC___d412 >
	       7'd58,
	       x__h12022 <= 7'd57 &&
	       IF_blueDMA_writeChannel_toMaster_task_data_out_ETC___d412 >
	       7'd57,
	       x__h12022 <= 7'd56 &&
	       IF_blueDMA_writeChannel_toMaster_task_data_out_ETC___d412 >
	       7'd56,
	       x__h12022 <= 7'd55 &&
	       IF_blueDMA_writeChannel_toMaster_task_data_out_ETC___d412 >
	       7'd55,
	       x__h12022 <= 7'd54 &&
	       IF_blueDMA_writeChannel_toMaster_task_data_out_ETC___d412 >
	       7'd54,
	       x__h12022 <= 7'd53 &&
	       IF_blueDMA_writeChannel_toMaster_task_data_out_ETC___d412 >
	       7'd53,
	       x__h12022 <= 7'd52 &&
	       IF_blueDMA_writeChannel_toMaster_task_data_out_ETC___d412 >
	       7'd52,
	       x__h12022 <= 7'd51 &&
	       IF_blueDMA_writeChannel_toMaster_task_data_out_ETC___d412 >
	       7'd51,
	       x__h12022 <= 7'd50 &&
	       IF_blueDMA_writeChannel_toMaster_task_data_out_ETC___d412 >
	       7'd50,
	       x__h12022 <= 7'd49 &&
	       IF_blueDMA_writeChannel_toMaster_task_data_out_ETC___d412 >
	       7'd49,
	       x__h12022 <= 7'd48 &&
	       IF_blueDMA_writeChannel_toMaster_task_data_out_ETC___d412 >
	       7'd48,
	       x__h12022 <= 7'd47 &&
	       IF_blueDMA_writeChannel_toMaster_task_data_out_ETC___d412 >
	       7'd47,
	       x__h12022 <= 7'd46 &&
	       IF_blueDMA_writeChannel_toMaster_task_data_out_ETC___d412 >
	       7'd46,
	       x__h12022 <= 7'd45 &&
	       IF_blueDMA_writeChannel_toMaster_task_data_out_ETC___d412 >
	       7'd45,
	       x__h12022 <= 7'd44 &&
	       IF_blueDMA_writeChannel_toMaster_task_data_out_ETC___d412 >
	       7'd44,
	       x__h12022 <= 7'd43 &&
	       IF_blueDMA_writeChannel_toMaster_task_data_out_ETC___d412 >
	       7'd43,
	       x__h12022 <= 7'd42 &&
	       IF_blueDMA_writeChannel_toMaster_task_data_out_ETC___d412 >
	       7'd42,
	       x__h12022 <= 7'd41 &&
	       IF_blueDMA_writeChannel_toMaster_task_data_out_ETC___d412 >
	       7'd41,
	       x__h12022 <= 7'd40 &&
	       IF_blueDMA_writeChannel_toMaster_task_data_out_ETC___d412 >
	       7'd40,
	       x__h12022 <= 7'd39 &&
	       IF_blueDMA_writeChannel_toMaster_task_data_out_ETC___d412 >
	       7'd39,
	       x__h12022 <= 7'd38 &&
	       IF_blueDMA_writeChannel_toMaster_task_data_out_ETC___d412 >
	       7'd38,
	       x__h12022 <= 7'd37 &&
	       IF_blueDMA_writeChannel_toMaster_task_data_out_ETC___d412 >
	       7'd37,
	       x__h12022 <= 7'd36 &&
	       IF_blueDMA_writeChannel_toMaster_task_data_out_ETC___d412 >
	       7'd36,
	       x__h12022 <= 7'd35 &&
	       IF_blueDMA_writeChannel_toMaster_task_data_out_ETC___d412 >
	       7'd35,
	       x__h12022 <= 7'd34 &&
	       IF_blueDMA_writeChannel_toMaster_task_data_out_ETC___d412 >
	       7'd34,
	       x__h12022 <= 7'd33 &&
	       IF_blueDMA_writeChannel_toMaster_task_data_out_ETC___d412 >
	       7'd33,
	       x__h12022 <= 7'd32 &&
	       IF_blueDMA_writeChannel_toMaster_task_data_out_ETC___d412 >
	       7'd32,
	       x__h12022 <= 7'd31 &&
	       IF_blueDMA_writeChannel_toMaster_task_data_out_ETC___d412 >
	       7'd31,
	       x__h12022 <= 7'd30 &&
	       IF_blueDMA_writeChannel_toMaster_task_data_out_ETC___d412 >
	       7'd30,
	       x__h12022 <= 7'd29 &&
	       IF_blueDMA_writeChannel_toMaster_task_data_out_ETC___d412 >
	       7'd29,
	       x__h12022 <= 7'd28 &&
	       IF_blueDMA_writeChannel_toMaster_task_data_out_ETC___d412 >
	       7'd28,
	       x__h12022 <= 7'd27 &&
	       IF_blueDMA_writeChannel_toMaster_task_data_out_ETC___d412 >
	       7'd27,
	       x__h12022 <= 7'd26 &&
	       IF_blueDMA_writeChannel_toMaster_task_data_out_ETC___d412 >
	       7'd26,
	       x__h12022 <= 7'd25 &&
	       IF_blueDMA_writeChannel_toMaster_task_data_out_ETC___d412 >
	       7'd25,
	       x__h12022 <= 7'd24 &&
	       IF_blueDMA_writeChannel_toMaster_task_data_out_ETC___d412 >
	       7'd24,
	       x__h12022 <= 7'd23 &&
	       IF_blueDMA_writeChannel_toMaster_task_data_out_ETC___d412 >
	       7'd23,
	       x__h12022 <= 7'd22 &&
	       IF_blueDMA_writeChannel_toMaster_task_data_out_ETC___d412 >
	       7'd22,
	       x__h12022 <= 7'd21 &&
	       IF_blueDMA_writeChannel_toMaster_task_data_out_ETC___d412 >
	       7'd21,
	       x__h12022 <= 7'd20 &&
	       IF_blueDMA_writeChannel_toMaster_task_data_out_ETC___d412 >
	       7'd20,
	       x__h12022 <= 7'd19 &&
	       IF_blueDMA_writeChannel_toMaster_task_data_out_ETC___d412 >
	       7'd19,
	       x__h12022 <= 7'd18 &&
	       IF_blueDMA_writeChannel_toMaster_task_data_out_ETC___d412 >
	       7'd18,
	       x__h12022 <= 7'd17 &&
	       IF_blueDMA_writeChannel_toMaster_task_data_out_ETC___d412 >
	       7'd17,
	       x__h12022 <= 7'd16 &&
	       IF_blueDMA_writeChannel_toMaster_task_data_out_ETC___d412 >
	       7'd16,
	       x__h12022 <= 7'd15 &&
	       IF_blueDMA_writeChannel_toMaster_task_data_out_ETC___d412 >
	       7'd15,
	       x__h12022 <= 7'd14 &&
	       IF_blueDMA_writeChannel_toMaster_task_data_out_ETC___d412 >
	       7'd14,
	       x__h12022 <= 7'd13 &&
	       IF_blueDMA_writeChannel_toMaster_task_data_out_ETC___d412 >
	       7'd13,
	       x__h12022 <= 7'd12 &&
	       IF_blueDMA_writeChannel_toMaster_task_data_out_ETC___d412 >
	       7'd12,
	       x__h12022 <= 7'd11 &&
	       IF_blueDMA_writeChannel_toMaster_task_data_out_ETC___d412 >
	       7'd11,
	       x__h12022 <= 7'd10 &&
	       IF_blueDMA_writeChannel_toMaster_task_data_out_ETC___d412 >
	       7'd10,
	       x__h12022 <= 7'd9 &&
	       IF_blueDMA_writeChannel_toMaster_task_data_out_ETC___d412 >
	       7'd9,
	       x__h12022 <= 7'd8 &&
	       IF_blueDMA_writeChannel_toMaster_task_data_out_ETC___d412 >
	       7'd8,
	       x__h12022 <= 7'd7 &&
	       IF_blueDMA_writeChannel_toMaster_task_data_out_ETC___d412 >
	       7'd7,
	       x__h12022 <= 7'd6 &&
	       IF_blueDMA_writeChannel_toMaster_task_data_out_ETC___d412 >
	       7'd6,
	       x__h12022 <= 7'd5 &&
	       IF_blueDMA_writeChannel_toMaster_task_data_out_ETC___d412 >
	       7'd5,
	       x__h12022 <= 7'd4 &&
	       IF_blueDMA_writeChannel_toMaster_task_data_out_ETC___d412 >
	       7'd4,
	       x__h12022 <= 7'd3 &&
	       IF_blueDMA_writeChannel_toMaster_task_data_out_ETC___d412 >
	       7'd3,
	       x__h12022 <= 7'd2 &&
	       IF_blueDMA_writeChannel_toMaster_task_data_out_ETC___d412 >
	       7'd2,
	       x__h12022 <= 7'd1 &&
	       IF_blueDMA_writeChannel_toMaster_task_data_out_ETC___d412 >
	       7'd1,
	       x__h12022 == 7'd0 &&
	       IF_blueDMA_writeChannel_toMaster_task_data_out_ETC___d412 !=
	       7'd0 } ;
  assign x_transfers_total__h198356 =
	     blueDMA_readChannel_fromMaster_task_data_output_reg[32:7] -
	     26'd1 ;
  assign x_transfers_total__h20045 =
	     blueDMA_writeChannel_toMaster_task_data_output_reg[32:7] -
	     26'd1 ;
  assign x_transfers_total__h214093 =
	     blueDMA_readChannel_toMaster_task_data_output_reg[32:7] - 26'd1 ;
  assign x_transfers_total__h4305 =
	     blueDMA_writeChannel_fromMaster_task_data_output_reg[32:7] -
	     26'd1 ;
  assign y__h1203 = { 26'd0, x__h1136[5:0] } ;
  assign y__h1337 =
	     { 26'd0,
	       blueDMA_writeChannel_fromMaster_reqGen_intermediateBuffer$D_OUT[105:100] } ;
  assign y__h1339 =
	     { 26'd0,
	       blueDMA_writeChannel_fromMaster_reqGen_intermediateBuffer$D_OUT[111:106] } ;
  assign y__h1504 = { burst_length__h1481[5:0], 6'd0 } ;
  assign y__h195279 = { 26'd0, x__h195212[5:0] } ;
  assign y__h195413 =
	     { 26'd0,
	       blueDMA_readChannel_fromMaster_reqGen_intermediateBuffer$D_OUT[105:100] } ;
  assign y__h195415 =
	     { 26'd0,
	       blueDMA_readChannel_fromMaster_reqGen_intermediateBuffer$D_OUT[111:106] } ;
  assign y__h195580 = { burst_length__h195557[5:0], 6'd0 } ;
  assign y__h199327 = { 26'd0, x__h199260[5:0] } ;
  assign y__h199461 =
	     { 26'd0,
	       blueDMA_readChannel_toMaster_reqGen_intermediateBuffer$D_OUT[105:100] } ;
  assign y__h199463 =
	     { 26'd0,
	       blueDMA_readChannel_toMaster_reqGen_intermediateBuffer$D_OUT[111:106] } ;
  assign y__h199628 = { burst_length__h199605[5:0], 6'd0 } ;
  assign y__h5276 = { 26'd0, x__h5209[5:0] } ;
  assign y__h5410 =
	     { 26'd0,
	       blueDMA_writeChannel_toMaster_reqGen_intermediateBuffer$D_OUT[105:100] } ;
  assign y__h5412 =
	     { 26'd0,
	       blueDMA_writeChannel_toMaster_reqGen_intermediateBuffer$D_OUT[111:106] } ;
  assign y__h5577 = { burst_length__h5554[5:0], 6'd0 } ;
  always@(blueDMA_writeChannel_fromMaster_master_rd_warcache$wget)
  begin
    case (blueDMA_writeChannel_fromMaster_master_rd_warcache$wget)
      4'd1, 4'd2, 4'd3, 4'd10, 4'd14, 4'd15:
	  CASE_blueDMA_writeChannel_fromMaster_master_rd_ETC__q1 =
	      blueDMA_writeChannel_fromMaster_master_rd_warcache$wget;
      default: CASE_blueDMA_writeChannel_fromMaster_master_rd_ETC__q1 = 4'd11;
    endcase
  end
  always@(blueDMA_writeChannel_toMaster_master_wr_wawcache$wget)
  begin
    case (blueDMA_writeChannel_toMaster_master_wr_wawcache$wget)
      4'd1, 4'd2, 4'd3, 4'd6, 4'd7, 4'd14:
	  CASE_blueDMA_writeChannel_toMaster_master_wr_w_ETC__q2 =
	      blueDMA_writeChannel_toMaster_master_wr_wawcache$wget;
      default: CASE_blueDMA_writeChannel_toMaster_master_wr_w_ETC__q2 = 4'd15;
    endcase
  end
  always@(blueDMA_readChannel_fromMaster_master_rd_warcache$wget)
  begin
    case (blueDMA_readChannel_fromMaster_master_rd_warcache$wget)
      4'd1, 4'd2, 4'd3, 4'd10, 4'd14, 4'd15:
	  CASE_blueDMA_readChannel_fromMaster_master_rd__ETC__q3 =
	      blueDMA_readChannel_fromMaster_master_rd_warcache$wget;
      default: CASE_blueDMA_readChannel_fromMaster_master_rd__ETC__q3 = 4'd11;
    endcase
  end
  always@(blueDMA_readChannel_toMaster_master_wr_wawcache$wget)
  begin
    case (blueDMA_readChannel_toMaster_master_wr_wawcache$wget)
      4'd1, 4'd2, 4'd3, 4'd6, 4'd7, 4'd14:
	  CASE_blueDMA_readChannel_toMaster_master_wr_wa_ETC__q4 =
	      blueDMA_readChannel_toMaster_master_wr_wawcache$wget;
      default: CASE_blueDMA_readChannel_toMaster_master_wr_wa_ETC__q4 = 4'd15;
    endcase
  end

  // handling of inlined registers

  always@(posedge m32_axi_aclk)
  begin
    if (m32_axi_aresetn == `BSV_RESET_VALUE)
      begin
        blueDMA_readChannel_byteAlignerFrom_fetchedDatum <= `BSV_ASSIGNMENT_DELAY
	    1'd0;
	blueDMA_readChannel_fromLastCycle <= `BSV_ASSIGNMENT_DELAY 1'd0;
	blueDMA_readChannel_fromMaster_task_data_output_reg <= `BSV_ASSIGNMENT_DELAY
	    45'd0;
	blueDMA_readChannel_fromMaster_task_data_requests_reg <= `BSV_ASSIGNMENT_DELAY
	    113'd0;
	blueDMA_writeChannel_byteAlignerTo_fetchedDatum <= `BSV_ASSIGNMENT_DELAY
	    1'd0;
	blueDMA_writeChannel_mimo_words_left <= `BSV_ASSIGNMENT_DELAY 26'd0;
	blueDMA_writeChannel_toLastCycle <= `BSV_ASSIGNMENT_DELAY 1'd0;
	blueDMA_writeChannel_toMaster_beatsThisRequestCntr <= `BSV_ASSIGNMENT_DELAY
	    8'd0;
	blueDMA_writeChannel_toMaster_outstanding_writes <= `BSV_ASSIGNMENT_DELAY
	    8'd0;
	blueDMA_writeChannel_toMaster_task_data_output_reg <= `BSV_ASSIGNMENT_DELAY
	    45'd0;
	blueDMA_writeChannel_toMaster_task_data_requests_reg <= `BSV_ASSIGNMENT_DELAY
	    113'd0;
      end
    else
      begin
        if (blueDMA_readChannel_byteAlignerFrom_fetchedDatum$EN)
	  blueDMA_readChannel_byteAlignerFrom_fetchedDatum <= `BSV_ASSIGNMENT_DELAY
	      blueDMA_readChannel_byteAlignerFrom_fetchedDatum$D_IN;
	if (blueDMA_readChannel_fromLastCycle$EN)
	  blueDMA_readChannel_fromLastCycle <= `BSV_ASSIGNMENT_DELAY
	      blueDMA_readChannel_fromLastCycle$D_IN;
	if (blueDMA_readChannel_fromMaster_task_data_output_reg$EN)
	  blueDMA_readChannel_fromMaster_task_data_output_reg <= `BSV_ASSIGNMENT_DELAY
	      blueDMA_readChannel_fromMaster_task_data_output_reg$D_IN;
	if (blueDMA_readChannel_fromMaster_task_data_requests_reg$EN)
	  blueDMA_readChannel_fromMaster_task_data_requests_reg <= `BSV_ASSIGNMENT_DELAY
	      blueDMA_readChannel_fromMaster_task_data_requests_reg$D_IN;
	if (blueDMA_writeChannel_byteAlignerTo_fetchedDatum$EN)
	  blueDMA_writeChannel_byteAlignerTo_fetchedDatum <= `BSV_ASSIGNMENT_DELAY
	      blueDMA_writeChannel_byteAlignerTo_fetchedDatum$D_IN;
	if (blueDMA_writeChannel_mimo_words_left$EN)
	  blueDMA_writeChannel_mimo_words_left <= `BSV_ASSIGNMENT_DELAY
	      blueDMA_writeChannel_mimo_words_left$D_IN;
	if (blueDMA_writeChannel_toLastCycle$EN)
	  blueDMA_writeChannel_toLastCycle <= `BSV_ASSIGNMENT_DELAY
	      blueDMA_writeChannel_toLastCycle$D_IN;
	if (blueDMA_writeChannel_toMaster_beatsThisRequestCntr$EN)
	  blueDMA_writeChannel_toMaster_beatsThisRequestCntr <= `BSV_ASSIGNMENT_DELAY
	      blueDMA_writeChannel_toMaster_beatsThisRequestCntr$D_IN;
	if (blueDMA_writeChannel_toMaster_outstanding_writes$EN)
	  blueDMA_writeChannel_toMaster_outstanding_writes <= `BSV_ASSIGNMENT_DELAY
	      blueDMA_writeChannel_toMaster_outstanding_writes$D_IN;
	if (blueDMA_writeChannel_toMaster_task_data_output_reg$EN)
	  blueDMA_writeChannel_toMaster_task_data_output_reg <= `BSV_ASSIGNMENT_DELAY
	      blueDMA_writeChannel_toMaster_task_data_output_reg$D_IN;
	if (blueDMA_writeChannel_toMaster_task_data_requests_reg$EN)
	  blueDMA_writeChannel_toMaster_task_data_requests_reg <= `BSV_ASSIGNMENT_DELAY
	      blueDMA_writeChannel_toMaster_task_data_requests_reg$D_IN;
      end
    if (blueDMA_readChannel_byteAlignerFrom_buffer$EN)
      blueDMA_readChannel_byteAlignerFrom_buffer <= `BSV_ASSIGNMENT_DELAY
	  blueDMA_readChannel_byteAlignerFrom_buffer$D_IN;
    if (blueDMA_readChannel_byteAlignerFrom_bytes_in$EN)
      blueDMA_readChannel_byteAlignerFrom_bytes_in <= `BSV_ASSIGNMENT_DELAY
	  blueDMA_readChannel_byteAlignerFrom_bytes_in$D_IN;
    if (blueDMA_readChannel_byteAlignerFrom_bytes_left_in_buffer$EN)
      blueDMA_readChannel_byteAlignerFrom_bytes_left_in_buffer <= `BSV_ASSIGNMENT_DELAY
	  blueDMA_readChannel_byteAlignerFrom_bytes_left_in_buffer$D_IN;
    if (blueDMA_readChannel_byteAlignerFrom_bytes_out$EN)
      blueDMA_readChannel_byteAlignerFrom_bytes_out <= `BSV_ASSIGNMENT_DELAY
	  blueDMA_readChannel_byteAlignerFrom_bytes_out$D_IN;
    if (blueDMA_readChannel_byteAlignerFrom_bytes_out_needed$EN)
      blueDMA_readChannel_byteAlignerFrom_bytes_out_needed <= `BSV_ASSIGNMENT_DELAY
	  blueDMA_readChannel_byteAlignerFrom_bytes_out_needed$D_IN;
    if (blueDMA_readChannel_byteAlignerFrom_bytes_total$EN)
      blueDMA_readChannel_byteAlignerFrom_bytes_total <= `BSV_ASSIGNMENT_DELAY
	  blueDMA_readChannel_byteAlignerFrom_bytes_total$D_IN;
    if (blueDMA_writeChannel_byteAlignerTo_buffer$EN)
      blueDMA_writeChannel_byteAlignerTo_buffer <= `BSV_ASSIGNMENT_DELAY
	  blueDMA_writeChannel_byteAlignerTo_buffer$D_IN;
    if (blueDMA_writeChannel_byteAlignerTo_bytes_in$EN)
      blueDMA_writeChannel_byteAlignerTo_bytes_in <= `BSV_ASSIGNMENT_DELAY
	  blueDMA_writeChannel_byteAlignerTo_bytes_in$D_IN;
    if (blueDMA_writeChannel_byteAlignerTo_bytes_left_in_buffer$EN)
      blueDMA_writeChannel_byteAlignerTo_bytes_left_in_buffer <= `BSV_ASSIGNMENT_DELAY
	  blueDMA_writeChannel_byteAlignerTo_bytes_left_in_buffer$D_IN;
    if (blueDMA_writeChannel_byteAlignerTo_bytes_out$EN)
      blueDMA_writeChannel_byteAlignerTo_bytes_out <= `BSV_ASSIGNMENT_DELAY
	  blueDMA_writeChannel_byteAlignerTo_bytes_out$D_IN;
    if (blueDMA_writeChannel_byteAlignerTo_bytes_out_needed$EN)
      blueDMA_writeChannel_byteAlignerTo_bytes_out_needed <= `BSV_ASSIGNMENT_DELAY
	  blueDMA_writeChannel_byteAlignerTo_bytes_out_needed$D_IN;
    if (blueDMA_writeChannel_byteAlignerTo_bytes_total$EN)
      blueDMA_writeChannel_byteAlignerTo_bytes_total <= `BSV_ASSIGNMENT_DELAY
	  blueDMA_writeChannel_byteAlignerTo_bytes_total$D_IN;
  end

  always@(posedge m64_axi_aclk)
  begin
    if (m64_axi_aresetn == `BSV_RESET_VALUE)
      begin
        blueDMA_readChannel_byteAlignerTo_fetchedDatum <= `BSV_ASSIGNMENT_DELAY
	    1'd0;
	blueDMA_readChannel_mimo_words_left <= `BSV_ASSIGNMENT_DELAY 26'd0;
	blueDMA_readChannel_toLastCycle <= `BSV_ASSIGNMENT_DELAY 1'd0;
	blueDMA_readChannel_toMaster_beatsThisRequestCntr <= `BSV_ASSIGNMENT_DELAY
	    8'd0;
	blueDMA_readChannel_toMaster_outstanding_writes <= `BSV_ASSIGNMENT_DELAY
	    8'd0;
	blueDMA_readChannel_toMaster_task_data_output_reg <= `BSV_ASSIGNMENT_DELAY
	    45'd0;
	blueDMA_readChannel_toMaster_task_data_requests_reg <= `BSV_ASSIGNMENT_DELAY
	    113'd0;
	blueDMA_writeChannel_byteAlignerFrom_fetchedDatum <= `BSV_ASSIGNMENT_DELAY
	    1'd0;
	blueDMA_writeChannel_fromLastCycle <= `BSV_ASSIGNMENT_DELAY 1'd0;
	blueDMA_writeChannel_fromMaster_task_data_output_reg <= `BSV_ASSIGNMENT_DELAY
	    45'd0;
	blueDMA_writeChannel_fromMaster_task_data_requests_reg <= `BSV_ASSIGNMENT_DELAY
	    113'd0;
      end
    else
      begin
        if (blueDMA_readChannel_byteAlignerTo_fetchedDatum$EN)
	  blueDMA_readChannel_byteAlignerTo_fetchedDatum <= `BSV_ASSIGNMENT_DELAY
	      blueDMA_readChannel_byteAlignerTo_fetchedDatum$D_IN;
	if (blueDMA_readChannel_mimo_words_left$EN)
	  blueDMA_readChannel_mimo_words_left <= `BSV_ASSIGNMENT_DELAY
	      blueDMA_readChannel_mimo_words_left$D_IN;
	if (blueDMA_readChannel_toLastCycle$EN)
	  blueDMA_readChannel_toLastCycle <= `BSV_ASSIGNMENT_DELAY
	      blueDMA_readChannel_toLastCycle$D_IN;
	if (blueDMA_readChannel_toMaster_beatsThisRequestCntr$EN)
	  blueDMA_readChannel_toMaster_beatsThisRequestCntr <= `BSV_ASSIGNMENT_DELAY
	      blueDMA_readChannel_toMaster_beatsThisRequestCntr$D_IN;
	if (blueDMA_readChannel_toMaster_outstanding_writes$EN)
	  blueDMA_readChannel_toMaster_outstanding_writes <= `BSV_ASSIGNMENT_DELAY
	      blueDMA_readChannel_toMaster_outstanding_writes$D_IN;
	if (blueDMA_readChannel_toMaster_task_data_output_reg$EN)
	  blueDMA_readChannel_toMaster_task_data_output_reg <= `BSV_ASSIGNMENT_DELAY
	      blueDMA_readChannel_toMaster_task_data_output_reg$D_IN;
	if (blueDMA_readChannel_toMaster_task_data_requests_reg$EN)
	  blueDMA_readChannel_toMaster_task_data_requests_reg <= `BSV_ASSIGNMENT_DELAY
	      blueDMA_readChannel_toMaster_task_data_requests_reg$D_IN;
	if (blueDMA_writeChannel_byteAlignerFrom_fetchedDatum$EN)
	  blueDMA_writeChannel_byteAlignerFrom_fetchedDatum <= `BSV_ASSIGNMENT_DELAY
	      blueDMA_writeChannel_byteAlignerFrom_fetchedDatum$D_IN;
	if (blueDMA_writeChannel_fromLastCycle$EN)
	  blueDMA_writeChannel_fromLastCycle <= `BSV_ASSIGNMENT_DELAY
	      blueDMA_writeChannel_fromLastCycle$D_IN;
	if (blueDMA_writeChannel_fromMaster_task_data_output_reg$EN)
	  blueDMA_writeChannel_fromMaster_task_data_output_reg <= `BSV_ASSIGNMENT_DELAY
	      blueDMA_writeChannel_fromMaster_task_data_output_reg$D_IN;
	if (blueDMA_writeChannel_fromMaster_task_data_requests_reg$EN)
	  blueDMA_writeChannel_fromMaster_task_data_requests_reg <= `BSV_ASSIGNMENT_DELAY
	      blueDMA_writeChannel_fromMaster_task_data_requests_reg$D_IN;
      end
    if (blueDMA_readChannel_byteAlignerTo_buffer$EN)
      blueDMA_readChannel_byteAlignerTo_buffer <= `BSV_ASSIGNMENT_DELAY
	  blueDMA_readChannel_byteAlignerTo_buffer$D_IN;
    if (blueDMA_readChannel_byteAlignerTo_bytes_in$EN)
      blueDMA_readChannel_byteAlignerTo_bytes_in <= `BSV_ASSIGNMENT_DELAY
	  blueDMA_readChannel_byteAlignerTo_bytes_in$D_IN;
    if (blueDMA_readChannel_byteAlignerTo_bytes_left_in_buffer$EN)
      blueDMA_readChannel_byteAlignerTo_bytes_left_in_buffer <= `BSV_ASSIGNMENT_DELAY
	  blueDMA_readChannel_byteAlignerTo_bytes_left_in_buffer$D_IN;
    if (blueDMA_readChannel_byteAlignerTo_bytes_out$EN)
      blueDMA_readChannel_byteAlignerTo_bytes_out <= `BSV_ASSIGNMENT_DELAY
	  blueDMA_readChannel_byteAlignerTo_bytes_out$D_IN;
    if (blueDMA_readChannel_byteAlignerTo_bytes_out_needed$EN)
      blueDMA_readChannel_byteAlignerTo_bytes_out_needed <= `BSV_ASSIGNMENT_DELAY
	  blueDMA_readChannel_byteAlignerTo_bytes_out_needed$D_IN;
    if (blueDMA_readChannel_byteAlignerTo_bytes_total$EN)
      blueDMA_readChannel_byteAlignerTo_bytes_total <= `BSV_ASSIGNMENT_DELAY
	  blueDMA_readChannel_byteAlignerTo_bytes_total$D_IN;
    if (blueDMA_writeChannel_byteAlignerFrom_buffer$EN)
      blueDMA_writeChannel_byteAlignerFrom_buffer <= `BSV_ASSIGNMENT_DELAY
	  blueDMA_writeChannel_byteAlignerFrom_buffer$D_IN;
    if (blueDMA_writeChannel_byteAlignerFrom_bytes_in$EN)
      blueDMA_writeChannel_byteAlignerFrom_bytes_in <= `BSV_ASSIGNMENT_DELAY
	  blueDMA_writeChannel_byteAlignerFrom_bytes_in$D_IN;
    if (blueDMA_writeChannel_byteAlignerFrom_bytes_left_in_buffer$EN)
      blueDMA_writeChannel_byteAlignerFrom_bytes_left_in_buffer <= `BSV_ASSIGNMENT_DELAY
	  blueDMA_writeChannel_byteAlignerFrom_bytes_left_in_buffer$D_IN;
    if (blueDMA_writeChannel_byteAlignerFrom_bytes_out$EN)
      blueDMA_writeChannel_byteAlignerFrom_bytes_out <= `BSV_ASSIGNMENT_DELAY
	  blueDMA_writeChannel_byteAlignerFrom_bytes_out$D_IN;
    if (blueDMA_writeChannel_byteAlignerFrom_bytes_out_needed$EN)
      blueDMA_writeChannel_byteAlignerFrom_bytes_out_needed <= `BSV_ASSIGNMENT_DELAY
	  blueDMA_writeChannel_byteAlignerFrom_bytes_out_needed$D_IN;
    if (blueDMA_writeChannel_byteAlignerFrom_bytes_total$EN)
      blueDMA_writeChannel_byteAlignerFrom_bytes_total <= `BSV_ASSIGNMENT_DELAY
	  blueDMA_writeChannel_byteAlignerFrom_bytes_total$D_IN;
  end

  always@(posedge s_axi_aclk)
  begin
    if (s_axi_aresetn == `BSV_RESET_VALUE)
      begin
        blueDMA_fpga_addr <= `BSV_ASSIGNMENT_DELAY 64'd0;
	blueDMA_host_addr <= `BSV_ASSIGNMENT_DELAY 64'd0;
	blueDMA_id <= `BSV_ASSIGNMENT_DELAY 64'h204040400E5A0023;
	blueDMA_readChannel_cycleCounter <= `BSV_ASSIGNMENT_DELAY 32'd0;
	blueDMA_readChannel_doneInterruptReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	blueDMA_readChannel_opInProgress <= `BSV_ASSIGNMENT_DELAY 1'd0;
	blueDMA_readChannel_perf_cycleCounterCur <= `BSV_ASSIGNMENT_DELAY
	    32'd0;
	blueDMA_readChannel_perf_cycleCounterCurStart <= `BSV_ASSIGNMENT_DELAY
	    32'd0;
	blueDMA_readChannel_perf_cycleCounterInterval <= `BSV_ASSIGNMENT_DELAY
	    32'd0;
	blueDMA_readChannel_perf_cycleCounterIntervalStart <= `BSV_ASSIGNMENT_DELAY
	    32'd0;
	blueDMA_readChannel_perf_intervalCounter <= `BSV_ASSIGNMENT_DELAY
	    12'd0;
	blueDMA_readChannel_perf_intervalSet <= `BSV_ASSIGNMENT_DELAY 12'd0;
	blueDMA_readChannel_total_requests_reg <= `BSV_ASSIGNMENT_DELAY 32'd0;
	blueDMA_s_config_readBusy <= `BSV_ASSIGNMENT_DELAY 1'd0;
	blueDMA_s_config_writeBusy <= `BSV_ASSIGNMENT_DELAY 1'd0;
	blueDMA_s_config_writeSlave_addrIn_rv <= `BSV_ASSIGNMENT_DELAY
	    68'h2AAAAAAAAAAAAAAAA;
	blueDMA_s_config_writeSlave_dataIn_rv <= `BSV_ASSIGNMENT_DELAY
	    73'h0AAAAAAAAAAAAAAAAAA;
	blueDMA_transfer_length <= `BSV_ASSIGNMENT_DELAY 64'd0;
	blueDMA_writeChannel_cycleCounter <= `BSV_ASSIGNMENT_DELAY 32'd0;
	blueDMA_writeChannel_doneInterruptReg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	blueDMA_writeChannel_opInProgress <= `BSV_ASSIGNMENT_DELAY 1'd0;
	blueDMA_writeChannel_perf_cycleCounterCur <= `BSV_ASSIGNMENT_DELAY
	    32'd0;
	blueDMA_writeChannel_perf_cycleCounterCurStart <= `BSV_ASSIGNMENT_DELAY
	    32'd0;
	blueDMA_writeChannel_perf_cycleCounterInterval <= `BSV_ASSIGNMENT_DELAY
	    32'd0;
	blueDMA_writeChannel_perf_cycleCounterIntervalStart <= `BSV_ASSIGNMENT_DELAY
	    32'd0;
	blueDMA_writeChannel_perf_intervalCounter <= `BSV_ASSIGNMENT_DELAY
	    12'd0;
	blueDMA_writeChannel_perf_intervalSet <= `BSV_ASSIGNMENT_DELAY 12'd0;
	blueDMA_writeChannel_total_requests_reg <= `BSV_ASSIGNMENT_DELAY
	    32'd0;
      end
    else
      begin
        if (blueDMA_fpga_addr$EN)
	  blueDMA_fpga_addr <= `BSV_ASSIGNMENT_DELAY blueDMA_fpga_addr$D_IN;
	if (blueDMA_host_addr$EN)
	  blueDMA_host_addr <= `BSV_ASSIGNMENT_DELAY blueDMA_host_addr$D_IN;
	if (blueDMA_id$EN)
	  blueDMA_id <= `BSV_ASSIGNMENT_DELAY blueDMA_id$D_IN;
	if (blueDMA_readChannel_cycleCounter$EN)
	  blueDMA_readChannel_cycleCounter <= `BSV_ASSIGNMENT_DELAY
	      blueDMA_readChannel_cycleCounter$D_IN;
	if (blueDMA_readChannel_doneInterruptReg$EN)
	  blueDMA_readChannel_doneInterruptReg <= `BSV_ASSIGNMENT_DELAY
	      blueDMA_readChannel_doneInterruptReg$D_IN;
	if (blueDMA_readChannel_opInProgress$EN)
	  blueDMA_readChannel_opInProgress <= `BSV_ASSIGNMENT_DELAY
	      blueDMA_readChannel_opInProgress$D_IN;
	if (blueDMA_readChannel_perf_cycleCounterCur$EN)
	  blueDMA_readChannel_perf_cycleCounterCur <= `BSV_ASSIGNMENT_DELAY
	      blueDMA_readChannel_perf_cycleCounterCur$D_IN;
	if (blueDMA_readChannel_perf_cycleCounterCurStart$EN)
	  blueDMA_readChannel_perf_cycleCounterCurStart <= `BSV_ASSIGNMENT_DELAY
	      blueDMA_readChannel_perf_cycleCounterCurStart$D_IN;
	if (blueDMA_readChannel_perf_cycleCounterInterval$EN)
	  blueDMA_readChannel_perf_cycleCounterInterval <= `BSV_ASSIGNMENT_DELAY
	      blueDMA_readChannel_perf_cycleCounterInterval$D_IN;
	if (blueDMA_readChannel_perf_cycleCounterIntervalStart$EN)
	  blueDMA_readChannel_perf_cycleCounterIntervalStart <= `BSV_ASSIGNMENT_DELAY
	      blueDMA_readChannel_perf_cycleCounterIntervalStart$D_IN;
	if (blueDMA_readChannel_perf_intervalCounter$EN)
	  blueDMA_readChannel_perf_intervalCounter <= `BSV_ASSIGNMENT_DELAY
	      blueDMA_readChannel_perf_intervalCounter$D_IN;
	if (blueDMA_readChannel_perf_intervalSet$EN)
	  blueDMA_readChannel_perf_intervalSet <= `BSV_ASSIGNMENT_DELAY
	      blueDMA_readChannel_perf_intervalSet$D_IN;
	if (blueDMA_readChannel_total_requests_reg$EN)
	  blueDMA_readChannel_total_requests_reg <= `BSV_ASSIGNMENT_DELAY
	      blueDMA_readChannel_total_requests_reg$D_IN;
	if (blueDMA_s_config_readBusy$EN)
	  blueDMA_s_config_readBusy <= `BSV_ASSIGNMENT_DELAY
	      blueDMA_s_config_readBusy$D_IN;
	if (blueDMA_s_config_writeBusy$EN)
	  blueDMA_s_config_writeBusy <= `BSV_ASSIGNMENT_DELAY
	      blueDMA_s_config_writeBusy$D_IN;
	if (blueDMA_s_config_writeSlave_addrIn_rv$EN)
	  blueDMA_s_config_writeSlave_addrIn_rv <= `BSV_ASSIGNMENT_DELAY
	      blueDMA_s_config_writeSlave_addrIn_rv$D_IN;
	if (blueDMA_s_config_writeSlave_dataIn_rv$EN)
	  blueDMA_s_config_writeSlave_dataIn_rv <= `BSV_ASSIGNMENT_DELAY
	      blueDMA_s_config_writeSlave_dataIn_rv$D_IN;
	if (blueDMA_transfer_length$EN)
	  blueDMA_transfer_length <= `BSV_ASSIGNMENT_DELAY
	      blueDMA_transfer_length$D_IN;
	if (blueDMA_writeChannel_cycleCounter$EN)
	  blueDMA_writeChannel_cycleCounter <= `BSV_ASSIGNMENT_DELAY
	      blueDMA_writeChannel_cycleCounter$D_IN;
	if (blueDMA_writeChannel_doneInterruptReg$EN)
	  blueDMA_writeChannel_doneInterruptReg <= `BSV_ASSIGNMENT_DELAY
	      blueDMA_writeChannel_doneInterruptReg$D_IN;
	if (blueDMA_writeChannel_opInProgress$EN)
	  blueDMA_writeChannel_opInProgress <= `BSV_ASSIGNMENT_DELAY
	      blueDMA_writeChannel_opInProgress$D_IN;
	if (blueDMA_writeChannel_perf_cycleCounterCur$EN)
	  blueDMA_writeChannel_perf_cycleCounterCur <= `BSV_ASSIGNMENT_DELAY
	      blueDMA_writeChannel_perf_cycleCounterCur$D_IN;
	if (blueDMA_writeChannel_perf_cycleCounterCurStart$EN)
	  blueDMA_writeChannel_perf_cycleCounterCurStart <= `BSV_ASSIGNMENT_DELAY
	      blueDMA_writeChannel_perf_cycleCounterCurStart$D_IN;
	if (blueDMA_writeChannel_perf_cycleCounterInterval$EN)
	  blueDMA_writeChannel_perf_cycleCounterInterval <= `BSV_ASSIGNMENT_DELAY
	      blueDMA_writeChannel_perf_cycleCounterInterval$D_IN;
	if (blueDMA_writeChannel_perf_cycleCounterIntervalStart$EN)
	  blueDMA_writeChannel_perf_cycleCounterIntervalStart <= `BSV_ASSIGNMENT_DELAY
	      blueDMA_writeChannel_perf_cycleCounterIntervalStart$D_IN;
	if (blueDMA_writeChannel_perf_intervalCounter$EN)
	  blueDMA_writeChannel_perf_intervalCounter <= `BSV_ASSIGNMENT_DELAY
	      blueDMA_writeChannel_perf_intervalCounter$D_IN;
	if (blueDMA_writeChannel_perf_intervalSet$EN)
	  blueDMA_writeChannel_perf_intervalSet <= `BSV_ASSIGNMENT_DELAY
	      blueDMA_writeChannel_perf_intervalSet$D_IN;
	if (blueDMA_writeChannel_total_requests_reg$EN)
	  blueDMA_writeChannel_total_requests_reg <= `BSV_ASSIGNMENT_DELAY
	      blueDMA_writeChannel_total_requests_reg$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    blueDMA_fpga_addr = 64'hAAAAAAAAAAAAAAAA;
    blueDMA_host_addr = 64'hAAAAAAAAAAAAAAAA;
    blueDMA_id = 64'hAAAAAAAAAAAAAAAA;
    blueDMA_readChannel_byteAlignerFrom_buffer =
	1024'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    blueDMA_readChannel_byteAlignerFrom_bytes_in = 32'hAAAAAAAA;
    blueDMA_readChannel_byteAlignerFrom_bytes_left_in_buffer = 7'h2A;
    blueDMA_readChannel_byteAlignerFrom_bytes_out = 32'hAAAAAAAA;
    blueDMA_readChannel_byteAlignerFrom_bytes_out_needed = 7'h2A;
    blueDMA_readChannel_byteAlignerFrom_bytes_total = 32'hAAAAAAAA;
    blueDMA_readChannel_byteAlignerFrom_fetchedDatum = 1'h0;
    blueDMA_readChannel_byteAlignerTo_buffer =
	1024'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    blueDMA_readChannel_byteAlignerTo_bytes_in = 32'hAAAAAAAA;
    blueDMA_readChannel_byteAlignerTo_bytes_left_in_buffer = 7'h2A;
    blueDMA_readChannel_byteAlignerTo_bytes_out = 32'hAAAAAAAA;
    blueDMA_readChannel_byteAlignerTo_bytes_out_needed = 7'h2A;
    blueDMA_readChannel_byteAlignerTo_bytes_total = 32'hAAAAAAAA;
    blueDMA_readChannel_byteAlignerTo_fetchedDatum = 1'h0;
    blueDMA_readChannel_cycleCounter = 32'hAAAAAAAA;
    blueDMA_readChannel_doneInterruptReg = 1'h0;
    blueDMA_readChannel_fromLastCycle = 1'h0;
    blueDMA_readChannel_fromMaster_task_data_output_reg = 45'h0AAAAAAAAAAA;
    blueDMA_readChannel_fromMaster_task_data_requests_reg =
	113'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    blueDMA_readChannel_mimo_words_left = 26'h2AAAAAA;
    blueDMA_readChannel_opInProgress = 1'h0;
    blueDMA_readChannel_perf_cycleCounterCur = 32'hAAAAAAAA;
    blueDMA_readChannel_perf_cycleCounterCurStart = 32'hAAAAAAAA;
    blueDMA_readChannel_perf_cycleCounterInterval = 32'hAAAAAAAA;
    blueDMA_readChannel_perf_cycleCounterIntervalStart = 32'hAAAAAAAA;
    blueDMA_readChannel_perf_intervalCounter = 12'hAAA;
    blueDMA_readChannel_perf_intervalSet = 12'hAAA;
    blueDMA_readChannel_toLastCycle = 1'h0;
    blueDMA_readChannel_toMaster_beatsThisRequestCntr = 8'hAA;
    blueDMA_readChannel_toMaster_outstanding_writes = 8'hAA;
    blueDMA_readChannel_toMaster_task_data_output_reg = 45'h0AAAAAAAAAAA;
    blueDMA_readChannel_toMaster_task_data_requests_reg =
	113'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    blueDMA_readChannel_total_requests_reg = 32'hAAAAAAAA;
    blueDMA_s_config_readBusy = 1'h0;
    blueDMA_s_config_writeBusy = 1'h0;
    blueDMA_s_config_writeSlave_addrIn_rv = 68'hAAAAAAAAAAAAAAAAA;
    blueDMA_s_config_writeSlave_dataIn_rv = 73'h0AAAAAAAAAAAAAAAAAA;
    blueDMA_transfer_length = 64'hAAAAAAAAAAAAAAAA;
    blueDMA_writeChannel_byteAlignerFrom_buffer =
	1024'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    blueDMA_writeChannel_byteAlignerFrom_bytes_in = 32'hAAAAAAAA;
    blueDMA_writeChannel_byteAlignerFrom_bytes_left_in_buffer = 7'h2A;
    blueDMA_writeChannel_byteAlignerFrom_bytes_out = 32'hAAAAAAAA;
    blueDMA_writeChannel_byteAlignerFrom_bytes_out_needed = 7'h2A;
    blueDMA_writeChannel_byteAlignerFrom_bytes_total = 32'hAAAAAAAA;
    blueDMA_writeChannel_byteAlignerFrom_fetchedDatum = 1'h0;
    blueDMA_writeChannel_byteAlignerTo_buffer =
	1024'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    blueDMA_writeChannel_byteAlignerTo_bytes_in = 32'hAAAAAAAA;
    blueDMA_writeChannel_byteAlignerTo_bytes_left_in_buffer = 7'h2A;
    blueDMA_writeChannel_byteAlignerTo_bytes_out = 32'hAAAAAAAA;
    blueDMA_writeChannel_byteAlignerTo_bytes_out_needed = 7'h2A;
    blueDMA_writeChannel_byteAlignerTo_bytes_total = 32'hAAAAAAAA;
    blueDMA_writeChannel_byteAlignerTo_fetchedDatum = 1'h0;
    blueDMA_writeChannel_cycleCounter = 32'hAAAAAAAA;
    blueDMA_writeChannel_doneInterruptReg = 1'h0;
    blueDMA_writeChannel_fromLastCycle = 1'h0;
    blueDMA_writeChannel_fromMaster_task_data_output_reg = 45'h0AAAAAAAAAAA;
    blueDMA_writeChannel_fromMaster_task_data_requests_reg =
	113'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    blueDMA_writeChannel_mimo_words_left = 26'h2AAAAAA;
    blueDMA_writeChannel_opInProgress = 1'h0;
    blueDMA_writeChannel_perf_cycleCounterCur = 32'hAAAAAAAA;
    blueDMA_writeChannel_perf_cycleCounterCurStart = 32'hAAAAAAAA;
    blueDMA_writeChannel_perf_cycleCounterInterval = 32'hAAAAAAAA;
    blueDMA_writeChannel_perf_cycleCounterIntervalStart = 32'hAAAAAAAA;
    blueDMA_writeChannel_perf_intervalCounter = 12'hAAA;
    blueDMA_writeChannel_perf_intervalSet = 12'hAAA;
    blueDMA_writeChannel_toLastCycle = 1'h0;
    blueDMA_writeChannel_toMaster_beatsThisRequestCntr = 8'hAA;
    blueDMA_writeChannel_toMaster_outstanding_writes = 8'hAA;
    blueDMA_writeChannel_toMaster_task_data_output_reg = 45'h0AAAAAAAAAAA;
    blueDMA_writeChannel_toMaster_task_data_requests_reg =
	113'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    blueDMA_writeChannel_total_requests_reg = 32'hAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge s_axi_aclk)
  begin
    #0;
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_1 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_1) &&
	  (WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_2 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_2 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_3 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_3 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_4 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_4 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_5 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_5 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_6 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_6 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_7 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_7 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_8 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_8 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_9 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_9 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_10 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_10 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_11 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_11))
	$display("Error: \"/home/wimi/jah/projects/Bluespec/done/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 161, column 18: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_blueDMA_s_config_axiReadSpecial_1,\n  RL_blueDMA_s_config_axiReadSpecialIsHandled_1] and\n  [RL_blueDMA_s_config_axiReadSpecial_2,\n  RL_blueDMA_s_config_axiReadSpecialIsHandled_2,\n  RL_blueDMA_s_config_axiReadSpecial_3,\n  RL_blueDMA_s_config_axiReadSpecialIsHandled_3,\n  RL_blueDMA_s_config_axiReadSpecial_4,\n  RL_blueDMA_s_config_axiReadSpecialIsHandled_4,\n  RL_blueDMA_s_config_axiReadSpecial_5,\n  RL_blueDMA_s_config_axiReadSpecialIsHandled_5,\n  RL_blueDMA_s_config_axiReadSpecial_6,\n  RL_blueDMA_s_config_axiReadSpecialIsHandled_6,\n  RL_blueDMA_s_config_axiReadSpecial_7,\n  RL_blueDMA_s_config_axiReadSpecialIsHandled_7,\n  RL_blueDMA_s_config_axiReadSpecial_8,\n  RL_blueDMA_s_config_axiReadSpecialIsHandled_8,\n  RL_blueDMA_s_config_axiReadSpecial_9,\n  RL_blueDMA_s_config_axiReadSpecialIsHandled_9,\n  RL_blueDMA_s_config_axiReadSpecial_10,\n  RL_blueDMA_s_config_axiReadSpecialIsHandled_10,\n  RL_blueDMA_s_config_axiReadSpecial_11,\n  RL_blueDMA_s_config_axiReadSpecialIsHandled_11] ) fired in the same clock\n  cycle.\n");
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_2 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_2) &&
	  (WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_3 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_3 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_4 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_4 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_5 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_5 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_6 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_6 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_7 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_7 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_8 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_8 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_9 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_9 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_10 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_10 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_11 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_11))
	$display("Error: \"/home/wimi/jah/projects/Bluespec/done/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 161, column 18: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_blueDMA_s_config_axiReadSpecial_2,\n  RL_blueDMA_s_config_axiReadSpecialIsHandled_2] and\n  [RL_blueDMA_s_config_axiReadSpecial_3,\n  RL_blueDMA_s_config_axiReadSpecialIsHandled_3,\n  RL_blueDMA_s_config_axiReadSpecial_4,\n  RL_blueDMA_s_config_axiReadSpecialIsHandled_4,\n  RL_blueDMA_s_config_axiReadSpecial_5,\n  RL_blueDMA_s_config_axiReadSpecialIsHandled_5,\n  RL_blueDMA_s_config_axiReadSpecial_6,\n  RL_blueDMA_s_config_axiReadSpecialIsHandled_6,\n  RL_blueDMA_s_config_axiReadSpecial_7,\n  RL_blueDMA_s_config_axiReadSpecialIsHandled_7,\n  RL_blueDMA_s_config_axiReadSpecial_8,\n  RL_blueDMA_s_config_axiReadSpecialIsHandled_8,\n  RL_blueDMA_s_config_axiReadSpecial_9,\n  RL_blueDMA_s_config_axiReadSpecialIsHandled_9,\n  RL_blueDMA_s_config_axiReadSpecial_10,\n  RL_blueDMA_s_config_axiReadSpecialIsHandled_10,\n  RL_blueDMA_s_config_axiReadSpecial_11,\n  RL_blueDMA_s_config_axiReadSpecialIsHandled_11] ) fired in the same clock\n  cycle.\n");
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_3 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_3) &&
	  (WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_4 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_4 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_5 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_5 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_6 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_6 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_7 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_7 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_8 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_8 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_9 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_9 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_10 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_10 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_11 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_11))
	$display("Error: \"/home/wimi/jah/projects/Bluespec/done/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 161, column 18: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_blueDMA_s_config_axiReadSpecial_3,\n  RL_blueDMA_s_config_axiReadSpecialIsHandled_3] and\n  [RL_blueDMA_s_config_axiReadSpecial_4,\n  RL_blueDMA_s_config_axiReadSpecialIsHandled_4,\n  RL_blueDMA_s_config_axiReadSpecial_5,\n  RL_blueDMA_s_config_axiReadSpecialIsHandled_5,\n  RL_blueDMA_s_config_axiReadSpecial_6,\n  RL_blueDMA_s_config_axiReadSpecialIsHandled_6,\n  RL_blueDMA_s_config_axiReadSpecial_7,\n  RL_blueDMA_s_config_axiReadSpecialIsHandled_7,\n  RL_blueDMA_s_config_axiReadSpecial_8,\n  RL_blueDMA_s_config_axiReadSpecialIsHandled_8,\n  RL_blueDMA_s_config_axiReadSpecial_9,\n  RL_blueDMA_s_config_axiReadSpecialIsHandled_9,\n  RL_blueDMA_s_config_axiReadSpecial_10,\n  RL_blueDMA_s_config_axiReadSpecialIsHandled_10,\n  RL_blueDMA_s_config_axiReadSpecial_11,\n  RL_blueDMA_s_config_axiReadSpecialIsHandled_11] ) fired in the same clock\n  cycle.\n");
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_4 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_4) &&
	  (WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_5 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_5 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_6 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_6 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_7 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_7 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_8 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_8 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_9 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_9 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_10 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_10 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_11 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_11))
	$display("Error: \"/home/wimi/jah/projects/Bluespec/done/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 161, column 18: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_blueDMA_s_config_axiReadSpecial_4,\n  RL_blueDMA_s_config_axiReadSpecialIsHandled_4] and\n  [RL_blueDMA_s_config_axiReadSpecial_5,\n  RL_blueDMA_s_config_axiReadSpecialIsHandled_5,\n  RL_blueDMA_s_config_axiReadSpecial_6,\n  RL_blueDMA_s_config_axiReadSpecialIsHandled_6,\n  RL_blueDMA_s_config_axiReadSpecial_7,\n  RL_blueDMA_s_config_axiReadSpecialIsHandled_7,\n  RL_blueDMA_s_config_axiReadSpecial_8,\n  RL_blueDMA_s_config_axiReadSpecialIsHandled_8,\n  RL_blueDMA_s_config_axiReadSpecial_9,\n  RL_blueDMA_s_config_axiReadSpecialIsHandled_9,\n  RL_blueDMA_s_config_axiReadSpecial_10,\n  RL_blueDMA_s_config_axiReadSpecialIsHandled_10,\n  RL_blueDMA_s_config_axiReadSpecial_11,\n  RL_blueDMA_s_config_axiReadSpecialIsHandled_11] ) fired in the same clock\n  cycle.\n");
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_5 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_5) &&
	  (WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_6 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_6 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_7 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_7 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_8 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_8 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_9 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_9 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_10 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_10 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_11 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_11))
	$display("Error: \"/home/wimi/jah/projects/Bluespec/done/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 161, column 18: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_blueDMA_s_config_axiReadSpecial_5,\n  RL_blueDMA_s_config_axiReadSpecialIsHandled_5] and\n  [RL_blueDMA_s_config_axiReadSpecial_6,\n  RL_blueDMA_s_config_axiReadSpecialIsHandled_6,\n  RL_blueDMA_s_config_axiReadSpecial_7,\n  RL_blueDMA_s_config_axiReadSpecialIsHandled_7,\n  RL_blueDMA_s_config_axiReadSpecial_8,\n  RL_blueDMA_s_config_axiReadSpecialIsHandled_8,\n  RL_blueDMA_s_config_axiReadSpecial_9,\n  RL_blueDMA_s_config_axiReadSpecialIsHandled_9,\n  RL_blueDMA_s_config_axiReadSpecial_10,\n  RL_blueDMA_s_config_axiReadSpecialIsHandled_10,\n  RL_blueDMA_s_config_axiReadSpecial_11,\n  RL_blueDMA_s_config_axiReadSpecialIsHandled_11] ) fired in the same clock\n  cycle.\n");
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_6 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_6) &&
	  (WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_7 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_7 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_8 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_8 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_9 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_9 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_10 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_10 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_11 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_11))
	$display("Error: \"/home/wimi/jah/projects/Bluespec/done/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 161, column 18: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_blueDMA_s_config_axiReadSpecial_6,\n  RL_blueDMA_s_config_axiReadSpecialIsHandled_6] and\n  [RL_blueDMA_s_config_axiReadSpecial_7,\n  RL_blueDMA_s_config_axiReadSpecialIsHandled_7,\n  RL_blueDMA_s_config_axiReadSpecial_8,\n  RL_blueDMA_s_config_axiReadSpecialIsHandled_8,\n  RL_blueDMA_s_config_axiReadSpecial_9,\n  RL_blueDMA_s_config_axiReadSpecialIsHandled_9,\n  RL_blueDMA_s_config_axiReadSpecial_10,\n  RL_blueDMA_s_config_axiReadSpecialIsHandled_10,\n  RL_blueDMA_s_config_axiReadSpecial_11,\n  RL_blueDMA_s_config_axiReadSpecialIsHandled_11] ) fired in the same clock\n  cycle.\n");
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_7 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_7) &&
	  (WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_8 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_8 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_9 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_9 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_10 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_10 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_11 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_11))
	$display("Error: \"/home/wimi/jah/projects/Bluespec/done/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 161, column 18: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_blueDMA_s_config_axiReadSpecial_7,\n  RL_blueDMA_s_config_axiReadSpecialIsHandled_7] and\n  [RL_blueDMA_s_config_axiReadSpecial_8,\n  RL_blueDMA_s_config_axiReadSpecialIsHandled_8,\n  RL_blueDMA_s_config_axiReadSpecial_9,\n  RL_blueDMA_s_config_axiReadSpecialIsHandled_9,\n  RL_blueDMA_s_config_axiReadSpecial_10,\n  RL_blueDMA_s_config_axiReadSpecialIsHandled_10,\n  RL_blueDMA_s_config_axiReadSpecial_11,\n  RL_blueDMA_s_config_axiReadSpecialIsHandled_11] ) fired in the same clock\n  cycle.\n");
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_8 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_8) &&
	  (WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_9 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_9 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_10 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_10 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_11 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_11))
	$display("Error: \"/home/wimi/jah/projects/Bluespec/done/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 161, column 18: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_blueDMA_s_config_axiReadSpecial_8,\n  RL_blueDMA_s_config_axiReadSpecialIsHandled_8] and\n  [RL_blueDMA_s_config_axiReadSpecial_9,\n  RL_blueDMA_s_config_axiReadSpecialIsHandled_9,\n  RL_blueDMA_s_config_axiReadSpecial_10,\n  RL_blueDMA_s_config_axiReadSpecialIsHandled_10,\n  RL_blueDMA_s_config_axiReadSpecial_11,\n  RL_blueDMA_s_config_axiReadSpecialIsHandled_11] ) fired in the same clock\n  cycle.\n");
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_9 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_9) &&
	  (WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_10 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_10 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_11 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_11))
	$display("Error: \"/home/wimi/jah/projects/Bluespec/done/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 161, column 18: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_blueDMA_s_config_axiReadSpecial_9,\n  RL_blueDMA_s_config_axiReadSpecialIsHandled_9] and\n  [RL_blueDMA_s_config_axiReadSpecial_10,\n  RL_blueDMA_s_config_axiReadSpecialIsHandled_10,\n  RL_blueDMA_s_config_axiReadSpecial_11,\n  RL_blueDMA_s_config_axiReadSpecialIsHandled_11] ) fired in the same clock\n  cycle.\n");
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_10 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_10) &&
	  (WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_11 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_11))
	$display("Error: \"/home/wimi/jah/projects/Bluespec/done/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 161, column 18: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_blueDMA_s_config_axiReadSpecial_10,\n  RL_blueDMA_s_config_axiReadSpecialIsHandled_10] and\n  [RL_blueDMA_s_config_axiReadSpecial_11,\n  RL_blueDMA_s_config_axiReadSpecialIsHandled_11] ) fired in the same clock\n  cycle.\n");
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled) &&
	  (WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_1 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_1 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_2 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_2 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_3 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_3 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_4 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_4 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_5 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_5 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_6 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_6 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_7 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_7 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_8 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_8 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_9 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_9 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_10 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_10 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_11 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_11))
	$display("Error: \"/home/wimi/jah/projects/Bluespec/done/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 161, column 18: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_blueDMA_s_config_axiReadSpecial,\n  RL_blueDMA_s_config_axiReadSpecialIsHandled] and\n  [RL_blueDMA_s_config_axiReadSpecial_1,\n  RL_blueDMA_s_config_axiReadSpecialIsHandled_1,\n  RL_blueDMA_s_config_axiReadSpecial_2,\n  RL_blueDMA_s_config_axiReadSpecialIsHandled_2,\n  RL_blueDMA_s_config_axiReadSpecial_3,\n  RL_blueDMA_s_config_axiReadSpecialIsHandled_3,\n  RL_blueDMA_s_config_axiReadSpecial_4,\n  RL_blueDMA_s_config_axiReadSpecialIsHandled_4,\n  RL_blueDMA_s_config_axiReadSpecial_5,\n  RL_blueDMA_s_config_axiReadSpecialIsHandled_5,\n  RL_blueDMA_s_config_axiReadSpecial_6,\n  RL_blueDMA_s_config_axiReadSpecialIsHandled_6,\n  RL_blueDMA_s_config_axiReadSpecial_7,\n  RL_blueDMA_s_config_axiReadSpecialIsHandled_7,\n  RL_blueDMA_s_config_axiReadSpecial_8,\n  RL_blueDMA_s_config_axiReadSpecialIsHandled_8,\n  RL_blueDMA_s_config_axiReadSpecial_9,\n  RL_blueDMA_s_config_axiReadSpecialIsHandled_9,\n  RL_blueDMA_s_config_axiReadSpecial_10,\n  RL_blueDMA_s_config_axiReadSpecialIsHandled_10,\n  RL_blueDMA_s_config_axiReadSpecial_11,\n  RL_blueDMA_s_config_axiReadSpecialIsHandled_11] ) fired in the same clock\n  cycle.\n");
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_1 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_1 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_2 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_2 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_3 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_3 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_4 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_4 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_5 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_5 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_6 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_6 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_7 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_7 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_8 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_8 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_9 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_9 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_10 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_10 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecial_11 ||
	   WILL_FIRE_RL_blueDMA_s_config_axiReadSpecialIsHandled_11) &&
	  WILL_FIRE_RL_blueDMA_s_config_axiReadFallback)
	$display("Error: \"/home/wimi/jah/projects/Bluespec/done/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 161, column 18: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_blueDMA_s_config_axiReadSpecial,\n  RL_blueDMA_s_config_axiReadSpecialIsHandled,\n  RL_blueDMA_s_config_axiReadSpecial_1,\n  RL_blueDMA_s_config_axiReadSpecialIsHandled_1,\n  RL_blueDMA_s_config_axiReadSpecial_2,\n  RL_blueDMA_s_config_axiReadSpecialIsHandled_2,\n  RL_blueDMA_s_config_axiReadSpecial_3,\n  RL_blueDMA_s_config_axiReadSpecialIsHandled_3,\n  RL_blueDMA_s_config_axiReadSpecial_4,\n  RL_blueDMA_s_config_axiReadSpecialIsHandled_4,\n  RL_blueDMA_s_config_axiReadSpecial_5,\n  RL_blueDMA_s_config_axiReadSpecialIsHandled_5,\n  RL_blueDMA_s_config_axiReadSpecial_6,\n  RL_blueDMA_s_config_axiReadSpecialIsHandled_6,\n  RL_blueDMA_s_config_axiReadSpecial_7,\n  RL_blueDMA_s_config_axiReadSpecialIsHandled_7,\n  RL_blueDMA_s_config_axiReadSpecial_8,\n  RL_blueDMA_s_config_axiReadSpecialIsHandled_8,\n  RL_blueDMA_s_config_axiReadSpecial_9,\n  RL_blueDMA_s_config_axiReadSpecialIsHandled_9,\n  RL_blueDMA_s_config_axiReadSpecial_10,\n  RL_blueDMA_s_config_axiReadSpecialIsHandled_10,\n  RL_blueDMA_s_config_axiReadSpecial_11,\n  RL_blueDMA_s_config_axiReadSpecialIsHandled_11] and\n  [RL_blueDMA_s_config_axiReadFallback] ) fired in the same clock cycle.\n");
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecialIsHandled_1 &&
	  WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecialIsHandled)
	$display("Error: \"/home/wimi/jah/projects/Bluespec/done/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 261, column 18: (R0002)\n  Conflict-free rules RL_blueDMA_s_config_1_axiWriteSpecialIsHandled_1 and\n  RL_blueDMA_s_config_1_axiWriteSpecialIsHandled called conflicting methods\n  wset and wset of module instance blueDMA_s_config_writeIsHandled.\n");
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecialIsHandled_1 &&
	  WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial &&
	  blueDMA_s_config_writeSlave_in$EMPTY_N)
	$display("Error: \"/home/wimi/jah/projects/Bluespec/done/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 261, column 18: (R0002)\n  Conflict-free rules RL_blueDMA_s_config_1_axiWriteSpecialIsHandled_1 and\n  RL_blueDMA_s_config_1_axiWriteSpecial called conflicting methods first and\n  deq of module instance blueDMA_s_config_writeSlave_in.\n");
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_1 &&
	  WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial)
	$display("Error: \"/home/wimi/jah/projects/Bluespec/done/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 250, column 18: (R0002)\n  Conflict-free rules RL_blueDMA_s_config_1_axiWriteSpecial_1 and\n  RL_blueDMA_s_config_1_axiWriteSpecial called conflicting methods first and\n  deq of module instance blueDMA_s_config_writeSlave_in.\n");
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_1 &&
	  WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial)
	$display("Error: \"/home/wimi/jah/projects/Bluespec/done/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 250, column 18: (R0002)\n  Conflict-free rules RL_blueDMA_s_config_1_axiWriteSpecial_1 and\n  RL_blueDMA_s_config_1_axiWriteSpecial called conflicting methods deq and deq\n  of module instance blueDMA_s_config_writeSlave_in.\n");
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_1 &&
	  WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial)
	$display("Error: \"/home/wimi/jah/projects/Bluespec/done/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 250, column 18: (R0002)\n  Conflict-free rules RL_blueDMA_s_config_1_axiWriteSpecial_1 and\n  RL_blueDMA_s_config_1_axiWriteSpecial called conflicting methods enq and enq\n  of module instance blueDMA_s_config_writeSlave_out.\n");
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecialIsHandled_2 &&
	  WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecialIsHandled_1)
	$display("Error: \"/home/wimi/jah/projects/Bluespec/done/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 261, column 18: (R0002)\n  Conflict-free rules RL_blueDMA_s_config_1_axiWriteSpecialIsHandled_2 and\n  RL_blueDMA_s_config_1_axiWriteSpecialIsHandled_1 called conflicting methods\n  wset and wset of module instance blueDMA_s_config_writeIsHandled.\n");
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecialIsHandled_2 &&
	  WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_1 &&
	  blueDMA_s_config_writeSlave_in$EMPTY_N)
	$display("Error: \"/home/wimi/jah/projects/Bluespec/done/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 261, column 18: (R0002)\n  Conflict-free rules RL_blueDMA_s_config_1_axiWriteSpecialIsHandled_2 and\n  RL_blueDMA_s_config_1_axiWriteSpecial_1 called conflicting methods first and\n  deq of module instance blueDMA_s_config_writeSlave_in.\n");
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecialIsHandled_2 &&
	  WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecialIsHandled)
	$display("Error: \"/home/wimi/jah/projects/Bluespec/done/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 261, column 18: (R0002)\n  Conflict-free rules RL_blueDMA_s_config_1_axiWriteSpecialIsHandled_2 and\n  RL_blueDMA_s_config_1_axiWriteSpecialIsHandled called conflicting methods\n  wset and wset of module instance blueDMA_s_config_writeIsHandled.\n");
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecialIsHandled_2 &&
	  WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial &&
	  blueDMA_s_config_writeSlave_in$EMPTY_N)
	$display("Error: \"/home/wimi/jah/projects/Bluespec/done/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 261, column 18: (R0002)\n  Conflict-free rules RL_blueDMA_s_config_1_axiWriteSpecialIsHandled_2 and\n  RL_blueDMA_s_config_1_axiWriteSpecial called conflicting methods first and\n  deq of module instance blueDMA_s_config_writeSlave_in.\n");
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_2 &&
	  WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_1)
	$display("Error: \"/home/wimi/jah/projects/Bluespec/done/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 250, column 18: (R0002)\n  Conflict-free rules RL_blueDMA_s_config_1_axiWriteSpecial_2 and\n  RL_blueDMA_s_config_1_axiWriteSpecial_1 called conflicting methods first and\n  deq of module instance blueDMA_s_config_writeSlave_in.\n");
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_2 &&
	  WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_1)
	$display("Error: \"/home/wimi/jah/projects/Bluespec/done/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 250, column 18: (R0002)\n  Conflict-free rules RL_blueDMA_s_config_1_axiWriteSpecial_2 and\n  RL_blueDMA_s_config_1_axiWriteSpecial_1 called conflicting methods deq and\n  deq of module instance blueDMA_s_config_writeSlave_in.\n");
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_2 &&
	  WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_1)
	$display("Error: \"/home/wimi/jah/projects/Bluespec/done/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 250, column 18: (R0002)\n  Conflict-free rules RL_blueDMA_s_config_1_axiWriteSpecial_2 and\n  RL_blueDMA_s_config_1_axiWriteSpecial_1 called conflicting methods enq and\n  enq of module instance blueDMA_s_config_writeSlave_out.\n");
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_2 &&
	  WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial)
	$display("Error: \"/home/wimi/jah/projects/Bluespec/done/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 250, column 18: (R0002)\n  Conflict-free rules RL_blueDMA_s_config_1_axiWriteSpecial_2 and\n  RL_blueDMA_s_config_1_axiWriteSpecial called conflicting methods first and\n  deq of module instance blueDMA_s_config_writeSlave_in.\n");
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_2 &&
	  WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial)
	$display("Error: \"/home/wimi/jah/projects/Bluespec/done/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 250, column 18: (R0002)\n  Conflict-free rules RL_blueDMA_s_config_1_axiWriteSpecial_2 and\n  RL_blueDMA_s_config_1_axiWriteSpecial called conflicting methods deq and deq\n  of module instance blueDMA_s_config_writeSlave_in.\n");
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_2 &&
	  WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial)
	$display("Error: \"/home/wimi/jah/projects/Bluespec/done/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 250, column 18: (R0002)\n  Conflict-free rules RL_blueDMA_s_config_1_axiWriteSpecial_2 and\n  RL_blueDMA_s_config_1_axiWriteSpecial called conflicting methods enq and enq\n  of module instance blueDMA_s_config_writeSlave_out.\n");
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecialIsHandled_3 &&
	  WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecialIsHandled_2)
	$display("Error: \"/home/wimi/jah/projects/Bluespec/done/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 261, column 18: (R0002)\n  Conflict-free rules RL_blueDMA_s_config_1_axiWriteSpecialIsHandled_3 and\n  RL_blueDMA_s_config_1_axiWriteSpecialIsHandled_2 called conflicting methods\n  wset and wset of module instance blueDMA_s_config_writeIsHandled.\n");
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecialIsHandled_3 &&
	  WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_2 &&
	  blueDMA_s_config_writeSlave_in$EMPTY_N)
	$display("Error: \"/home/wimi/jah/projects/Bluespec/done/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 261, column 18: (R0002)\n  Conflict-free rules RL_blueDMA_s_config_1_axiWriteSpecialIsHandled_3 and\n  RL_blueDMA_s_config_1_axiWriteSpecial_2 called conflicting methods first and\n  deq of module instance blueDMA_s_config_writeSlave_in.\n");
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecialIsHandled_3 &&
	  WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecialIsHandled_1)
	$display("Error: \"/home/wimi/jah/projects/Bluespec/done/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 261, column 18: (R0002)\n  Conflict-free rules RL_blueDMA_s_config_1_axiWriteSpecialIsHandled_3 and\n  RL_blueDMA_s_config_1_axiWriteSpecialIsHandled_1 called conflicting methods\n  wset and wset of module instance blueDMA_s_config_writeIsHandled.\n");
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecialIsHandled_3 &&
	  WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_1 &&
	  blueDMA_s_config_writeSlave_in$EMPTY_N)
	$display("Error: \"/home/wimi/jah/projects/Bluespec/done/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 261, column 18: (R0002)\n  Conflict-free rules RL_blueDMA_s_config_1_axiWriteSpecialIsHandled_3 and\n  RL_blueDMA_s_config_1_axiWriteSpecial_1 called conflicting methods first and\n  deq of module instance blueDMA_s_config_writeSlave_in.\n");
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecialIsHandled_3 &&
	  WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecialIsHandled)
	$display("Error: \"/home/wimi/jah/projects/Bluespec/done/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 261, column 18: (R0002)\n  Conflict-free rules RL_blueDMA_s_config_1_axiWriteSpecialIsHandled_3 and\n  RL_blueDMA_s_config_1_axiWriteSpecialIsHandled called conflicting methods\n  wset and wset of module instance blueDMA_s_config_writeIsHandled.\n");
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecialIsHandled_3 &&
	  WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial &&
	  blueDMA_s_config_writeSlave_in$EMPTY_N)
	$display("Error: \"/home/wimi/jah/projects/Bluespec/done/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 261, column 18: (R0002)\n  Conflict-free rules RL_blueDMA_s_config_1_axiWriteSpecialIsHandled_3 and\n  RL_blueDMA_s_config_1_axiWriteSpecial called conflicting methods first and\n  deq of module instance blueDMA_s_config_writeSlave_in.\n");
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_3 &&
	  WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_2)
	$display("Error: \"/home/wimi/jah/projects/Bluespec/done/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 250, column 18: (R0002)\n  Conflict-free rules RL_blueDMA_s_config_1_axiWriteSpecial_3 and\n  RL_blueDMA_s_config_1_axiWriteSpecial_2 called conflicting methods first and\n  deq of module instance blueDMA_s_config_writeSlave_in.\n");
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_3 &&
	  WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_2)
	$display("Error: \"/home/wimi/jah/projects/Bluespec/done/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 250, column 18: (R0002)\n  Conflict-free rules RL_blueDMA_s_config_1_axiWriteSpecial_3 and\n  RL_blueDMA_s_config_1_axiWriteSpecial_2 called conflicting methods deq and\n  deq of module instance blueDMA_s_config_writeSlave_in.\n");
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_3 &&
	  WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_2)
	$display("Error: \"/home/wimi/jah/projects/Bluespec/done/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 250, column 18: (R0002)\n  Conflict-free rules RL_blueDMA_s_config_1_axiWriteSpecial_3 and\n  RL_blueDMA_s_config_1_axiWriteSpecial_2 called conflicting methods enq and\n  enq of module instance blueDMA_s_config_writeSlave_out.\n");
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_3 &&
	  WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_1)
	$display("Error: \"/home/wimi/jah/projects/Bluespec/done/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 250, column 18: (R0002)\n  Conflict-free rules RL_blueDMA_s_config_1_axiWriteSpecial_3 and\n  RL_blueDMA_s_config_1_axiWriteSpecial_1 called conflicting methods first and\n  deq of module instance blueDMA_s_config_writeSlave_in.\n");
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_3 &&
	  WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_1)
	$display("Error: \"/home/wimi/jah/projects/Bluespec/done/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 250, column 18: (R0002)\n  Conflict-free rules RL_blueDMA_s_config_1_axiWriteSpecial_3 and\n  RL_blueDMA_s_config_1_axiWriteSpecial_1 called conflicting methods deq and\n  deq of module instance blueDMA_s_config_writeSlave_in.\n");
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_3 &&
	  WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_1)
	$display("Error: \"/home/wimi/jah/projects/Bluespec/done/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 250, column 18: (R0002)\n  Conflict-free rules RL_blueDMA_s_config_1_axiWriteSpecial_3 and\n  RL_blueDMA_s_config_1_axiWriteSpecial_1 called conflicting methods enq and\n  enq of module instance blueDMA_s_config_writeSlave_out.\n");
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_3 &&
	  WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial)
	$display("Error: \"/home/wimi/jah/projects/Bluespec/done/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 250, column 18: (R0002)\n  Conflict-free rules RL_blueDMA_s_config_1_axiWriteSpecial_3 and\n  RL_blueDMA_s_config_1_axiWriteSpecial called conflicting methods first and\n  deq of module instance blueDMA_s_config_writeSlave_in.\n");
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_3 &&
	  WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial)
	$display("Error: \"/home/wimi/jah/projects/Bluespec/done/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 250, column 18: (R0002)\n  Conflict-free rules RL_blueDMA_s_config_1_axiWriteSpecial_3 and\n  RL_blueDMA_s_config_1_axiWriteSpecial called conflicting methods deq and deq\n  of module instance blueDMA_s_config_writeSlave_in.\n");
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_3 &&
	  WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial)
	$display("Error: \"/home/wimi/jah/projects/Bluespec/done/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 250, column 18: (R0002)\n  Conflict-free rules RL_blueDMA_s_config_1_axiWriteSpecial_3 and\n  RL_blueDMA_s_config_1_axiWriteSpecial called conflicting methods enq and enq\n  of module instance blueDMA_s_config_writeSlave_out.\n");
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecialIsHandled_4 &&
	  WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecialIsHandled_3)
	$display("Error: \"/home/wimi/jah/projects/Bluespec/done/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 261, column 18: (R0002)\n  Conflict-free rules RL_blueDMA_s_config_1_axiWriteSpecialIsHandled_4 and\n  RL_blueDMA_s_config_1_axiWriteSpecialIsHandled_3 called conflicting methods\n  wset and wset of module instance blueDMA_s_config_writeIsHandled.\n");
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecialIsHandled_4 &&
	  WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_3 &&
	  blueDMA_s_config_writeSlave_in$EMPTY_N)
	$display("Error: \"/home/wimi/jah/projects/Bluespec/done/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 261, column 18: (R0002)\n  Conflict-free rules RL_blueDMA_s_config_1_axiWriteSpecialIsHandled_4 and\n  RL_blueDMA_s_config_1_axiWriteSpecial_3 called conflicting methods first and\n  deq of module instance blueDMA_s_config_writeSlave_in.\n");
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecialIsHandled_4 &&
	  WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecialIsHandled_2)
	$display("Error: \"/home/wimi/jah/projects/Bluespec/done/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 261, column 18: (R0002)\n  Conflict-free rules RL_blueDMA_s_config_1_axiWriteSpecialIsHandled_4 and\n  RL_blueDMA_s_config_1_axiWriteSpecialIsHandled_2 called conflicting methods\n  wset and wset of module instance blueDMA_s_config_writeIsHandled.\n");
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecialIsHandled_4 &&
	  WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_2 &&
	  blueDMA_s_config_writeSlave_in$EMPTY_N)
	$display("Error: \"/home/wimi/jah/projects/Bluespec/done/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 261, column 18: (R0002)\n  Conflict-free rules RL_blueDMA_s_config_1_axiWriteSpecialIsHandled_4 and\n  RL_blueDMA_s_config_1_axiWriteSpecial_2 called conflicting methods first and\n  deq of module instance blueDMA_s_config_writeSlave_in.\n");
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecialIsHandled_4 &&
	  WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecialIsHandled_1)
	$display("Error: \"/home/wimi/jah/projects/Bluespec/done/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 261, column 18: (R0002)\n  Conflict-free rules RL_blueDMA_s_config_1_axiWriteSpecialIsHandled_4 and\n  RL_blueDMA_s_config_1_axiWriteSpecialIsHandled_1 called conflicting methods\n  wset and wset of module instance blueDMA_s_config_writeIsHandled.\n");
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecialIsHandled_4 &&
	  WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_1 &&
	  blueDMA_s_config_writeSlave_in$EMPTY_N)
	$display("Error: \"/home/wimi/jah/projects/Bluespec/done/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 261, column 18: (R0002)\n  Conflict-free rules RL_blueDMA_s_config_1_axiWriteSpecialIsHandled_4 and\n  RL_blueDMA_s_config_1_axiWriteSpecial_1 called conflicting methods first and\n  deq of module instance blueDMA_s_config_writeSlave_in.\n");
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecialIsHandled_4 &&
	  WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecialIsHandled)
	$display("Error: \"/home/wimi/jah/projects/Bluespec/done/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 261, column 18: (R0002)\n  Conflict-free rules RL_blueDMA_s_config_1_axiWriteSpecialIsHandled_4 and\n  RL_blueDMA_s_config_1_axiWriteSpecialIsHandled called conflicting methods\n  wset and wset of module instance blueDMA_s_config_writeIsHandled.\n");
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecialIsHandled_4 &&
	  WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial &&
	  blueDMA_s_config_writeSlave_in$EMPTY_N)
	$display("Error: \"/home/wimi/jah/projects/Bluespec/done/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 261, column 18: (R0002)\n  Conflict-free rules RL_blueDMA_s_config_1_axiWriteSpecialIsHandled_4 and\n  RL_blueDMA_s_config_1_axiWriteSpecial called conflicting methods first and\n  deq of module instance blueDMA_s_config_writeSlave_in.\n");
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_4 &&
	  WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_3)
	$display("Error: \"/home/wimi/jah/projects/Bluespec/done/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 250, column 18: (R0002)\n  Conflict-free rules RL_blueDMA_s_config_1_axiWriteSpecial_4 and\n  RL_blueDMA_s_config_1_axiWriteSpecial_3 called conflicting methods first and\n  deq of module instance blueDMA_s_config_writeSlave_in.\n");
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_4 &&
	  WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_3)
	$display("Error: \"/home/wimi/jah/projects/Bluespec/done/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 250, column 18: (R0002)\n  Conflict-free rules RL_blueDMA_s_config_1_axiWriteSpecial_4 and\n  RL_blueDMA_s_config_1_axiWriteSpecial_3 called conflicting methods deq and\n  deq of module instance blueDMA_s_config_writeSlave_in.\n");
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_4 &&
	  WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_3)
	$display("Error: \"/home/wimi/jah/projects/Bluespec/done/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 250, column 18: (R0002)\n  Conflict-free rules RL_blueDMA_s_config_1_axiWriteSpecial_4 and\n  RL_blueDMA_s_config_1_axiWriteSpecial_3 called conflicting methods enq and\n  enq of module instance blueDMA_s_config_writeSlave_out.\n");
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_4 &&
	  WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_2)
	$display("Error: \"/home/wimi/jah/projects/Bluespec/done/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 250, column 18: (R0002)\n  Conflict-free rules RL_blueDMA_s_config_1_axiWriteSpecial_4 and\n  RL_blueDMA_s_config_1_axiWriteSpecial_2 called conflicting methods first and\n  deq of module instance blueDMA_s_config_writeSlave_in.\n");
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_4 &&
	  WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_2)
	$display("Error: \"/home/wimi/jah/projects/Bluespec/done/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 250, column 18: (R0002)\n  Conflict-free rules RL_blueDMA_s_config_1_axiWriteSpecial_4 and\n  RL_blueDMA_s_config_1_axiWriteSpecial_2 called conflicting methods deq and\n  deq of module instance blueDMA_s_config_writeSlave_in.\n");
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_4 &&
	  WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_2)
	$display("Error: \"/home/wimi/jah/projects/Bluespec/done/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 250, column 18: (R0002)\n  Conflict-free rules RL_blueDMA_s_config_1_axiWriteSpecial_4 and\n  RL_blueDMA_s_config_1_axiWriteSpecial_2 called conflicting methods enq and\n  enq of module instance blueDMA_s_config_writeSlave_out.\n");
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_4 &&
	  WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_1)
	$display("Error: \"/home/wimi/jah/projects/Bluespec/done/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 250, column 18: (R0002)\n  Conflict-free rules RL_blueDMA_s_config_1_axiWriteSpecial_4 and\n  RL_blueDMA_s_config_1_axiWriteSpecial_1 called conflicting methods first and\n  deq of module instance blueDMA_s_config_writeSlave_in.\n");
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_4 &&
	  WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_1)
	$display("Error: \"/home/wimi/jah/projects/Bluespec/done/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 250, column 18: (R0002)\n  Conflict-free rules RL_blueDMA_s_config_1_axiWriteSpecial_4 and\n  RL_blueDMA_s_config_1_axiWriteSpecial_1 called conflicting methods deq and\n  deq of module instance blueDMA_s_config_writeSlave_in.\n");
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_4 &&
	  WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_1)
	$display("Error: \"/home/wimi/jah/projects/Bluespec/done/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 250, column 18: (R0002)\n  Conflict-free rules RL_blueDMA_s_config_1_axiWriteSpecial_4 and\n  RL_blueDMA_s_config_1_axiWriteSpecial_1 called conflicting methods enq and\n  enq of module instance blueDMA_s_config_writeSlave_out.\n");
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_4 &&
	  WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial)
	$display("Error: \"/home/wimi/jah/projects/Bluespec/done/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 250, column 18: (R0002)\n  Conflict-free rules RL_blueDMA_s_config_1_axiWriteSpecial_4 and\n  RL_blueDMA_s_config_1_axiWriteSpecial called conflicting methods first and\n  deq of module instance blueDMA_s_config_writeSlave_in.\n");
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_4 &&
	  WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial)
	$display("Error: \"/home/wimi/jah/projects/Bluespec/done/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 250, column 18: (R0002)\n  Conflict-free rules RL_blueDMA_s_config_1_axiWriteSpecial_4 and\n  RL_blueDMA_s_config_1_axiWriteSpecial called conflicting methods deq and deq\n  of module instance blueDMA_s_config_writeSlave_in.\n");
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_4 &&
	  WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial)
	$display("Error: \"/home/wimi/jah/projects/Bluespec/done/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 250, column 18: (R0002)\n  Conflict-free rules RL_blueDMA_s_config_1_axiWriteSpecial_4 and\n  RL_blueDMA_s_config_1_axiWriteSpecial called conflicting methods enq and enq\n  of module instance blueDMA_s_config_writeSlave_out.\n");
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecialIsHandled_5 &&
	  WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecialIsHandled_4)
	$display("Error: \"/home/wimi/jah/projects/Bluespec/done/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 261, column 18: (R0002)\n  Conflict-free rules RL_blueDMA_s_config_1_axiWriteSpecialIsHandled_5 and\n  RL_blueDMA_s_config_1_axiWriteSpecialIsHandled_4 called conflicting methods\n  wset and wset of module instance blueDMA_s_config_writeIsHandled.\n");
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecialIsHandled_5 &&
	  WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_4 &&
	  blueDMA_s_config_writeSlave_in$EMPTY_N)
	$display("Error: \"/home/wimi/jah/projects/Bluespec/done/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 261, column 18: (R0002)\n  Conflict-free rules RL_blueDMA_s_config_1_axiWriteSpecialIsHandled_5 and\n  RL_blueDMA_s_config_1_axiWriteSpecial_4 called conflicting methods first and\n  deq of module instance blueDMA_s_config_writeSlave_in.\n");
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecialIsHandled_5 &&
	  WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecialIsHandled_3)
	$display("Error: \"/home/wimi/jah/projects/Bluespec/done/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 261, column 18: (R0002)\n  Conflict-free rules RL_blueDMA_s_config_1_axiWriteSpecialIsHandled_5 and\n  RL_blueDMA_s_config_1_axiWriteSpecialIsHandled_3 called conflicting methods\n  wset and wset of module instance blueDMA_s_config_writeIsHandled.\n");
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecialIsHandled_5 &&
	  WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_3 &&
	  blueDMA_s_config_writeSlave_in$EMPTY_N)
	$display("Error: \"/home/wimi/jah/projects/Bluespec/done/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 261, column 18: (R0002)\n  Conflict-free rules RL_blueDMA_s_config_1_axiWriteSpecialIsHandled_5 and\n  RL_blueDMA_s_config_1_axiWriteSpecial_3 called conflicting methods first and\n  deq of module instance blueDMA_s_config_writeSlave_in.\n");
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecialIsHandled_5 &&
	  WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecialIsHandled_2)
	$display("Error: \"/home/wimi/jah/projects/Bluespec/done/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 261, column 18: (R0002)\n  Conflict-free rules RL_blueDMA_s_config_1_axiWriteSpecialIsHandled_5 and\n  RL_blueDMA_s_config_1_axiWriteSpecialIsHandled_2 called conflicting methods\n  wset and wset of module instance blueDMA_s_config_writeIsHandled.\n");
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecialIsHandled_5 &&
	  WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_2 &&
	  blueDMA_s_config_writeSlave_in$EMPTY_N)
	$display("Error: \"/home/wimi/jah/projects/Bluespec/done/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 261, column 18: (R0002)\n  Conflict-free rules RL_blueDMA_s_config_1_axiWriteSpecialIsHandled_5 and\n  RL_blueDMA_s_config_1_axiWriteSpecial_2 called conflicting methods first and\n  deq of module instance blueDMA_s_config_writeSlave_in.\n");
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecialIsHandled_5 &&
	  WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecialIsHandled_1)
	$display("Error: \"/home/wimi/jah/projects/Bluespec/done/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 261, column 18: (R0002)\n  Conflict-free rules RL_blueDMA_s_config_1_axiWriteSpecialIsHandled_5 and\n  RL_blueDMA_s_config_1_axiWriteSpecialIsHandled_1 called conflicting methods\n  wset and wset of module instance blueDMA_s_config_writeIsHandled.\n");
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecialIsHandled_5 &&
	  WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_1 &&
	  blueDMA_s_config_writeSlave_in$EMPTY_N)
	$display("Error: \"/home/wimi/jah/projects/Bluespec/done/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 261, column 18: (R0002)\n  Conflict-free rules RL_blueDMA_s_config_1_axiWriteSpecialIsHandled_5 and\n  RL_blueDMA_s_config_1_axiWriteSpecial_1 called conflicting methods first and\n  deq of module instance blueDMA_s_config_writeSlave_in.\n");
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecialIsHandled_5 &&
	  WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecialIsHandled)
	$display("Error: \"/home/wimi/jah/projects/Bluespec/done/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 261, column 18: (R0002)\n  Conflict-free rules RL_blueDMA_s_config_1_axiWriteSpecialIsHandled_5 and\n  RL_blueDMA_s_config_1_axiWriteSpecialIsHandled called conflicting methods\n  wset and wset of module instance blueDMA_s_config_writeIsHandled.\n");
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecialIsHandled_5 &&
	  WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial &&
	  blueDMA_s_config_writeSlave_in$EMPTY_N)
	$display("Error: \"/home/wimi/jah/projects/Bluespec/done/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 261, column 18: (R0002)\n  Conflict-free rules RL_blueDMA_s_config_1_axiWriteSpecialIsHandled_5 and\n  RL_blueDMA_s_config_1_axiWriteSpecial called conflicting methods first and\n  deq of module instance blueDMA_s_config_writeSlave_in.\n");
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_5 &&
	  WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_4)
	$display("Error: \"/home/wimi/jah/projects/Bluespec/done/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 250, column 18: (R0002)\n  Conflict-free rules RL_blueDMA_s_config_1_axiWriteSpecial_5 and\n  RL_blueDMA_s_config_1_axiWriteSpecial_4 called conflicting methods first and\n  deq of module instance blueDMA_s_config_writeSlave_in.\n");
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_5 &&
	  WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_4)
	$display("Error: \"/home/wimi/jah/projects/Bluespec/done/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 250, column 18: (R0002)\n  Conflict-free rules RL_blueDMA_s_config_1_axiWriteSpecial_5 and\n  RL_blueDMA_s_config_1_axiWriteSpecial_4 called conflicting methods deq and\n  deq of module instance blueDMA_s_config_writeSlave_in.\n");
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_5 &&
	  WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_4)
	$display("Error: \"/home/wimi/jah/projects/Bluespec/done/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 250, column 18: (R0002)\n  Conflict-free rules RL_blueDMA_s_config_1_axiWriteSpecial_5 and\n  RL_blueDMA_s_config_1_axiWriteSpecial_4 called conflicting methods enq and\n  enq of module instance blueDMA_s_config_writeSlave_out.\n");
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_5 &&
	  WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_3)
	$display("Error: \"/home/wimi/jah/projects/Bluespec/done/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 250, column 18: (R0002)\n  Conflict-free rules RL_blueDMA_s_config_1_axiWriteSpecial_5 and\n  RL_blueDMA_s_config_1_axiWriteSpecial_3 called conflicting methods first and\n  deq of module instance blueDMA_s_config_writeSlave_in.\n");
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_5 &&
	  WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_3)
	$display("Error: \"/home/wimi/jah/projects/Bluespec/done/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 250, column 18: (R0002)\n  Conflict-free rules RL_blueDMA_s_config_1_axiWriteSpecial_5 and\n  RL_blueDMA_s_config_1_axiWriteSpecial_3 called conflicting methods deq and\n  deq of module instance blueDMA_s_config_writeSlave_in.\n");
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_5 &&
	  WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_3)
	$display("Error: \"/home/wimi/jah/projects/Bluespec/done/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 250, column 18: (R0002)\n  Conflict-free rules RL_blueDMA_s_config_1_axiWriteSpecial_5 and\n  RL_blueDMA_s_config_1_axiWriteSpecial_3 called conflicting methods enq and\n  enq of module instance blueDMA_s_config_writeSlave_out.\n");
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_5 &&
	  WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_2)
	$display("Error: \"/home/wimi/jah/projects/Bluespec/done/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 250, column 18: (R0002)\n  Conflict-free rules RL_blueDMA_s_config_1_axiWriteSpecial_5 and\n  RL_blueDMA_s_config_1_axiWriteSpecial_2 called conflicting methods first and\n  deq of module instance blueDMA_s_config_writeSlave_in.\n");
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_5 &&
	  WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_2)
	$display("Error: \"/home/wimi/jah/projects/Bluespec/done/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 250, column 18: (R0002)\n  Conflict-free rules RL_blueDMA_s_config_1_axiWriteSpecial_5 and\n  RL_blueDMA_s_config_1_axiWriteSpecial_2 called conflicting methods deq and\n  deq of module instance blueDMA_s_config_writeSlave_in.\n");
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_5 &&
	  WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_2)
	$display("Error: \"/home/wimi/jah/projects/Bluespec/done/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 250, column 18: (R0002)\n  Conflict-free rules RL_blueDMA_s_config_1_axiWriteSpecial_5 and\n  RL_blueDMA_s_config_1_axiWriteSpecial_2 called conflicting methods enq and\n  enq of module instance blueDMA_s_config_writeSlave_out.\n");
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_5 &&
	  WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_1)
	$display("Error: \"/home/wimi/jah/projects/Bluespec/done/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 250, column 18: (R0002)\n  Conflict-free rules RL_blueDMA_s_config_1_axiWriteSpecial_5 and\n  RL_blueDMA_s_config_1_axiWriteSpecial_1 called conflicting methods first and\n  deq of module instance blueDMA_s_config_writeSlave_in.\n");
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_5 &&
	  WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_1)
	$display("Error: \"/home/wimi/jah/projects/Bluespec/done/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 250, column 18: (R0002)\n  Conflict-free rules RL_blueDMA_s_config_1_axiWriteSpecial_5 and\n  RL_blueDMA_s_config_1_axiWriteSpecial_1 called conflicting methods deq and\n  deq of module instance blueDMA_s_config_writeSlave_in.\n");
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_5 &&
	  WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_1)
	$display("Error: \"/home/wimi/jah/projects/Bluespec/done/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 250, column 18: (R0002)\n  Conflict-free rules RL_blueDMA_s_config_1_axiWriteSpecial_5 and\n  RL_blueDMA_s_config_1_axiWriteSpecial_1 called conflicting methods enq and\n  enq of module instance blueDMA_s_config_writeSlave_out.\n");
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_5 &&
	  WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial)
	$display("Error: \"/home/wimi/jah/projects/Bluespec/done/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 250, column 18: (R0002)\n  Conflict-free rules RL_blueDMA_s_config_1_axiWriteSpecial_5 and\n  RL_blueDMA_s_config_1_axiWriteSpecial called conflicting methods first and\n  deq of module instance blueDMA_s_config_writeSlave_in.\n");
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_5 &&
	  WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial)
	$display("Error: \"/home/wimi/jah/projects/Bluespec/done/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 250, column 18: (R0002)\n  Conflict-free rules RL_blueDMA_s_config_1_axiWriteSpecial_5 and\n  RL_blueDMA_s_config_1_axiWriteSpecial called conflicting methods deq and deq\n  of module instance blueDMA_s_config_writeSlave_in.\n");
    if (s_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial_5 &&
	  WILL_FIRE_RL_blueDMA_s_config_1_axiWriteSpecial)
	$display("Error: \"/home/wimi/jah/projects/Bluespec/done/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 250, column 18: (R0002)\n  Conflict-free rules RL_blueDMA_s_config_1_axiWriteSpecial_5 and\n  RL_blueDMA_s_config_1_axiWriteSpecial called conflicting methods enq and enq\n  of module instance blueDMA_s_config_writeSlave_out.\n");
  end
  // synopsys translate_on

  // synopsys translate_off
  always@(negedge m32_axi_aclk)
  begin
    #0;
    if (m32_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_writeChannel_toMaster_reqGen_finishRequest)
	$display("[WRITE] request:");
    if (m32_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_writeChannel_toMaster_reqGen_finishRequest)
	$display("[WRITE] bytes_first: %d",
		 blueDMA_writeChannel_toMaster_reqGen_intermediateBuffer3$D_OUT[146:141]);
    if (m32_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_writeChannel_toMaster_reqGen_finishRequest)
	$display("[WRITE] bytes_last: %d",
		 blueDMA_writeChannel_toMaster_reqGen_intermediateBuffer3$D_OUT[140:135]);
    if (m32_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_writeChannel_toMaster_reqGen_finishRequest)
	$display("[WRITE] transfers_total: %d",
		 blueDMA_writeChannel_toMaster_reqGen_intermediateBuffer3$D_OUT[134:109]);
    if (m32_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_writeChannel_toMaster_reqGen_finishRequest)
	$display("[WRITE] addr_offset: %d",
		 blueDMA_writeChannel_toMaster_reqGen_intermediateBuffer3$D_OUT[50:45]);
    if (m32_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_writeChannel_toMaster_reqGen_finishRequest)
	$display("[WRITE] requests_first: %d",
		 blueDMA_writeChannel_toMaster_reqGen_intermediateBuffer3$D_OUT[8:0]);
    if (m32_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_writeChannel_toMaster_reqGen_finishRequest)
	$display("[WRITE] requests_last: %d", x__h5725);
    if (m32_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_writeChannel_toMaster_reqGen_finishRequest)
	$display("[WRITE] requests_total: %d",
		 request_data_requests_total__h5699);
    if (m32_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_writeChannel_toMaster_reqGen_finishRequest)
	$display("[WRITE] address_static: %x",
		 blueDMA_writeChannel_toMaster_reqGen_intermediateBuffer3$D_OUT[108:78]);
    if (m32_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_writeChannel_toMaster_reqGen_finishRequest)
	$display("[WRITE] address_dynamic: %x",
		 blueDMA_writeChannel_toMaster_reqGen_intermediateBuffer3$D_OUT[77:57]);
    if (m32_axi_aresetn != `BSV_RESET_VALUE)
      if (blueDMA_writeChannel_byteAlignerTo_addr_ff$dEMPTY_N)
	$display("Init data:");
    if (m32_axi_aresetn != `BSV_RESET_VALUE)
      if (blueDMA_writeChannel_byteAlignerTo_addr_ff$dEMPTY_N)
	$display("Alignment_initial %d",
		 $unsigned(blueDMA_writeChannel_byteAlignerTo_addr_ff$dD_OUT[37:32]));
    if (m32_axi_aresetn != `BSV_RESET_VALUE)
      if (blueDMA_writeChannel_byteAlignerTo_addr_ff$dEMPTY_N)
	$display("addr_1_alignment %d",
		 $unsigned(blueDMA_writeChannel_byteAlignerTo_addr_ff$dD_OUT[101:96]));
    if (m32_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_writeChannel_byteAlignerTo_forwardOutput &&
	  WILL_FIRE_RL_blueDMA_writeChannel_byteAlignerTo_forwardOutputLast)
	$display("Error: \"/home/wimi/jah/projects/Bluespec/done/BlueDMA/src/ByteAligner.bsv\", line 116, column 32: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_blueDMA_writeChannel_byteAlignerTo_forwardOutput] and\n  [RL_blueDMA_writeChannel_byteAlignerTo_forwardOutputLast] ) fired in the\n  same clock cycle.\n");
    if (m32_axi_aresetn != `BSV_RESET_VALUE)
      if (blueDMA_writeChannel_mimoConv_ff$dEMPTY_N)
	$display("New request with %d words",
		 $unsigned(IF_blueDMA_writeChannel_mimoConv_ff_first__31__ETC___d737));
    if (m32_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_readChannel_fromMaster_reqGen_finishRequest)
	$display("[READ] request:");
    if (m32_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_readChannel_fromMaster_reqGen_finishRequest)
	$display("[READ] bytes_first: %d",
		 blueDMA_readChannel_fromMaster_reqGen_intermediateBuffer3$D_OUT[146:141]);
    if (m32_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_readChannel_fromMaster_reqGen_finishRequest)
	$display("[READ] bytes_last: %d",
		 blueDMA_readChannel_fromMaster_reqGen_intermediateBuffer3$D_OUT[140:135]);
    if (m32_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_readChannel_fromMaster_reqGen_finishRequest)
	$display("[READ] transfers_total: %d",
		 blueDMA_readChannel_fromMaster_reqGen_intermediateBuffer3$D_OUT[134:109]);
    if (m32_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_readChannel_fromMaster_reqGen_finishRequest)
	$display("[READ] addr_offset: %d",
		 blueDMA_readChannel_fromMaster_reqGen_intermediateBuffer3$D_OUT[50:45]);
    if (m32_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_readChannel_fromMaster_reqGen_finishRequest)
	$display("[READ] requests_first: %d",
		 blueDMA_readChannel_fromMaster_reqGen_intermediateBuffer3$D_OUT[8:0]);
    if (m32_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_readChannel_fromMaster_reqGen_finishRequest)
	$display("[READ] requests_last: %d", x__h195728);
    if (m32_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_readChannel_fromMaster_reqGen_finishRequest)
	$display("[READ] requests_total: %d",
		 request_data_requests_total__h195702);
    if (m32_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_readChannel_fromMaster_reqGen_finishRequest)
	$display("[READ] address_static: %x",
		 blueDMA_readChannel_fromMaster_reqGen_intermediateBuffer3$D_OUT[108:78]);
    if (m32_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_readChannel_fromMaster_reqGen_finishRequest)
	$display("[READ] address_dynamic: %x",
		 blueDMA_readChannel_fromMaster_reqGen_intermediateBuffer3$D_OUT[77:57]);
    if (m32_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_readChannel_fromMaster_placeRequest)
	begin
	  v__h198067 = $time;
	  #0;
	end
    if (m32_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_readChannel_fromMaster_placeRequest)
	$display("(%0d) Processing READ request: Address: %x, beats this request %d, requests_total %d",
		 v__h198067,
		 blueDMA_readChannel_fromMaster_task_data_requests_reg[68:5],
		 _theResult_____2__h197885 + 8'd1,
		 blueDMA_readChannel_fromMaster_task_data_requests_reg[94:69]);
    if (m32_axi_aresetn != `BSV_RESET_VALUE)
      if (blueDMA_readChannel_byteAlignerFrom_addr_ff$dEMPTY_N)
	$display("Init data:");
    if (m32_axi_aresetn != `BSV_RESET_VALUE)
      if (blueDMA_readChannel_byteAlignerFrom_addr_ff$dEMPTY_N)
	$display("Alignment_initial %d",
		 $unsigned(blueDMA_readChannel_byteAlignerFrom_addr_ff$dD_OUT[37:32]));
    if (m32_axi_aresetn != `BSV_RESET_VALUE)
      if (blueDMA_readChannel_byteAlignerFrom_addr_ff$dEMPTY_N)
	$display("addr_1_alignment %d",
		 $unsigned(blueDMA_readChannel_byteAlignerFrom_addr_ff$dD_OUT[101:96]));
    if (m32_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_readChannel_byteAlignerFrom_forwardOutput &&
	  WILL_FIRE_RL_blueDMA_readChannel_byteAlignerFrom_forwardOutputLast)
	$display("Error: \"/home/wimi/jah/projects/Bluespec/done/BlueDMA/src/ByteAligner.bsv\", line 116, column 32: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_blueDMA_readChannel_byteAlignerFrom_forwardOutput] and\n  [RL_blueDMA_readChannel_byteAlignerFrom_forwardOutputLast] ) fired in the\n  same clock cycle.\n");
  end
  // synopsys translate_on

  // synopsys translate_off
  always@(negedge m64_axi_aclk)
  begin
    #0;
    if (m64_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_writeChannel_fromMaster_reqGen_finishRequest)
	$display("[READ] request:");
    if (m64_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_writeChannel_fromMaster_reqGen_finishRequest)
	$display("[READ] bytes_first: %d",
		 blueDMA_writeChannel_fromMaster_reqGen_intermediateBuffer3$D_OUT[146:141]);
    if (m64_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_writeChannel_fromMaster_reqGen_finishRequest)
	$display("[READ] bytes_last: %d",
		 blueDMA_writeChannel_fromMaster_reqGen_intermediateBuffer3$D_OUT[140:135]);
    if (m64_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_writeChannel_fromMaster_reqGen_finishRequest)
	$display("[READ] transfers_total: %d",
		 blueDMA_writeChannel_fromMaster_reqGen_intermediateBuffer3$D_OUT[134:109]);
    if (m64_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_writeChannel_fromMaster_reqGen_finishRequest)
	$display("[READ] addr_offset: %d",
		 blueDMA_writeChannel_fromMaster_reqGen_intermediateBuffer3$D_OUT[50:45]);
    if (m64_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_writeChannel_fromMaster_reqGen_finishRequest)
	$display("[READ] requests_first: %d",
		 blueDMA_writeChannel_fromMaster_reqGen_intermediateBuffer3$D_OUT[8:0]);
    if (m64_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_writeChannel_fromMaster_reqGen_finishRequest)
	$display("[READ] requests_last: %d", x__h1652);
    if (m64_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_writeChannel_fromMaster_reqGen_finishRequest)
	$display("[READ] requests_total: %d",
		 request_data_requests_total__h1626);
    if (m64_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_writeChannel_fromMaster_reqGen_finishRequest)
	$display("[READ] address_static: %x",
		 blueDMA_writeChannel_fromMaster_reqGen_intermediateBuffer3$D_OUT[108:78]);
    if (m64_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_writeChannel_fromMaster_reqGen_finishRequest)
	$display("[READ] address_dynamic: %x",
		 blueDMA_writeChannel_fromMaster_reqGen_intermediateBuffer3$D_OUT[77:57]);
    if (m64_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_writeChannel_fromMaster_placeRequest)
	begin
	  v__h4016 = $time;
	  #0;
	end
    if (m64_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_writeChannel_fromMaster_placeRequest)
	$display("(%0d) Processing READ request: Address: %x, beats this request %d, requests_total %d",
		 v__h4016,
		 blueDMA_writeChannel_fromMaster_task_data_requests_reg[68:5],
		 _theResult_____2__h3834 + 8'd1,
		 blueDMA_writeChannel_fromMaster_task_data_requests_reg[94:69]);
    if (m64_axi_aresetn != `BSV_RESET_VALUE)
      if (blueDMA_writeChannel_byteAlignerFrom_addr_ff$dEMPTY_N)
	$display("Init data:");
    if (m64_axi_aresetn != `BSV_RESET_VALUE)
      if (blueDMA_writeChannel_byteAlignerFrom_addr_ff$dEMPTY_N)
	$display("Alignment_initial %d",
		 $unsigned(blueDMA_writeChannel_byteAlignerFrom_addr_ff$dD_OUT[37:32]));
    if (m64_axi_aresetn != `BSV_RESET_VALUE)
      if (blueDMA_writeChannel_byteAlignerFrom_addr_ff$dEMPTY_N)
	$display("addr_1_alignment %d",
		 $unsigned(blueDMA_writeChannel_byteAlignerFrom_addr_ff$dD_OUT[101:96]));
    if (m64_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_writeChannel_byteAlignerFrom_forwardOutput &&
	  WILL_FIRE_RL_blueDMA_writeChannel_byteAlignerFrom_forwardOutputLast)
	$display("Error: \"/home/wimi/jah/projects/Bluespec/done/BlueDMA/src/ByteAligner.bsv\", line 116, column 32: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_blueDMA_writeChannel_byteAlignerFrom_forwardOutput] and\n  [RL_blueDMA_writeChannel_byteAlignerFrom_forwardOutputLast] ) fired in the\n  same clock cycle.\n");
    if (m64_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_readChannel_toMaster_reqGen_finishRequest)
	$display("[WRITE] request:");
    if (m64_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_readChannel_toMaster_reqGen_finishRequest)
	$display("[WRITE] bytes_first: %d",
		 blueDMA_readChannel_toMaster_reqGen_intermediateBuffer3$D_OUT[146:141]);
    if (m64_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_readChannel_toMaster_reqGen_finishRequest)
	$display("[WRITE] bytes_last: %d",
		 blueDMA_readChannel_toMaster_reqGen_intermediateBuffer3$D_OUT[140:135]);
    if (m64_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_readChannel_toMaster_reqGen_finishRequest)
	$display("[WRITE] transfers_total: %d",
		 blueDMA_readChannel_toMaster_reqGen_intermediateBuffer3$D_OUT[134:109]);
    if (m64_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_readChannel_toMaster_reqGen_finishRequest)
	$display("[WRITE] addr_offset: %d",
		 blueDMA_readChannel_toMaster_reqGen_intermediateBuffer3$D_OUT[50:45]);
    if (m64_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_readChannel_toMaster_reqGen_finishRequest)
	$display("[WRITE] requests_first: %d",
		 blueDMA_readChannel_toMaster_reqGen_intermediateBuffer3$D_OUT[8:0]);
    if (m64_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_readChannel_toMaster_reqGen_finishRequest)
	$display("[WRITE] requests_last: %d", x__h199776);
    if (m64_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_readChannel_toMaster_reqGen_finishRequest)
	$display("[WRITE] requests_total: %d",
		 request_data_requests_total__h199750);
    if (m64_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_readChannel_toMaster_reqGen_finishRequest)
	$display("[WRITE] address_static: %x",
		 blueDMA_readChannel_toMaster_reqGen_intermediateBuffer3$D_OUT[108:78]);
    if (m64_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_readChannel_toMaster_reqGen_finishRequest)
	$display("[WRITE] address_dynamic: %x",
		 blueDMA_readChannel_toMaster_reqGen_intermediateBuffer3$D_OUT[77:57]);
    if (m64_axi_aresetn != `BSV_RESET_VALUE)
      if (blueDMA_readChannel_byteAlignerTo_addr_ff$dEMPTY_N)
	$display("Init data:");
    if (m64_axi_aresetn != `BSV_RESET_VALUE)
      if (blueDMA_readChannel_byteAlignerTo_addr_ff$dEMPTY_N)
	$display("Alignment_initial %d",
		 $unsigned(blueDMA_readChannel_byteAlignerTo_addr_ff$dD_OUT[37:32]));
    if (m64_axi_aresetn != `BSV_RESET_VALUE)
      if (blueDMA_readChannel_byteAlignerTo_addr_ff$dEMPTY_N)
	$display("addr_1_alignment %d",
		 $unsigned(blueDMA_readChannel_byteAlignerTo_addr_ff$dD_OUT[101:96]));
    if (m64_axi_aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_blueDMA_readChannel_byteAlignerTo_forwardOutput &&
	  WILL_FIRE_RL_blueDMA_readChannel_byteAlignerTo_forwardOutputLast)
	$display("Error: \"/home/wimi/jah/projects/Bluespec/done/BlueDMA/src/ByteAligner.bsv\", line 116, column 32: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_blueDMA_readChannel_byteAlignerTo_forwardOutput] and\n  [RL_blueDMA_readChannel_byteAlignerTo_forwardOutputLast] ) fired in the same\n  clock cycle.\n");
    if (m64_axi_aresetn != `BSV_RESET_VALUE)
      if (blueDMA_readChannel_mimoConv_ff$dEMPTY_N)
	$display("New request with %d words",
		 $unsigned(IF_blueDMA_readChannel_mimoConv_ff_first__644__ETC___d1650));
  end
  // synopsys translate_on
endmodule  // mkBlueDMAVivado

