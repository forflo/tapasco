//
// Generated by Bluespec Compiler, version 2017.07.A (build 1da80f1, 2017-07-21)
//
// On Fri Jan 25 18:56:18 CET 2019
//
//
// Ports:
// Name                         I/O  size props
// S_AXI_CONF_arready             O     1 reg
// S_AXI_CONF_rvalid              O     1 reg
// S_AXI_CONF_rdata               O    64
// S_AXI_CONF_rresp               O     2
// S_AXI_CONF_awready             O     1
// S_AXI_CONF_wready              O     1
// S_AXI_CONF_bvalid              O     1 reg
// S_AXI_CONF_bresp               O     2
// S_AXI_arready                  O     1 reg
// S_AXI_rvalid                   O     1 reg
// S_AXI_rid                      O     6
// S_AXI_rdata                    O   128
// S_AXI_rresp                    O     2
// S_AXI_rlast                    O     1
// S_AXI_awready                  O     1 reg
// S_AXI_wready                   O     1 reg
// S_AXI_bvalid                   O     1 reg
// S_AXI_bresp                    O     2
// S_AXI_bid                      O     6
// M_AXI_arvalid                  O     1 reg
// M_AXI_arid                     O     6
// M_AXI_araddr                   O    64
// M_AXI_arlen                    O     8
// M_AXI_arsize                   O     3
// M_AXI_arburst                  O     2
// M_AXI_arlock                   O     1
// M_AXI_arcache                  O     4
// M_AXI_arprot                   O     3
// M_AXI_arqos                    O     4
// M_AXI_arregion                 O     4
// M_AXI_rready                   O     1 reg
// M_AXI_awvalid                  O     1 reg
// M_AXI_awid                     O     6
// M_AXI_awaddr                   O    64
// M_AXI_awlen                    O     8
// M_AXI_awsize                   O     3
// M_AXI_awburst                  O     2
// M_AXI_awlock                   O     1
// M_AXI_awcache                  O     4
// M_AXI_awprot                   O     3
// M_AXI_awqos                    O     4
// M_AXI_awregion                 O     4
// M_AXI_wvalid                   O     1 reg
// M_AXI_wdata                    O   128
// M_AXI_wstrb                    O    16
// M_AXI_wlast                    O     1
// M_AXI_bready                   O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// S_AXI_CONF_arvalid             I     1
// S_AXI_CONF_araddr              I    12 reg
// S_AXI_CONF_arprot              I     3 reg
// S_AXI_CONF_rready              I     1
// S_AXI_CONF_awvalid             I     1
// S_AXI_CONF_awaddr              I    12
// S_AXI_CONF_awprot              I     3
// S_AXI_CONF_wvalid              I     1
// S_AXI_CONF_wdata               I    64
// S_AXI_CONF_wstrb               I     8
// S_AXI_CONF_bready              I     1
// S_AXI_arvalid                  I     1
// S_AXI_arid                     I     6
// S_AXI_araddr                   I    64
// S_AXI_arlen                    I     8
// S_AXI_arsize                   I     3
// S_AXI_arburst                  I     2
// S_AXI_arlock                   I     1
// S_AXI_arcache                  I     4
// S_AXI_arprot                   I     3
// S_AXI_arqos                    I     4
// S_AXI_arregion                 I     4
// S_AXI_rready                   I     1
// S_AXI_awvalid                  I     1
// S_AXI_awid                     I     6
// S_AXI_awaddr                   I    64
// S_AXI_awlen                    I     8
// S_AXI_awsize                   I     3
// S_AXI_awburst                  I     2
// S_AXI_awlock                   I     1
// S_AXI_awcache                  I     4
// S_AXI_awprot                   I     3
// S_AXI_awqos                    I     4
// S_AXI_awregion                 I     4
// S_AXI_wvalid                   I     1
// S_AXI_wdata                    I   128 reg
// S_AXI_wstrb                    I    16 reg
// S_AXI_wlast                    I     1 reg
// S_AXI_bready                   I     1
// M_AXI_arready                  I     1
// M_AXI_rvalid                   I     1
// M_AXI_rid                      I     6 reg
// M_AXI_rdata                    I   128 reg
// M_AXI_rresp                    I     2 reg
// M_AXI_rlast                    I     1 reg
// M_AXI_awready                  I     1
// M_AXI_wready                   I     1
// M_AXI_bvalid                   I     1
// M_AXI_bresp                    I     2 reg
// M_AXI_bid                      I     6 reg
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkAXIOffset(CLK,
		   RST_N,

		   S_AXI_CONF_arready,

		   S_AXI_CONF_arvalid,

		   S_AXI_CONF_araddr,

		   S_AXI_CONF_arprot,

		   S_AXI_CONF_rvalid,

		   S_AXI_CONF_rready,

		   S_AXI_CONF_rdata,

		   S_AXI_CONF_rresp,

		   S_AXI_CONF_awready,

		   S_AXI_CONF_awvalid,

		   S_AXI_CONF_awaddr,

		   S_AXI_CONF_awprot,

		   S_AXI_CONF_wready,

		   S_AXI_CONF_wvalid,

		   S_AXI_CONF_wdata,

		   S_AXI_CONF_wstrb,

		   S_AXI_CONF_bvalid,

		   S_AXI_CONF_bready,

		   S_AXI_CONF_bresp,

		   S_AXI_arvalid,

		   S_AXI_arready,

		   S_AXI_arid,
		   S_AXI_araddr,
		   S_AXI_arlen,
		   S_AXI_arsize,
		   S_AXI_arburst,
		   S_AXI_arlock,
		   S_AXI_arcache,
		   S_AXI_arprot,
		   S_AXI_arqos,
		   S_AXI_arregion,

		   S_AXI_rready,

		   S_AXI_rvalid,

		   S_AXI_rid,

		   S_AXI_rdata,

		   S_AXI_rresp,

		   S_AXI_rlast,

		   S_AXI_awready,

		   S_AXI_awvalid,

		   S_AXI_awid,
		   S_AXI_awaddr,
		   S_AXI_awlen,
		   S_AXI_awsize,
		   S_AXI_awburst,
		   S_AXI_awlock,
		   S_AXI_awcache,
		   S_AXI_awprot,
		   S_AXI_awqos,
		   S_AXI_awregion,

		   S_AXI_wready,

		   S_AXI_wvalid,

		   S_AXI_wdata,
		   S_AXI_wstrb,
		   S_AXI_wlast,

		   S_AXI_bready,

		   S_AXI_bvalid,

		   S_AXI_bresp,

		   S_AXI_bid,

		   M_AXI_arvalid,

		   M_AXI_arready,

		   M_AXI_arid,

		   M_AXI_araddr,

		   M_AXI_arlen,

		   M_AXI_arsize,

		   M_AXI_arburst,

		   M_AXI_arlock,

		   M_AXI_arcache,

		   M_AXI_arprot,

		   M_AXI_arqos,

		   M_AXI_arregion,

		   M_AXI_rready,

		   M_AXI_rvalid,

		   M_AXI_rid,
		   M_AXI_rdata,
		   M_AXI_rresp,
		   M_AXI_rlast,

		   M_AXI_awready,

		   M_AXI_awvalid,

		   M_AXI_awid,

		   M_AXI_awaddr,

		   M_AXI_awlen,

		   M_AXI_awsize,

		   M_AXI_awburst,

		   M_AXI_awlock,

		   M_AXI_awcache,

		   M_AXI_awprot,

		   M_AXI_awqos,

		   M_AXI_awregion,

		   M_AXI_wready,

		   M_AXI_wvalid,

		   M_AXI_wdata,

		   M_AXI_wstrb,

		   M_AXI_wlast,

		   M_AXI_bvalid,

		   M_AXI_bready,

		   M_AXI_bresp,
		   M_AXI_bid);
  input  CLK;
  input  RST_N;

  // value method s_rd_arready
  output S_AXI_CONF_arready;

  // action method s_rd_parvalid
  input  S_AXI_CONF_arvalid;

  // action method s_rd_paraddr
  input  [11 : 0] S_AXI_CONF_araddr;

  // action method s_rd_parprot
  input  [2 : 0] S_AXI_CONF_arprot;

  // value method s_rd_rvalid
  output S_AXI_CONF_rvalid;

  // action method s_rd_prready
  input  S_AXI_CONF_rready;

  // value method s_rd_rdata
  output [63 : 0] S_AXI_CONF_rdata;

  // value method s_rd_rresp
  output [1 : 0] S_AXI_CONF_rresp;

  // value method s_wr_awready
  output S_AXI_CONF_awready;

  // action method s_wr_pawvalid
  input  S_AXI_CONF_awvalid;

  // action method s_wr_pawaddr
  input  [11 : 0] S_AXI_CONF_awaddr;

  // action method s_wr_pawprot
  input  [2 : 0] S_AXI_CONF_awprot;

  // value method s_wr_wready
  output S_AXI_CONF_wready;

  // action method s_wr_pwvalid
  input  S_AXI_CONF_wvalid;

  // action method s_wr_pwdata
  input  [63 : 0] S_AXI_CONF_wdata;

  // action method s_wr_pwstrb
  input  [7 : 0] S_AXI_CONF_wstrb;

  // value method s_wr_bvalid
  output S_AXI_CONF_bvalid;

  // action method s_wr_pbready
  input  S_AXI_CONF_bready;

  // value method s_wr_bresp
  output [1 : 0] S_AXI_CONF_bresp;

  // action method in_rd_parvalid
  input  S_AXI_arvalid;

  // value method in_rd_arready
  output S_AXI_arready;

  // action method in_rd_parchannel
  input  [5 : 0] S_AXI_arid;
  input  [63 : 0] S_AXI_araddr;
  input  [7 : 0] S_AXI_arlen;
  input  [2 : 0] S_AXI_arsize;
  input  [1 : 0] S_AXI_arburst;
  input  S_AXI_arlock;
  input  [3 : 0] S_AXI_arcache;
  input  [2 : 0] S_AXI_arprot;
  input  [3 : 0] S_AXI_arqos;
  input  [3 : 0] S_AXI_arregion;

  // action method in_rd_prready
  input  S_AXI_rready;

  // value method in_rd_rvalid
  output S_AXI_rvalid;

  // value method in_rd_rid
  output [5 : 0] S_AXI_rid;

  // value method in_rd_rdata
  output [127 : 0] S_AXI_rdata;

  // value method in_rd_rresp
  output [1 : 0] S_AXI_rresp;

  // value method in_rd_rlast
  output S_AXI_rlast;

  // value method in_rd_ruser

  // value method in_wr_awready
  output S_AXI_awready;

  // action method in_wr_pawvalid
  input  S_AXI_awvalid;

  // action method in_wr_pawchannel
  input  [5 : 0] S_AXI_awid;
  input  [63 : 0] S_AXI_awaddr;
  input  [7 : 0] S_AXI_awlen;
  input  [2 : 0] S_AXI_awsize;
  input  [1 : 0] S_AXI_awburst;
  input  S_AXI_awlock;
  input  [3 : 0] S_AXI_awcache;
  input  [2 : 0] S_AXI_awprot;
  input  [3 : 0] S_AXI_awqos;
  input  [3 : 0] S_AXI_awregion;

  // value method in_wr_wready
  output S_AXI_wready;

  // action method in_wr_pwvalid
  input  S_AXI_wvalid;

  // action method in_wr_pwchannel
  input  [127 : 0] S_AXI_wdata;
  input  [15 : 0] S_AXI_wstrb;
  input  S_AXI_wlast;

  // action method in_wr_pbready
  input  S_AXI_bready;

  // value method in_wr_bvalid
  output S_AXI_bvalid;

  // value method in_wr_bresp
  output [1 : 0] S_AXI_bresp;

  // value method in_wr_bid
  output [5 : 0] S_AXI_bid;

  // value method in_wr_buser

  // value method out_rd_arvalid
  output M_AXI_arvalid;

  // action method out_rd_parready
  input  M_AXI_arready;

  // value method out_rd_arid
  output [5 : 0] M_AXI_arid;

  // value method out_rd_araddr
  output [63 : 0] M_AXI_araddr;

  // value method out_rd_arlen
  output [7 : 0] M_AXI_arlen;

  // value method out_rd_arsize
  output [2 : 0] M_AXI_arsize;

  // value method out_rd_arburst
  output [1 : 0] M_AXI_arburst;

  // value method out_rd_arlock
  output M_AXI_arlock;

  // value method out_rd_arcache
  output [3 : 0] M_AXI_arcache;

  // value method out_rd_arprot
  output [2 : 0] M_AXI_arprot;

  // value method out_rd_arqos
  output [3 : 0] M_AXI_arqos;

  // value method out_rd_arregion
  output [3 : 0] M_AXI_arregion;

  // value method out_rd_aruser

  // value method out_rd_rready
  output M_AXI_rready;

  // action method out_rd_prvalid
  input  M_AXI_rvalid;

  // action method out_rd_prchannel
  input  [5 : 0] M_AXI_rid;
  input  [127 : 0] M_AXI_rdata;
  input  [1 : 0] M_AXI_rresp;
  input  M_AXI_rlast;

  // action method out_wr_pawready
  input  M_AXI_awready;

  // value method out_wr_awvalid
  output M_AXI_awvalid;

  // value method out_wr_awid
  output [5 : 0] M_AXI_awid;

  // value method out_wr_awaddr
  output [63 : 0] M_AXI_awaddr;

  // value method out_wr_awlen
  output [7 : 0] M_AXI_awlen;

  // value method out_wr_awsize
  output [2 : 0] M_AXI_awsize;

  // value method out_wr_awburst
  output [1 : 0] M_AXI_awburst;

  // value method out_wr_awlock
  output M_AXI_awlock;

  // value method out_wr_awcache
  output [3 : 0] M_AXI_awcache;

  // value method out_wr_awprot
  output [2 : 0] M_AXI_awprot;

  // value method out_wr_awqos
  output [3 : 0] M_AXI_awqos;

  // value method out_wr_awregion
  output [3 : 0] M_AXI_awregion;

  // value method out_wr_awuser

  // action method out_wr_pwready
  input  M_AXI_wready;

  // value method out_wr_wvalid
  output M_AXI_wvalid;

  // value method out_wr_wdata
  output [127 : 0] M_AXI_wdata;

  // value method out_wr_wstrb
  output [15 : 0] M_AXI_wstrb;

  // value method out_wr_wlast
  output M_AXI_wlast;

  // value method out_wr_wuser

  // action method out_wr_pbvalid
  input  M_AXI_bvalid;

  // value method out_wr_bready
  output M_AXI_bready;

  // action method out_wr_bin
  input  [1 : 0] M_AXI_bresp;
  input  [5 : 0] M_AXI_bid;

  // signals for module outputs
  wire [127 : 0] M_AXI_wdata, S_AXI_rdata;
  wire [63 : 0] M_AXI_araddr, M_AXI_awaddr, S_AXI_CONF_rdata;
  wire [15 : 0] M_AXI_wstrb;
  wire [7 : 0] M_AXI_arlen, M_AXI_awlen;
  wire [5 : 0] M_AXI_arid, M_AXI_awid, S_AXI_bid, S_AXI_rid;
  wire [3 : 0] M_AXI_arcache,
	       M_AXI_arqos,
	       M_AXI_arregion,
	       M_AXI_awcache,
	       M_AXI_awqos,
	       M_AXI_awregion;
  wire [2 : 0] M_AXI_arprot, M_AXI_arsize, M_AXI_awprot, M_AXI_awsize;
  wire [1 : 0] M_AXI_arburst,
	       M_AXI_awburst,
	       S_AXI_CONF_bresp,
	       S_AXI_CONF_rresp,
	       S_AXI_bresp,
	       S_AXI_rresp;
  wire M_AXI_arlock,
       M_AXI_arvalid,
       M_AXI_awlock,
       M_AXI_awvalid,
       M_AXI_bready,
       M_AXI_rready,
       M_AXI_wlast,
       M_AXI_wvalid,
       S_AXI_CONF_arready,
       S_AXI_CONF_awready,
       S_AXI_CONF_bvalid,
       S_AXI_CONF_rvalid,
       S_AXI_CONF_wready,
       S_AXI_arready,
       S_AXI_awready,
       S_AXI_bvalid,
       S_AXI_rlast,
       S_AXI_rvalid,
       S_AXI_wready;

  // inlined wires
  reg [3 : 0] masterRead_warcache$wget, masterWrite_wawcache$wget;
  wire [144 : 0] slaveWrite_arinpkg_data$wget;
  wire [136 : 0] masterRead_rinpkg$wget;
  wire [98 : 0] slaveRead_arinpkg$wget, slaveWrite_arinpkg_addr$wget;
  wire [72 : 0] s_config_writeSlave_dataIn_rv$port0__write_1,
		s_config_writeSlave_dataIn_rv$port1__read,
		s_config_writeSlave_dataIn_rv$port2__read;
  wire [15 : 0] s_config_writeSlave_addrIn_rv$port0__write_1,
		s_config_writeSlave_addrIn_rv$port1__read,
		s_config_writeSlave_addrIn_rv$port2__read;
  wire [7 : 0] masterWrite_rinpkg$wget;
  wire s_config_readIsHandled$whas,
       s_config_writeIsHandled$whas,
       s_config_writeSlave_addrIn_rv$EN_port0__write,
       s_config_writeSlave_addrIn_rv$EN_port1__write,
       s_config_writeSlave_dataIn_rv$EN_port0__write,
       s_config_writeSlave_dataIn_rv$EN_port1__write;

  // register offset
  reg [63 : 0] offset;
  wire [63 : 0] offset$D_IN;
  wire offset$EN;

  // register offset_bits
  reg [63 : 0] offset_bits;
  wire [63 : 0] offset_bits$D_IN;
  wire offset_bits$EN;

  // register s_config_readBusy
  reg s_config_readBusy;
  wire s_config_readBusy$D_IN, s_config_readBusy$EN;

  // register s_config_writeBusy
  reg s_config_writeBusy;
  wire s_config_writeBusy$D_IN, s_config_writeBusy$EN;

  // register s_config_writeSlave_addrIn_rv
  reg [15 : 0] s_config_writeSlave_addrIn_rv;
  wire [15 : 0] s_config_writeSlave_addrIn_rv$D_IN;
  wire s_config_writeSlave_addrIn_rv$EN;

  // register s_config_writeSlave_dataIn_rv
  reg [72 : 0] s_config_writeSlave_dataIn_rv;
  wire [72 : 0] s_config_writeSlave_dataIn_rv$D_IN;
  wire s_config_writeSlave_dataIn_rv$EN;

  // ports of submodule masterRead_in
  wire [98 : 0] masterRead_in$D_IN, masterRead_in$D_OUT;
  wire masterRead_in$CLR,
       masterRead_in$DEQ,
       masterRead_in$EMPTY_N,
       masterRead_in$ENQ,
       masterRead_in$FULL_N;

  // ports of submodule masterRead_out
  wire [136 : 0] masterRead_out$D_IN, masterRead_out$D_OUT;
  wire masterRead_out$CLR,
       masterRead_out$DEQ,
       masterRead_out$EMPTY_N,
       masterRead_out$ENQ,
       masterRead_out$FULL_N;

  // ports of submodule masterWrite_in_addr
  wire [98 : 0] masterWrite_in_addr$D_IN, masterWrite_in_addr$D_OUT;
  wire masterWrite_in_addr$CLR,
       masterWrite_in_addr$DEQ,
       masterWrite_in_addr$EMPTY_N,
       masterWrite_in_addr$ENQ,
       masterWrite_in_addr$FULL_N;

  // ports of submodule masterWrite_in_data
  wire [144 : 0] masterWrite_in_data$D_IN, masterWrite_in_data$D_OUT;
  wire masterWrite_in_data$CLR,
       masterWrite_in_data$DEQ,
       masterWrite_in_data$EMPTY_N,
       masterWrite_in_data$ENQ,
       masterWrite_in_data$FULL_N;

  // ports of submodule masterWrite_out
  wire [7 : 0] masterWrite_out$D_IN, masterWrite_out$D_OUT;
  wire masterWrite_out$CLR,
       masterWrite_out$DEQ,
       masterWrite_out$EMPTY_N,
       masterWrite_out$ENQ,
       masterWrite_out$FULL_N;

  // ports of submodule s_config_readSlave_in
  wire [14 : 0] s_config_readSlave_in$D_IN, s_config_readSlave_in$D_OUT;
  wire s_config_readSlave_in$CLR,
       s_config_readSlave_in$DEQ,
       s_config_readSlave_in$EMPTY_N,
       s_config_readSlave_in$ENQ,
       s_config_readSlave_in$FULL_N;

  // ports of submodule s_config_readSlave_out
  reg [65 : 0] s_config_readSlave_out$D_IN;
  wire [65 : 0] s_config_readSlave_out$D_OUT;
  wire s_config_readSlave_out$CLR,
       s_config_readSlave_out$DEQ,
       s_config_readSlave_out$EMPTY_N,
       s_config_readSlave_out$ENQ,
       s_config_readSlave_out$FULL_N;

  // ports of submodule s_config_writeSlave_in
  wire [86 : 0] s_config_writeSlave_in$D_IN, s_config_writeSlave_in$D_OUT;
  wire s_config_writeSlave_in$CLR,
       s_config_writeSlave_in$DEQ,
       s_config_writeSlave_in$EMPTY_N,
       s_config_writeSlave_in$ENQ,
       s_config_writeSlave_in$FULL_N;

  // ports of submodule s_config_writeSlave_out
  wire [1 : 0] s_config_writeSlave_out$D_IN, s_config_writeSlave_out$D_OUT;
  wire s_config_writeSlave_out$CLR,
       s_config_writeSlave_out$DEQ,
       s_config_writeSlave_out$EMPTY_N,
       s_config_writeSlave_out$ENQ,
       s_config_writeSlave_out$FULL_N;

  // ports of submodule slaveRead_in
  wire [98 : 0] slaveRead_in$D_IN, slaveRead_in$D_OUT;
  wire slaveRead_in$CLR,
       slaveRead_in$DEQ,
       slaveRead_in$EMPTY_N,
       slaveRead_in$ENQ,
       slaveRead_in$FULL_N;

  // ports of submodule slaveRead_out
  wire [136 : 0] slaveRead_out$D_IN, slaveRead_out$D_OUT;
  wire slaveRead_out$CLR,
       slaveRead_out$DEQ,
       slaveRead_out$EMPTY_N,
       slaveRead_out$ENQ,
       slaveRead_out$FULL_N;

  // ports of submodule slaveWrite_in_addr
  wire [98 : 0] slaveWrite_in_addr$D_IN, slaveWrite_in_addr$D_OUT;
  wire slaveWrite_in_addr$CLR,
       slaveWrite_in_addr$DEQ,
       slaveWrite_in_addr$EMPTY_N,
       slaveWrite_in_addr$ENQ,
       slaveWrite_in_addr$FULL_N;

  // ports of submodule slaveWrite_in_data
  wire [144 : 0] slaveWrite_in_data$D_IN, slaveWrite_in_data$D_OUT;
  wire slaveWrite_in_data$CLR,
       slaveWrite_in_data$DEQ,
       slaveWrite_in_data$EMPTY_N,
       slaveWrite_in_data$ENQ,
       slaveWrite_in_data$FULL_N;

  // ports of submodule slaveWrite_out
  wire [7 : 0] slaveWrite_out$D_IN, slaveWrite_out$D_OUT;
  wire slaveWrite_out$CLR,
       slaveWrite_out$DEQ,
       slaveWrite_out$EMPTY_N,
       slaveWrite_out$ENQ,
       slaveWrite_out$FULL_N;

  // rule scheduling signals
  wire WILL_FIRE_RL_s_config_1_axiWriteFallback,
       WILL_FIRE_RL_s_config_1_axiWriteSpecial,
       WILL_FIRE_RL_s_config_1_axiWriteSpecialIsHandled,
       WILL_FIRE_RL_s_config_1_axiWriteSpecialIsHandled_1,
       WILL_FIRE_RL_s_config_1_axiWriteSpecial_1,
       WILL_FIRE_RL_s_config_axiReadFallback,
       WILL_FIRE_RL_s_config_axiReadSpecial,
       WILL_FIRE_RL_s_config_axiReadSpecialIsHandled,
       WILL_FIRE_RL_s_config_axiReadSpecialIsHandled_1,
       WILL_FIRE_RL_s_config_axiReadSpecial_1;

  // inputs to muxes for submodule ports
  wire [65 : 0] MUX_s_config_readSlave_out$enq_1__VAL_1,
		MUX_s_config_readSlave_out$enq_1__VAL_2;

  // remaining internal signals
  reg [3 : 0] CASE_S_AXI_arcache_0_S_AXI_arcache_1_S_AXI_arc_ETC__q1,
	      CASE_S_AXI_awcache_0_S_AXI_awcache_1_S_AXI_awc_ETC__q2,
	      CASE_masterRead_warcachewget_1_masterRead_war_ETC__q3,
	      CASE_masterWrite_wawcachewget_1_masterWrite_w_ETC__q4,
	      CASE_slaveRead_arinpkgwget_BITS_14_TO_11_0_sl_ETC__q7,
	      CASE_slaveRead_inD_OUT_BITS_14_TO_11_0_slaveR_ETC__q5,
	      CASE_slaveWrite_arinpkg_addrwget_BITS_14_TO_1_ETC__q8,
	      CASE_slaveWrite_in_addrD_OUT_BITS_14_TO_11_0__ETC__q6;
  wire [63 : 0] _1_SL_offset_bits_7_28_MINUS_1___d229,
		mask__h19233,
		offset_tmp__h10764,
		x_addr__h10750,
		x_addr__h19220,
		y__h19246;
  wire [14 : 0] IF_S_AXI_arcache_EQ_0_72_OR_S_AXI_arcache_EQ_1_ETC___d587,
		IF_S_AXI_awcache_EQ_0_00_OR_S_AXI_awcache_EQ_1_ETC___d615;

  // value method s_rd_arready
  assign S_AXI_CONF_arready = s_config_readSlave_in$FULL_N ;

  // value method s_rd_rvalid
  assign S_AXI_CONF_rvalid = s_config_readSlave_out$EMPTY_N ;

  // value method s_rd_rdata
  assign S_AXI_CONF_rdata =
	     s_config_readSlave_out$EMPTY_N ?
	       s_config_readSlave_out$D_OUT[65:2] :
	       64'd0 ;

  // value method s_rd_rresp
  assign S_AXI_CONF_rresp =
	     s_config_readSlave_out$EMPTY_N ?
	       s_config_readSlave_out$D_OUT[1:0] :
	       2'd0 ;

  // value method s_wr_awready
  assign S_AXI_CONF_awready = !s_config_writeSlave_addrIn_rv[15] ;

  // value method s_wr_wready
  assign S_AXI_CONF_wready = !s_config_writeSlave_dataIn_rv[72] ;

  // value method s_wr_bvalid
  assign S_AXI_CONF_bvalid = s_config_writeSlave_out$EMPTY_N ;

  // value method s_wr_bresp
  assign S_AXI_CONF_bresp =
	     s_config_writeSlave_out$EMPTY_N ?
	       s_config_writeSlave_out$D_OUT :
	       2'd0 ;

  // value method in_rd_arready
  assign S_AXI_arready = slaveRead_in$FULL_N ;

  // value method in_rd_rvalid
  assign S_AXI_rvalid = slaveRead_out$EMPTY_N ;

  // value method in_rd_rid
  assign S_AXI_rid =
	     slaveRead_out$EMPTY_N ? slaveRead_out$D_OUT[136:131] : 6'd0 ;

  // value method in_rd_rdata
  assign S_AXI_rdata =
	     slaveRead_out$EMPTY_N ? slaveRead_out$D_OUT[130:3] : 128'd0 ;

  // value method in_rd_rresp
  assign S_AXI_rresp =
	     slaveRead_out$EMPTY_N ? slaveRead_out$D_OUT[2:1] : 2'd0 ;

  // value method in_rd_rlast
  assign S_AXI_rlast = slaveRead_out$EMPTY_N && slaveRead_out$D_OUT[0] ;

  // value method in_wr_awready
  assign S_AXI_awready = slaveWrite_in_addr$FULL_N ;

  // value method in_wr_wready
  assign S_AXI_wready = slaveWrite_in_data$FULL_N ;

  // value method in_wr_bvalid
  assign S_AXI_bvalid = slaveWrite_out$EMPTY_N ;

  // value method in_wr_bresp
  assign S_AXI_bresp =
	     slaveWrite_out$EMPTY_N ? slaveWrite_out$D_OUT[1:0] : 2'd0 ;

  // value method in_wr_bid
  assign S_AXI_bid =
	     slaveWrite_out$EMPTY_N ? slaveWrite_out$D_OUT[7:2] : 6'd0 ;

  // value method out_rd_arvalid
  assign M_AXI_arvalid = masterRead_in$EMPTY_N ;

  // value method out_rd_arid
  assign M_AXI_arid =
	     masterRead_in$EMPTY_N ? masterRead_in$D_OUT[98:93] : 6'd0 ;

  // value method out_rd_araddr
  assign M_AXI_araddr =
	     masterRead_in$EMPTY_N ? masterRead_in$D_OUT[92:29] : 64'd0 ;

  // value method out_rd_arlen
  assign M_AXI_arlen =
	     masterRead_in$EMPTY_N ? masterRead_in$D_OUT[28:21] : 8'd0 ;

  // value method out_rd_arsize
  assign M_AXI_arsize =
	     masterRead_in$EMPTY_N ? masterRead_in$D_OUT[20:18] : 3'd0 ;

  // value method out_rd_arburst
  assign M_AXI_arburst =
	     masterRead_in$EMPTY_N ? masterRead_in$D_OUT[17:16] : 2'd0 ;

  // value method out_rd_arlock
  assign M_AXI_arlock = masterRead_in$EMPTY_N && masterRead_in$D_OUT[15] ;

  // value method out_rd_arcache
  assign M_AXI_arcache =
	     (!masterRead_in$EMPTY_N || masterRead_warcache$wget == 4'd0) ?
	       4'd0 :
	       CASE_masterRead_warcachewget_1_masterRead_war_ETC__q3 ;

  // value method out_rd_arprot
  assign M_AXI_arprot =
	     masterRead_in$EMPTY_N ? masterRead_in$D_OUT[10:8] : 3'd0 ;

  // value method out_rd_arqos
  assign M_AXI_arqos =
	     masterRead_in$EMPTY_N ? masterRead_in$D_OUT[7:4] : 4'd0 ;

  // value method out_rd_arregion
  assign M_AXI_arregion =
	     masterRead_in$EMPTY_N ? masterRead_in$D_OUT[3:0] : 4'd0 ;

  // value method out_rd_rready
  assign M_AXI_rready = masterRead_out$FULL_N ;

  // value method out_wr_awvalid
  assign M_AXI_awvalid = masterWrite_in_addr$EMPTY_N ;

  // value method out_wr_awid
  assign M_AXI_awid =
	     masterWrite_in_addr$EMPTY_N ?
	       masterWrite_in_addr$D_OUT[98:93] :
	       6'd0 ;

  // value method out_wr_awaddr
  assign M_AXI_awaddr =
	     masterWrite_in_addr$EMPTY_N ?
	       masterWrite_in_addr$D_OUT[92:29] :
	       64'd0 ;

  // value method out_wr_awlen
  assign M_AXI_awlen =
	     masterWrite_in_addr$EMPTY_N ?
	       masterWrite_in_addr$D_OUT[28:21] :
	       8'd0 ;

  // value method out_wr_awsize
  assign M_AXI_awsize =
	     masterWrite_in_addr$EMPTY_N ?
	       masterWrite_in_addr$D_OUT[20:18] :
	       3'd0 ;

  // value method out_wr_awburst
  assign M_AXI_awburst =
	     masterWrite_in_addr$EMPTY_N ?
	       masterWrite_in_addr$D_OUT[17:16] :
	       2'd0 ;

  // value method out_wr_awlock
  assign M_AXI_awlock =
	     masterWrite_in_addr$EMPTY_N && masterWrite_in_addr$D_OUT[15] ;

  // value method out_wr_awcache
  assign M_AXI_awcache =
	     (!masterWrite_in_addr$EMPTY_N ||
	      masterWrite_wawcache$wget == 4'd0) ?
	       4'd0 :
	       CASE_masterWrite_wawcachewget_1_masterWrite_w_ETC__q4 ;

  // value method out_wr_awprot
  assign M_AXI_awprot =
	     masterWrite_in_addr$EMPTY_N ?
	       masterWrite_in_addr$D_OUT[10:8] :
	       3'd0 ;

  // value method out_wr_awqos
  assign M_AXI_awqos =
	     masterWrite_in_addr$EMPTY_N ?
	       masterWrite_in_addr$D_OUT[7:4] :
	       4'd0 ;

  // value method out_wr_awregion
  assign M_AXI_awregion =
	     masterWrite_in_addr$EMPTY_N ?
	       masterWrite_in_addr$D_OUT[3:0] :
	       4'd0 ;

  // value method out_wr_wvalid
  assign M_AXI_wvalid = masterWrite_in_data$EMPTY_N ;

  // value method out_wr_wdata
  assign M_AXI_wdata =
	     masterWrite_in_data$EMPTY_N ?
	       masterWrite_in_data$D_OUT[144:17] :
	       128'd0 ;

  // value method out_wr_wstrb
  assign M_AXI_wstrb =
	     masterWrite_in_data$EMPTY_N ?
	       masterWrite_in_data$D_OUT[16:1] :
	       16'd0 ;

  // value method out_wr_wlast
  assign M_AXI_wlast =
	     masterWrite_in_data$EMPTY_N && masterWrite_in_data$D_OUT[0] ;

  // value method out_wr_bready
  assign M_AXI_bready = masterWrite_out$FULL_N ;

  // submodule masterRead_in
  FIFO2 #(.width(32'd99), .guarded(32'd1)) masterRead_in(.RST(RST_N),
							 .CLK(CLK),
							 .D_IN(masterRead_in$D_IN),
							 .ENQ(masterRead_in$ENQ),
							 .DEQ(masterRead_in$DEQ),
							 .CLR(masterRead_in$CLR),
							 .D_OUT(masterRead_in$D_OUT),
							 .FULL_N(masterRead_in$FULL_N),
							 .EMPTY_N(masterRead_in$EMPTY_N));

  // submodule masterRead_out
  FIFO2 #(.width(32'd137), .guarded(32'd1)) masterRead_out(.RST(RST_N),
							   .CLK(CLK),
							   .D_IN(masterRead_out$D_IN),
							   .ENQ(masterRead_out$ENQ),
							   .DEQ(masterRead_out$DEQ),
							   .CLR(masterRead_out$CLR),
							   .D_OUT(masterRead_out$D_OUT),
							   .FULL_N(masterRead_out$FULL_N),
							   .EMPTY_N(masterRead_out$EMPTY_N));

  // submodule masterWrite_in_addr
  FIFO2 #(.width(32'd99), .guarded(32'd1)) masterWrite_in_addr(.RST(RST_N),
							       .CLK(CLK),
							       .D_IN(masterWrite_in_addr$D_IN),
							       .ENQ(masterWrite_in_addr$ENQ),
							       .DEQ(masterWrite_in_addr$DEQ),
							       .CLR(masterWrite_in_addr$CLR),
							       .D_OUT(masterWrite_in_addr$D_OUT),
							       .FULL_N(masterWrite_in_addr$FULL_N),
							       .EMPTY_N(masterWrite_in_addr$EMPTY_N));

  // submodule masterWrite_in_data
  FIFO2 #(.width(32'd145), .guarded(32'd1)) masterWrite_in_data(.RST(RST_N),
								.CLK(CLK),
								.D_IN(masterWrite_in_data$D_IN),
								.ENQ(masterWrite_in_data$ENQ),
								.DEQ(masterWrite_in_data$DEQ),
								.CLR(masterWrite_in_data$CLR),
								.D_OUT(masterWrite_in_data$D_OUT),
								.FULL_N(masterWrite_in_data$FULL_N),
								.EMPTY_N(masterWrite_in_data$EMPTY_N));

  // submodule masterWrite_out
  FIFO2 #(.width(32'd8), .guarded(32'd1)) masterWrite_out(.RST(RST_N),
							  .CLK(CLK),
							  .D_IN(masterWrite_out$D_IN),
							  .ENQ(masterWrite_out$ENQ),
							  .DEQ(masterWrite_out$DEQ),
							  .CLR(masterWrite_out$CLR),
							  .D_OUT(masterWrite_out$D_OUT),
							  .FULL_N(masterWrite_out$FULL_N),
							  .EMPTY_N(masterWrite_out$EMPTY_N));

  // submodule s_config_readSlave_in
  FIFO1 #(.width(32'd15), .guarded(32'd1)) s_config_readSlave_in(.RST(RST_N),
								 .CLK(CLK),
								 .D_IN(s_config_readSlave_in$D_IN),
								 .ENQ(s_config_readSlave_in$ENQ),
								 .DEQ(s_config_readSlave_in$DEQ),
								 .CLR(s_config_readSlave_in$CLR),
								 .D_OUT(s_config_readSlave_in$D_OUT),
								 .FULL_N(s_config_readSlave_in$FULL_N),
								 .EMPTY_N(s_config_readSlave_in$EMPTY_N));

  // submodule s_config_readSlave_out
  FIFO1 #(.width(32'd66), .guarded(32'd1)) s_config_readSlave_out(.RST(RST_N),
								  .CLK(CLK),
								  .D_IN(s_config_readSlave_out$D_IN),
								  .ENQ(s_config_readSlave_out$ENQ),
								  .DEQ(s_config_readSlave_out$DEQ),
								  .CLR(s_config_readSlave_out$CLR),
								  .D_OUT(s_config_readSlave_out$D_OUT),
								  .FULL_N(s_config_readSlave_out$FULL_N),
								  .EMPTY_N(s_config_readSlave_out$EMPTY_N));

  // submodule s_config_writeSlave_in
  FIFO1 #(.width(32'd87), .guarded(32'd1)) s_config_writeSlave_in(.RST(RST_N),
								  .CLK(CLK),
								  .D_IN(s_config_writeSlave_in$D_IN),
								  .ENQ(s_config_writeSlave_in$ENQ),
								  .DEQ(s_config_writeSlave_in$DEQ),
								  .CLR(s_config_writeSlave_in$CLR),
								  .D_OUT(s_config_writeSlave_in$D_OUT),
								  .FULL_N(s_config_writeSlave_in$FULL_N),
								  .EMPTY_N(s_config_writeSlave_in$EMPTY_N));

  // submodule s_config_writeSlave_out
  FIFO1 #(.width(32'd2), .guarded(32'd1)) s_config_writeSlave_out(.RST(RST_N),
								  .CLK(CLK),
								  .D_IN(s_config_writeSlave_out$D_IN),
								  .ENQ(s_config_writeSlave_out$ENQ),
								  .DEQ(s_config_writeSlave_out$DEQ),
								  .CLR(s_config_writeSlave_out$CLR),
								  .D_OUT(s_config_writeSlave_out$D_OUT),
								  .FULL_N(s_config_writeSlave_out$FULL_N),
								  .EMPTY_N(s_config_writeSlave_out$EMPTY_N));

  // submodule slaveRead_in
  FIFO2 #(.width(32'd99), .guarded(32'd1)) slaveRead_in(.RST(RST_N),
							.CLK(CLK),
							.D_IN(slaveRead_in$D_IN),
							.ENQ(slaveRead_in$ENQ),
							.DEQ(slaveRead_in$DEQ),
							.CLR(slaveRead_in$CLR),
							.D_OUT(slaveRead_in$D_OUT),
							.FULL_N(slaveRead_in$FULL_N),
							.EMPTY_N(slaveRead_in$EMPTY_N));

  // submodule slaveRead_out
  FIFO2 #(.width(32'd137), .guarded(32'd1)) slaveRead_out(.RST(RST_N),
							  .CLK(CLK),
							  .D_IN(slaveRead_out$D_IN),
							  .ENQ(slaveRead_out$ENQ),
							  .DEQ(slaveRead_out$DEQ),
							  .CLR(slaveRead_out$CLR),
							  .D_OUT(slaveRead_out$D_OUT),
							  .FULL_N(slaveRead_out$FULL_N),
							  .EMPTY_N(slaveRead_out$EMPTY_N));

  // submodule slaveWrite_in_addr
  FIFO2 #(.width(32'd99), .guarded(32'd1)) slaveWrite_in_addr(.RST(RST_N),
							      .CLK(CLK),
							      .D_IN(slaveWrite_in_addr$D_IN),
							      .ENQ(slaveWrite_in_addr$ENQ),
							      .DEQ(slaveWrite_in_addr$DEQ),
							      .CLR(slaveWrite_in_addr$CLR),
							      .D_OUT(slaveWrite_in_addr$D_OUT),
							      .FULL_N(slaveWrite_in_addr$FULL_N),
							      .EMPTY_N(slaveWrite_in_addr$EMPTY_N));

  // submodule slaveWrite_in_data
  FIFO2 #(.width(32'd145), .guarded(32'd1)) slaveWrite_in_data(.RST(RST_N),
							       .CLK(CLK),
							       .D_IN(slaveWrite_in_data$D_IN),
							       .ENQ(slaveWrite_in_data$ENQ),
							       .DEQ(slaveWrite_in_data$DEQ),
							       .CLR(slaveWrite_in_data$CLR),
							       .D_OUT(slaveWrite_in_data$D_OUT),
							       .FULL_N(slaveWrite_in_data$FULL_N),
							       .EMPTY_N(slaveWrite_in_data$EMPTY_N));

  // submodule slaveWrite_out
  FIFO2 #(.width(32'd8), .guarded(32'd1)) slaveWrite_out(.RST(RST_N),
							 .CLK(CLK),
							 .D_IN(slaveWrite_out$D_IN),
							 .ENQ(slaveWrite_out$ENQ),
							 .DEQ(slaveWrite_out$DEQ),
							 .CLR(slaveWrite_out$CLR),
							 .D_OUT(slaveWrite_out$D_OUT),
							 .FULL_N(slaveWrite_out$FULL_N),
							 .EMPTY_N(slaveWrite_out$EMPTY_N));

  // rule RL_s_config_axiReadSpecialIsHandled
  assign WILL_FIRE_RL_s_config_axiReadSpecialIsHandled =
	     s_config_readSlave_in$EMPTY_N &&
	     !s_config_readSlave_in$D_OUT[6] ;

  // rule RL_s_config_axiReadSpecialIsHandled_1
  assign WILL_FIRE_RL_s_config_axiReadSpecialIsHandled_1 =
	     s_config_readSlave_in$EMPTY_N && s_config_readSlave_in$D_OUT[6] ;

  // rule RL_s_config_axiReadSpecial
  assign WILL_FIRE_RL_s_config_axiReadSpecial =
	     s_config_readSlave_in$EMPTY_N && s_config_readSlave_out$FULL_N &&
	     !s_config_readSlave_in$D_OUT[6] &&
	     !s_config_readBusy ;

  // rule RL_s_config_axiReadSpecial_1
  assign WILL_FIRE_RL_s_config_axiReadSpecial_1 =
	     s_config_readSlave_in$EMPTY_N && s_config_readSlave_out$FULL_N &&
	     s_config_readSlave_in$D_OUT[6] &&
	     !s_config_readBusy ;

  // rule RL_s_config_axiReadFallback
  assign WILL_FIRE_RL_s_config_axiReadFallback =
	     s_config_readSlave_in$EMPTY_N && s_config_readSlave_out$FULL_N &&
	     !s_config_readIsHandled$whas ;

  // rule RL_s_config_1_axiWriteSpecialIsHandled
  assign WILL_FIRE_RL_s_config_1_axiWriteSpecialIsHandled =
	     s_config_writeSlave_in$EMPTY_N &&
	     !s_config_writeSlave_in$D_OUT[78] ;

  // rule RL_s_config_1_axiWriteSpecialIsHandled_1
  assign WILL_FIRE_RL_s_config_1_axiWriteSpecialIsHandled_1 =
	     s_config_writeSlave_in$EMPTY_N &&
	     s_config_writeSlave_in$D_OUT[78] ;

  // rule RL_s_config_1_axiWriteFallback
  assign WILL_FIRE_RL_s_config_1_axiWriteFallback =
	     s_config_writeSlave_in$EMPTY_N &&
	     s_config_writeSlave_out$FULL_N &&
	     !s_config_writeIsHandled$whas &&
	     !WILL_FIRE_RL_s_config_1_axiWriteSpecial_1 &&
	     !WILL_FIRE_RL_s_config_1_axiWriteSpecial ;

  // rule RL_s_config_1_axiWriteSpecial
  assign WILL_FIRE_RL_s_config_1_axiWriteSpecial =
	     s_config_writeSlave_in$EMPTY_N &&
	     s_config_writeSlave_out$FULL_N &&
	     !s_config_writeSlave_in$D_OUT[78] &&
	     !s_config_writeBusy ;

  // rule RL_s_config_1_axiWriteSpecial_1
  assign WILL_FIRE_RL_s_config_1_axiWriteSpecial_1 =
	     s_config_writeSlave_in$EMPTY_N &&
	     s_config_writeSlave_out$FULL_N &&
	     s_config_writeSlave_in$D_OUT[78] &&
	     !s_config_writeBusy ;

  // inputs to muxes for submodule ports
  assign MUX_s_config_readSlave_out$enq_1__VAL_1 = { offset, 2'd0 } ;
  assign MUX_s_config_readSlave_out$enq_1__VAL_2 = { offset_bits, 2'd0 } ;

  // inlined wires
  assign s_config_readIsHandled$whas =
	     WILL_FIRE_RL_s_config_axiReadSpecialIsHandled_1 ||
	     WILL_FIRE_RL_s_config_axiReadSpecialIsHandled ;
  assign s_config_writeIsHandled$whas =
	     WILL_FIRE_RL_s_config_1_axiWriteSpecialIsHandled_1 ||
	     WILL_FIRE_RL_s_config_1_axiWriteSpecialIsHandled ;
  always@(masterRead_in$D_OUT)
  begin
    case (masterRead_in$D_OUT[14:11])
      4'd0, 4'd1, 4'd2, 4'd3, 4'd10, 4'd14, 4'd15:
	  masterRead_warcache$wget = masterRead_in$D_OUT[14:11];
      default: masterRead_warcache$wget = 4'd11;
    endcase
  end
  always@(masterWrite_in_addr$D_OUT)
  begin
    case (masterWrite_in_addr$D_OUT[14:11])
      4'd0, 4'd1, 4'd2, 4'd3, 4'd6, 4'd7, 4'd14:
	  masterWrite_wawcache$wget = masterWrite_in_addr$D_OUT[14:11];
      default: masterWrite_wawcache$wget = 4'd15;
    endcase
  end
  assign masterRead_rinpkg$wget =
	     { M_AXI_rid, M_AXI_rdata, M_AXI_rresp, M_AXI_rlast } ;
  assign slaveRead_arinpkg$wget =
	     { S_AXI_arid,
	       S_AXI_araddr,
	       S_AXI_arlen,
	       S_AXI_arsize,
	       S_AXI_arburst,
	       S_AXI_arlock,
	       IF_S_AXI_arcache_EQ_0_72_OR_S_AXI_arcache_EQ_1_ETC___d587 } ;
  assign masterWrite_rinpkg$wget = { M_AXI_bid, M_AXI_bresp } ;
  assign slaveWrite_arinpkg_addr$wget =
	     { S_AXI_awid,
	       S_AXI_awaddr,
	       S_AXI_awlen,
	       S_AXI_awsize,
	       S_AXI_awburst,
	       S_AXI_awlock,
	       IF_S_AXI_awcache_EQ_0_00_OR_S_AXI_awcache_EQ_1_ETC___d615 } ;
  assign slaveWrite_arinpkg_data$wget =
	     { S_AXI_wdata, S_AXI_wstrb, S_AXI_wlast } ;
  assign s_config_writeSlave_addrIn_rv$EN_port0__write =
	     !s_config_writeSlave_addrIn_rv[15] && S_AXI_CONF_awvalid ;
  assign s_config_writeSlave_addrIn_rv$port0__write_1 =
	     { 1'd1, S_AXI_CONF_awaddr, S_AXI_CONF_awprot } ;
  assign s_config_writeSlave_addrIn_rv$port1__read =
	     s_config_writeSlave_addrIn_rv$EN_port0__write ?
	       s_config_writeSlave_addrIn_rv$port0__write_1 :
	       s_config_writeSlave_addrIn_rv ;
  assign s_config_writeSlave_addrIn_rv$EN_port1__write =
	     s_config_writeSlave_addrIn_rv$port1__read[15] &&
	     s_config_writeSlave_dataIn_rv$port1__read[72] &&
	     s_config_writeSlave_in$FULL_N ;
  assign s_config_writeSlave_addrIn_rv$port2__read =
	     s_config_writeSlave_addrIn_rv$EN_port1__write ?
	       16'd10922 :
	       s_config_writeSlave_addrIn_rv$port1__read ;
  assign s_config_writeSlave_dataIn_rv$EN_port0__write =
	     !s_config_writeSlave_dataIn_rv[72] && S_AXI_CONF_wvalid ;
  assign s_config_writeSlave_dataIn_rv$port0__write_1 =
	     { 1'd1, S_AXI_CONF_wdata, S_AXI_CONF_wstrb } ;
  assign s_config_writeSlave_dataIn_rv$port1__read =
	     s_config_writeSlave_dataIn_rv$EN_port0__write ?
	       s_config_writeSlave_dataIn_rv$port0__write_1 :
	       s_config_writeSlave_dataIn_rv ;
  assign s_config_writeSlave_dataIn_rv$EN_port1__write =
	     s_config_writeSlave_addrIn_rv$port1__read[15] &&
	     s_config_writeSlave_dataIn_rv$port1__read[72] &&
	     s_config_writeSlave_in$FULL_N ;
  assign s_config_writeSlave_dataIn_rv$port2__read =
	     s_config_writeSlave_dataIn_rv$EN_port1__write ?
	       73'h0AAAAAAAAAAAAAAAAAA :
	       s_config_writeSlave_dataIn_rv$port1__read ;

  // register offset
  assign offset$D_IN =
	     { s_config_writeSlave_in$D_OUT[10] ?
		 s_config_writeSlave_in$D_OUT[74:67] :
		 offset[63:56],
	       s_config_writeSlave_in$D_OUT[9] ?
		 s_config_writeSlave_in$D_OUT[66:59] :
		 offset[55:48],
	       s_config_writeSlave_in$D_OUT[8] ?
		 s_config_writeSlave_in$D_OUT[58:51] :
		 offset[47:40],
	       s_config_writeSlave_in$D_OUT[7] ?
		 s_config_writeSlave_in$D_OUT[50:43] :
		 offset[39:32],
	       s_config_writeSlave_in$D_OUT[6] ?
		 s_config_writeSlave_in$D_OUT[42:35] :
		 offset[31:24],
	       s_config_writeSlave_in$D_OUT[5] ?
		 s_config_writeSlave_in$D_OUT[34:27] :
		 offset[23:16],
	       s_config_writeSlave_in$D_OUT[4] ?
		 s_config_writeSlave_in$D_OUT[26:19] :
		 offset[15:8],
	       s_config_writeSlave_in$D_OUT[3] ?
		 s_config_writeSlave_in$D_OUT[18:11] :
		 offset[7:0] } ;
  assign offset$EN = WILL_FIRE_RL_s_config_1_axiWriteSpecial ;

  // register offset_bits
  assign offset_bits$D_IN =
	     { s_config_writeSlave_in$D_OUT[10] ?
		 s_config_writeSlave_in$D_OUT[74:67] :
		 offset_bits[63:56],
	       s_config_writeSlave_in$D_OUT[9] ?
		 s_config_writeSlave_in$D_OUT[66:59] :
		 offset_bits[55:48],
	       s_config_writeSlave_in$D_OUT[8] ?
		 s_config_writeSlave_in$D_OUT[58:51] :
		 offset_bits[47:40],
	       s_config_writeSlave_in$D_OUT[7] ?
		 s_config_writeSlave_in$D_OUT[50:43] :
		 offset_bits[39:32],
	       s_config_writeSlave_in$D_OUT[6] ?
		 s_config_writeSlave_in$D_OUT[42:35] :
		 offset_bits[31:24],
	       s_config_writeSlave_in$D_OUT[5] ?
		 s_config_writeSlave_in$D_OUT[34:27] :
		 offset_bits[23:16],
	       s_config_writeSlave_in$D_OUT[4] ?
		 s_config_writeSlave_in$D_OUT[26:19] :
		 offset_bits[15:8],
	       s_config_writeSlave_in$D_OUT[3] ?
		 s_config_writeSlave_in$D_OUT[18:11] :
		 offset_bits[7:0] } ;
  assign offset_bits$EN = WILL_FIRE_RL_s_config_1_axiWriteSpecial_1 ;

  // register s_config_readBusy
  assign s_config_readBusy$D_IN = 1'b0 ;
  assign s_config_readBusy$EN = 1'b0 ;

  // register s_config_writeBusy
  assign s_config_writeBusy$D_IN = 1'b0 ;
  assign s_config_writeBusy$EN = 1'b0 ;

  // register s_config_writeSlave_addrIn_rv
  assign s_config_writeSlave_addrIn_rv$D_IN =
	     s_config_writeSlave_addrIn_rv$port2__read ;
  assign s_config_writeSlave_addrIn_rv$EN = 1'b1 ;

  // register s_config_writeSlave_dataIn_rv
  assign s_config_writeSlave_dataIn_rv$D_IN =
	     s_config_writeSlave_dataIn_rv$port2__read ;
  assign s_config_writeSlave_dataIn_rv$EN = 1'b1 ;

  // submodule masterRead_in
  assign masterRead_in$D_IN =
	     { slaveRead_in$D_OUT[98:93],
	       x_addr__h10750,
	       slaveRead_in$D_OUT[28:15],
	       CASE_slaveRead_inD_OUT_BITS_14_TO_11_0_slaveR_ETC__q5,
	       slaveRead_in$D_OUT[10:0] } ;
  assign masterRead_in$ENQ = slaveRead_in$EMPTY_N && masterRead_in$FULL_N ;
  assign masterRead_in$DEQ = masterRead_in$EMPTY_N && M_AXI_arready ;
  assign masterRead_in$CLR = 1'b0 ;

  // submodule masterRead_out
  assign masterRead_out$D_IN = masterRead_rinpkg$wget ;
  assign masterRead_out$ENQ = masterRead_out$FULL_N && M_AXI_rvalid ;
  assign masterRead_out$DEQ = masterRead_out$EMPTY_N && slaveRead_out$FULL_N ;
  assign masterRead_out$CLR = 1'b0 ;

  // submodule masterWrite_in_addr
  assign masterWrite_in_addr$D_IN =
	     { slaveWrite_in_addr$D_OUT[98:93],
	       x_addr__h19220,
	       slaveWrite_in_addr$D_OUT[28:15],
	       CASE_slaveWrite_in_addrD_OUT_BITS_14_TO_11_0__ETC__q6,
	       slaveWrite_in_addr$D_OUT[10:0] } ;
  assign masterWrite_in_addr$ENQ =
	     slaveWrite_in_addr$EMPTY_N && masterWrite_in_addr$FULL_N ;
  assign masterWrite_in_addr$DEQ =
	     masterWrite_in_addr$EMPTY_N && M_AXI_awready ;
  assign masterWrite_in_addr$CLR = 1'b0 ;

  // submodule masterWrite_in_data
  assign masterWrite_in_data$D_IN = slaveWrite_in_data$D_OUT ;
  assign masterWrite_in_data$ENQ =
	     slaveWrite_in_data$EMPTY_N && masterWrite_in_data$FULL_N ;
  assign masterWrite_in_data$DEQ =
	     masterWrite_in_data$EMPTY_N && M_AXI_wready ;
  assign masterWrite_in_data$CLR = 1'b0 ;

  // submodule masterWrite_out
  assign masterWrite_out$D_IN = masterWrite_rinpkg$wget ;
  assign masterWrite_out$ENQ = masterWrite_out$FULL_N && M_AXI_bvalid ;
  assign masterWrite_out$DEQ =
	     masterWrite_out$EMPTY_N && slaveWrite_out$FULL_N ;
  assign masterWrite_out$CLR = 1'b0 ;

  // submodule s_config_readSlave_in
  assign s_config_readSlave_in$D_IN =
	     { S_AXI_CONF_araddr, S_AXI_CONF_arprot } ;
  assign s_config_readSlave_in$ENQ =
	     s_config_readSlave_in$FULL_N && S_AXI_CONF_arvalid ;
  assign s_config_readSlave_in$DEQ =
	     WILL_FIRE_RL_s_config_axiReadFallback ||
	     WILL_FIRE_RL_s_config_axiReadSpecial_1 ||
	     WILL_FIRE_RL_s_config_axiReadSpecial ;
  assign s_config_readSlave_in$CLR = 1'b0 ;

  // submodule s_config_readSlave_out
  always@(WILL_FIRE_RL_s_config_axiReadSpecial or
	  MUX_s_config_readSlave_out$enq_1__VAL_1 or
	  WILL_FIRE_RL_s_config_axiReadSpecial_1 or
	  MUX_s_config_readSlave_out$enq_1__VAL_2 or
	  WILL_FIRE_RL_s_config_axiReadFallback)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_s_config_axiReadSpecial:
	  s_config_readSlave_out$D_IN =
	      MUX_s_config_readSlave_out$enq_1__VAL_1;
      WILL_FIRE_RL_s_config_axiReadSpecial_1:
	  s_config_readSlave_out$D_IN =
	      MUX_s_config_readSlave_out$enq_1__VAL_2;
      WILL_FIRE_RL_s_config_axiReadFallback:
	  s_config_readSlave_out$D_IN = 66'd0;
      default: s_config_readSlave_out$D_IN =
		   66'h2AAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign s_config_readSlave_out$ENQ =
	     WILL_FIRE_RL_s_config_axiReadSpecial ||
	     WILL_FIRE_RL_s_config_axiReadSpecial_1 ||
	     WILL_FIRE_RL_s_config_axiReadFallback ;
  assign s_config_readSlave_out$DEQ =
	     s_config_readSlave_out$EMPTY_N && S_AXI_CONF_rready ;
  assign s_config_readSlave_out$CLR = 1'b0 ;

  // submodule s_config_writeSlave_in
  assign s_config_writeSlave_in$D_IN =
	     { s_config_writeSlave_addrIn_rv$port1__read[14:3],
	       s_config_writeSlave_dataIn_rv$port1__read[71:0],
	       s_config_writeSlave_addrIn_rv$port1__read[2:0] } ;
  assign s_config_writeSlave_in$ENQ =
	     s_config_writeSlave_addrIn_rv$port1__read[15] &&
	     s_config_writeSlave_dataIn_rv$port1__read[72] &&
	     s_config_writeSlave_in$FULL_N ;
  assign s_config_writeSlave_in$DEQ =
	     WILL_FIRE_RL_s_config_1_axiWriteSpecial_1 ||
	     WILL_FIRE_RL_s_config_1_axiWriteFallback ||
	     WILL_FIRE_RL_s_config_1_axiWriteSpecial ;
  assign s_config_writeSlave_in$CLR = 1'b0 ;

  // submodule s_config_writeSlave_out
  assign s_config_writeSlave_out$D_IN = 2'd0 ;
  assign s_config_writeSlave_out$ENQ =
	     WILL_FIRE_RL_s_config_1_axiWriteSpecial_1 ||
	     WILL_FIRE_RL_s_config_1_axiWriteFallback ||
	     WILL_FIRE_RL_s_config_1_axiWriteSpecial ;
  assign s_config_writeSlave_out$DEQ =
	     s_config_writeSlave_out$EMPTY_N && S_AXI_CONF_bready ;
  assign s_config_writeSlave_out$CLR = 1'b0 ;

  // submodule slaveRead_in
  assign slaveRead_in$D_IN =
	     { slaveRead_arinpkg$wget[98:15],
	       CASE_slaveRead_arinpkgwget_BITS_14_TO_11_0_sl_ETC__q7,
	       slaveRead_arinpkg$wget[10:0] } ;
  assign slaveRead_in$ENQ = slaveRead_in$FULL_N && S_AXI_arvalid ;
  assign slaveRead_in$DEQ = slaveRead_in$EMPTY_N && masterRead_in$FULL_N ;
  assign slaveRead_in$CLR = 1'b0 ;

  // submodule slaveRead_out
  assign slaveRead_out$D_IN = masterRead_out$D_OUT ;
  assign slaveRead_out$ENQ = masterRead_out$EMPTY_N && slaveRead_out$FULL_N ;
  assign slaveRead_out$DEQ = slaveRead_out$EMPTY_N && S_AXI_rready ;
  assign slaveRead_out$CLR = 1'b0 ;

  // submodule slaveWrite_in_addr
  assign slaveWrite_in_addr$D_IN =
	     { slaveWrite_arinpkg_addr$wget[98:15],
	       CASE_slaveWrite_arinpkg_addrwget_BITS_14_TO_1_ETC__q8,
	       slaveWrite_arinpkg_addr$wget[10:0] } ;
  assign slaveWrite_in_addr$ENQ = slaveWrite_in_addr$FULL_N && S_AXI_awvalid ;
  assign slaveWrite_in_addr$DEQ =
	     slaveWrite_in_addr$EMPTY_N && masterWrite_in_addr$FULL_N ;
  assign slaveWrite_in_addr$CLR = 1'b0 ;

  // submodule slaveWrite_in_data
  assign slaveWrite_in_data$D_IN = slaveWrite_arinpkg_data$wget ;
  assign slaveWrite_in_data$ENQ = slaveWrite_in_data$FULL_N && S_AXI_wvalid ;
  assign slaveWrite_in_data$DEQ =
	     slaveWrite_in_data$EMPTY_N && masterWrite_in_data$FULL_N ;
  assign slaveWrite_in_data$CLR = 1'b0 ;

  // submodule slaveWrite_out
  assign slaveWrite_out$D_IN = masterWrite_out$D_OUT ;
  assign slaveWrite_out$ENQ =
	     masterWrite_out$EMPTY_N && slaveWrite_out$FULL_N ;
  assign slaveWrite_out$DEQ = slaveWrite_out$EMPTY_N && S_AXI_bready ;
  assign slaveWrite_out$CLR = 1'b0 ;

  // remaining internal signals
  assign IF_S_AXI_arcache_EQ_0_72_OR_S_AXI_arcache_EQ_1_ETC___d587 =
	     { CASE_S_AXI_arcache_0_S_AXI_arcache_1_S_AXI_arc_ETC__q1,
	       S_AXI_arprot,
	       S_AXI_arqos,
	       S_AXI_arregion } ;
  assign IF_S_AXI_awcache_EQ_0_00_OR_S_AXI_awcache_EQ_1_ETC___d615 =
	     { CASE_S_AXI_awcache_0_S_AXI_awcache_1_S_AXI_awc_ETC__q2,
	       S_AXI_awprot,
	       S_AXI_awqos,
	       S_AXI_awregion } ;
  assign _1_SL_offset_bits_7_28_MINUS_1___d229 =
	     (64'd1 << offset_bits) - 64'd1 ;
  assign mask__h19233 =
	     { _1_SL_offset_bits_7_28_MINUS_1___d229[0],
	       _1_SL_offset_bits_7_28_MINUS_1___d229[1],
	       _1_SL_offset_bits_7_28_MINUS_1___d229[2],
	       _1_SL_offset_bits_7_28_MINUS_1___d229[3],
	       _1_SL_offset_bits_7_28_MINUS_1___d229[4],
	       _1_SL_offset_bits_7_28_MINUS_1___d229[5],
	       _1_SL_offset_bits_7_28_MINUS_1___d229[6],
	       _1_SL_offset_bits_7_28_MINUS_1___d229[7],
	       _1_SL_offset_bits_7_28_MINUS_1___d229[8],
	       _1_SL_offset_bits_7_28_MINUS_1___d229[9],
	       _1_SL_offset_bits_7_28_MINUS_1___d229[10],
	       _1_SL_offset_bits_7_28_MINUS_1___d229[11],
	       _1_SL_offset_bits_7_28_MINUS_1___d229[12],
	       _1_SL_offset_bits_7_28_MINUS_1___d229[13],
	       _1_SL_offset_bits_7_28_MINUS_1___d229[14],
	       _1_SL_offset_bits_7_28_MINUS_1___d229[15],
	       _1_SL_offset_bits_7_28_MINUS_1___d229[16],
	       _1_SL_offset_bits_7_28_MINUS_1___d229[17],
	       _1_SL_offset_bits_7_28_MINUS_1___d229[18],
	       _1_SL_offset_bits_7_28_MINUS_1___d229[19],
	       _1_SL_offset_bits_7_28_MINUS_1___d229[20],
	       _1_SL_offset_bits_7_28_MINUS_1___d229[21],
	       _1_SL_offset_bits_7_28_MINUS_1___d229[22],
	       _1_SL_offset_bits_7_28_MINUS_1___d229[23],
	       _1_SL_offset_bits_7_28_MINUS_1___d229[24],
	       _1_SL_offset_bits_7_28_MINUS_1___d229[25],
	       _1_SL_offset_bits_7_28_MINUS_1___d229[26],
	       _1_SL_offset_bits_7_28_MINUS_1___d229[27],
	       _1_SL_offset_bits_7_28_MINUS_1___d229[28],
	       _1_SL_offset_bits_7_28_MINUS_1___d229[29],
	       _1_SL_offset_bits_7_28_MINUS_1___d229[30],
	       _1_SL_offset_bits_7_28_MINUS_1___d229[31],
	       _1_SL_offset_bits_7_28_MINUS_1___d229[32],
	       _1_SL_offset_bits_7_28_MINUS_1___d229[33],
	       _1_SL_offset_bits_7_28_MINUS_1___d229[34],
	       _1_SL_offset_bits_7_28_MINUS_1___d229[35],
	       _1_SL_offset_bits_7_28_MINUS_1___d229[36],
	       _1_SL_offset_bits_7_28_MINUS_1___d229[37],
	       _1_SL_offset_bits_7_28_MINUS_1___d229[38],
	       _1_SL_offset_bits_7_28_MINUS_1___d229[39],
	       _1_SL_offset_bits_7_28_MINUS_1___d229[40],
	       _1_SL_offset_bits_7_28_MINUS_1___d229[41],
	       _1_SL_offset_bits_7_28_MINUS_1___d229[42],
	       _1_SL_offset_bits_7_28_MINUS_1___d229[43],
	       _1_SL_offset_bits_7_28_MINUS_1___d229[44],
	       _1_SL_offset_bits_7_28_MINUS_1___d229[45],
	       _1_SL_offset_bits_7_28_MINUS_1___d229[46],
	       _1_SL_offset_bits_7_28_MINUS_1___d229[47],
	       _1_SL_offset_bits_7_28_MINUS_1___d229[48],
	       _1_SL_offset_bits_7_28_MINUS_1___d229[49],
	       _1_SL_offset_bits_7_28_MINUS_1___d229[50],
	       _1_SL_offset_bits_7_28_MINUS_1___d229[51],
	       _1_SL_offset_bits_7_28_MINUS_1___d229[52],
	       _1_SL_offset_bits_7_28_MINUS_1___d229[53],
	       _1_SL_offset_bits_7_28_MINUS_1___d229[54],
	       _1_SL_offset_bits_7_28_MINUS_1___d229[55],
	       _1_SL_offset_bits_7_28_MINUS_1___d229[56],
	       _1_SL_offset_bits_7_28_MINUS_1___d229[57],
	       _1_SL_offset_bits_7_28_MINUS_1___d229[58],
	       _1_SL_offset_bits_7_28_MINUS_1___d229[59],
	       _1_SL_offset_bits_7_28_MINUS_1___d229[60],
	       _1_SL_offset_bits_7_28_MINUS_1___d229[61],
	       _1_SL_offset_bits_7_28_MINUS_1___d229[62],
	       _1_SL_offset_bits_7_28_MINUS_1___d229[63] } ;
  assign offset_tmp__h10764 = offset & mask__h19233 ;
  assign x_addr__h10750 =
	     slaveRead_in$D_OUT[92:29] & y__h19246 | offset_tmp__h10764 ;
  assign x_addr__h19220 =
	     slaveWrite_in_addr$D_OUT[92:29] & y__h19246 |
	     offset_tmp__h10764 ;
  assign y__h19246 =
	     { ~_1_SL_offset_bits_7_28_MINUS_1___d229[0],
	       ~_1_SL_offset_bits_7_28_MINUS_1___d229[1],
	       ~_1_SL_offset_bits_7_28_MINUS_1___d229[2],
	       ~_1_SL_offset_bits_7_28_MINUS_1___d229[3],
	       ~_1_SL_offset_bits_7_28_MINUS_1___d229[4],
	       ~_1_SL_offset_bits_7_28_MINUS_1___d229[5],
	       ~_1_SL_offset_bits_7_28_MINUS_1___d229[6],
	       ~_1_SL_offset_bits_7_28_MINUS_1___d229[7],
	       ~_1_SL_offset_bits_7_28_MINUS_1___d229[8],
	       ~_1_SL_offset_bits_7_28_MINUS_1___d229[9],
	       ~_1_SL_offset_bits_7_28_MINUS_1___d229[10],
	       ~_1_SL_offset_bits_7_28_MINUS_1___d229[11],
	       ~_1_SL_offset_bits_7_28_MINUS_1___d229[12],
	       ~_1_SL_offset_bits_7_28_MINUS_1___d229[13],
	       ~_1_SL_offset_bits_7_28_MINUS_1___d229[14],
	       ~_1_SL_offset_bits_7_28_MINUS_1___d229[15],
	       ~_1_SL_offset_bits_7_28_MINUS_1___d229[16],
	       ~_1_SL_offset_bits_7_28_MINUS_1___d229[17],
	       ~_1_SL_offset_bits_7_28_MINUS_1___d229[18],
	       ~_1_SL_offset_bits_7_28_MINUS_1___d229[19],
	       ~_1_SL_offset_bits_7_28_MINUS_1___d229[20],
	       ~_1_SL_offset_bits_7_28_MINUS_1___d229[21],
	       ~_1_SL_offset_bits_7_28_MINUS_1___d229[22],
	       ~_1_SL_offset_bits_7_28_MINUS_1___d229[23],
	       ~_1_SL_offset_bits_7_28_MINUS_1___d229[24],
	       ~_1_SL_offset_bits_7_28_MINUS_1___d229[25],
	       ~_1_SL_offset_bits_7_28_MINUS_1___d229[26],
	       ~_1_SL_offset_bits_7_28_MINUS_1___d229[27],
	       ~_1_SL_offset_bits_7_28_MINUS_1___d229[28],
	       ~_1_SL_offset_bits_7_28_MINUS_1___d229[29],
	       ~_1_SL_offset_bits_7_28_MINUS_1___d229[30],
	       ~_1_SL_offset_bits_7_28_MINUS_1___d229[31],
	       ~_1_SL_offset_bits_7_28_MINUS_1___d229[32],
	       ~_1_SL_offset_bits_7_28_MINUS_1___d229[33],
	       ~_1_SL_offset_bits_7_28_MINUS_1___d229[34],
	       ~_1_SL_offset_bits_7_28_MINUS_1___d229[35],
	       ~_1_SL_offset_bits_7_28_MINUS_1___d229[36],
	       ~_1_SL_offset_bits_7_28_MINUS_1___d229[37],
	       ~_1_SL_offset_bits_7_28_MINUS_1___d229[38],
	       ~_1_SL_offset_bits_7_28_MINUS_1___d229[39],
	       ~_1_SL_offset_bits_7_28_MINUS_1___d229[40],
	       ~_1_SL_offset_bits_7_28_MINUS_1___d229[41],
	       ~_1_SL_offset_bits_7_28_MINUS_1___d229[42],
	       ~_1_SL_offset_bits_7_28_MINUS_1___d229[43],
	       ~_1_SL_offset_bits_7_28_MINUS_1___d229[44],
	       ~_1_SL_offset_bits_7_28_MINUS_1___d229[45],
	       ~_1_SL_offset_bits_7_28_MINUS_1___d229[46],
	       ~_1_SL_offset_bits_7_28_MINUS_1___d229[47],
	       ~_1_SL_offset_bits_7_28_MINUS_1___d229[48],
	       ~_1_SL_offset_bits_7_28_MINUS_1___d229[49],
	       ~_1_SL_offset_bits_7_28_MINUS_1___d229[50],
	       ~_1_SL_offset_bits_7_28_MINUS_1___d229[51],
	       ~_1_SL_offset_bits_7_28_MINUS_1___d229[52],
	       ~_1_SL_offset_bits_7_28_MINUS_1___d229[53],
	       ~_1_SL_offset_bits_7_28_MINUS_1___d229[54],
	       ~_1_SL_offset_bits_7_28_MINUS_1___d229[55],
	       ~_1_SL_offset_bits_7_28_MINUS_1___d229[56],
	       ~_1_SL_offset_bits_7_28_MINUS_1___d229[57],
	       ~_1_SL_offset_bits_7_28_MINUS_1___d229[58],
	       ~_1_SL_offset_bits_7_28_MINUS_1___d229[59],
	       ~_1_SL_offset_bits_7_28_MINUS_1___d229[60],
	       ~_1_SL_offset_bits_7_28_MINUS_1___d229[61],
	       ~_1_SL_offset_bits_7_28_MINUS_1___d229[62],
	       ~_1_SL_offset_bits_7_28_MINUS_1___d229[63] } ;
  always@(S_AXI_arcache)
  begin
    case (S_AXI_arcache)
      4'd0, 4'd1, 4'd2, 4'd3, 4'd10, 4'd14, 4'd15:
	  CASE_S_AXI_arcache_0_S_AXI_arcache_1_S_AXI_arc_ETC__q1 =
	      S_AXI_arcache;
      default: CASE_S_AXI_arcache_0_S_AXI_arcache_1_S_AXI_arc_ETC__q1 = 4'd11;
    endcase
  end
  always@(S_AXI_awcache)
  begin
    case (S_AXI_awcache)
      4'd0, 4'd1, 4'd2, 4'd3, 4'd6, 4'd7, 4'd14:
	  CASE_S_AXI_awcache_0_S_AXI_awcache_1_S_AXI_awc_ETC__q2 =
	      S_AXI_awcache;
      default: CASE_S_AXI_awcache_0_S_AXI_awcache_1_S_AXI_awc_ETC__q2 = 4'd15;
    endcase
  end
  always@(masterRead_warcache$wget)
  begin
    case (masterRead_warcache$wget)
      4'd1, 4'd2, 4'd3, 4'd10, 4'd14, 4'd15:
	  CASE_masterRead_warcachewget_1_masterRead_war_ETC__q3 =
	      masterRead_warcache$wget;
      default: CASE_masterRead_warcachewget_1_masterRead_war_ETC__q3 = 4'd11;
    endcase
  end
  always@(masterWrite_wawcache$wget)
  begin
    case (masterWrite_wawcache$wget)
      4'd1, 4'd2, 4'd3, 4'd6, 4'd7, 4'd14:
	  CASE_masterWrite_wawcachewget_1_masterWrite_w_ETC__q4 =
	      masterWrite_wawcache$wget;
      default: CASE_masterWrite_wawcachewget_1_masterWrite_w_ETC__q4 = 4'd15;
    endcase
  end
  always@(slaveRead_in$D_OUT)
  begin
    case (slaveRead_in$D_OUT[14:11])
      4'd0, 4'd1, 4'd2, 4'd3, 4'd10, 4'd14, 4'd15:
	  CASE_slaveRead_inD_OUT_BITS_14_TO_11_0_slaveR_ETC__q5 =
	      slaveRead_in$D_OUT[14:11];
      default: CASE_slaveRead_inD_OUT_BITS_14_TO_11_0_slaveR_ETC__q5 = 4'd11;
    endcase
  end
  always@(slaveWrite_in_addr$D_OUT)
  begin
    case (slaveWrite_in_addr$D_OUT[14:11])
      4'd0, 4'd1, 4'd2, 4'd3, 4'd6, 4'd7, 4'd14:
	  CASE_slaveWrite_in_addrD_OUT_BITS_14_TO_11_0__ETC__q6 =
	      slaveWrite_in_addr$D_OUT[14:11];
      default: CASE_slaveWrite_in_addrD_OUT_BITS_14_TO_11_0__ETC__q6 = 4'd15;
    endcase
  end
  always@(slaveRead_arinpkg$wget)
  begin
    case (slaveRead_arinpkg$wget[14:11])
      4'd0, 4'd1, 4'd2, 4'd3, 4'd10, 4'd14, 4'd15:
	  CASE_slaveRead_arinpkgwget_BITS_14_TO_11_0_sl_ETC__q7 =
	      slaveRead_arinpkg$wget[14:11];
      default: CASE_slaveRead_arinpkgwget_BITS_14_TO_11_0_sl_ETC__q7 = 4'd11;
    endcase
  end
  always@(slaveWrite_arinpkg_addr$wget)
  begin
    case (slaveWrite_arinpkg_addr$wget[14:11])
      4'd0, 4'd1, 4'd2, 4'd3, 4'd6, 4'd7, 4'd14:
	  CASE_slaveWrite_arinpkg_addrwget_BITS_14_TO_1_ETC__q8 =
	      slaveWrite_arinpkg_addr$wget[14:11];
      default: CASE_slaveWrite_arinpkg_addrwget_BITS_14_TO_1_ETC__q8 = 4'd15;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        offset <= `BSV_ASSIGNMENT_DELAY 64'h0000000800000000;
	offset_bits <= `BSV_ASSIGNMENT_DELAY 64'd32;
	s_config_readBusy <= `BSV_ASSIGNMENT_DELAY 1'd0;
	s_config_writeBusy <= `BSV_ASSIGNMENT_DELAY 1'd0;
	s_config_writeSlave_addrIn_rv <= `BSV_ASSIGNMENT_DELAY 16'd10922;
	s_config_writeSlave_dataIn_rv <= `BSV_ASSIGNMENT_DELAY
	    73'h0AAAAAAAAAAAAAAAAAA;
      end
    else
      begin
        if (offset$EN) offset <= `BSV_ASSIGNMENT_DELAY offset$D_IN;
	if (offset_bits$EN)
	  offset_bits <= `BSV_ASSIGNMENT_DELAY offset_bits$D_IN;
	if (s_config_readBusy$EN)
	  s_config_readBusy <= `BSV_ASSIGNMENT_DELAY s_config_readBusy$D_IN;
	if (s_config_writeBusy$EN)
	  s_config_writeBusy <= `BSV_ASSIGNMENT_DELAY s_config_writeBusy$D_IN;
	if (s_config_writeSlave_addrIn_rv$EN)
	  s_config_writeSlave_addrIn_rv <= `BSV_ASSIGNMENT_DELAY
	      s_config_writeSlave_addrIn_rv$D_IN;
	if (s_config_writeSlave_dataIn_rv$EN)
	  s_config_writeSlave_dataIn_rv <= `BSV_ASSIGNMENT_DELAY
	      s_config_writeSlave_dataIn_rv$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    offset = 64'hAAAAAAAAAAAAAAAA;
    offset_bits = 64'hAAAAAAAAAAAAAAAA;
    s_config_readBusy = 1'h0;
    s_config_writeBusy = 1'h0;
    s_config_writeSlave_addrIn_rv = 16'hAAAA;
    s_config_writeSlave_dataIn_rv = 73'h0AAAAAAAAAAAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_s_config_axiReadSpecial ||
	   WILL_FIRE_RL_s_config_axiReadSpecialIsHandled) &&
	  (WILL_FIRE_RL_s_config_axiReadSpecial_1 ||
	   WILL_FIRE_RL_s_config_axiReadSpecialIsHandled_1))
	$display("Error: \"/home/wimi/jah/projects/Bluespec/done/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 161, column 18: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_s_config_axiReadSpecial,\n  RL_s_config_axiReadSpecialIsHandled] and [RL_s_config_axiReadSpecial_1,\n  RL_s_config_axiReadSpecialIsHandled_1] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_s_config_axiReadSpecial ||
	   WILL_FIRE_RL_s_config_axiReadSpecialIsHandled ||
	   WILL_FIRE_RL_s_config_axiReadSpecial_1 ||
	   WILL_FIRE_RL_s_config_axiReadSpecialIsHandled_1) &&
	  WILL_FIRE_RL_s_config_axiReadFallback)
	$display("Error: \"/home/wimi/jah/projects/Bluespec/done/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 161, column 18: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_s_config_axiReadSpecial,\n  RL_s_config_axiReadSpecialIsHandled, RL_s_config_axiReadSpecial_1,\n  RL_s_config_axiReadSpecialIsHandled_1] and [RL_s_config_axiReadFallback] )\n  fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_s_config_1_axiWriteSpecialIsHandled_1 &&
	  WILL_FIRE_RL_s_config_1_axiWriteSpecialIsHandled)
	$display("Error: \"/home/wimi/jah/projects/Bluespec/done/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 261, column 18: (R0002)\n  Conflict-free rules RL_s_config_1_axiWriteSpecialIsHandled_1 and\n  RL_s_config_1_axiWriteSpecialIsHandled called conflicting methods wset and\n  wset of module instance s_config_writeIsHandled.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_s_config_1_axiWriteSpecial_1 &&
	  WILL_FIRE_RL_s_config_1_axiWriteSpecial)
	$display("Error: \"/home/wimi/jah/projects/Bluespec/done/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 250, column 18: (R0002)\n  Conflict-free rules RL_s_config_1_axiWriteSpecial_1 and\n  RL_s_config_1_axiWriteSpecial called conflicting methods deq and deq of\n  module instance s_config_writeSlave_in.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_s_config_1_axiWriteSpecial_1 &&
	  WILL_FIRE_RL_s_config_1_axiWriteSpecial)
	$display("Error: \"/home/wimi/jah/projects/Bluespec/done/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 250, column 18: (R0002)\n  Conflict-free rules RL_s_config_1_axiWriteSpecial_1 and\n  RL_s_config_1_axiWriteSpecial called conflicting methods first and deq of\n  module instance s_config_writeSlave_in.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_s_config_1_axiWriteSpecial_1 &&
	  WILL_FIRE_RL_s_config_1_axiWriteSpecial)
	$display("Error: \"/home/wimi/jah/projects/Bluespec/done/BlueAXI/src/GenericAxi4LiteSlave.bsv\", line 250, column 18: (R0002)\n  Conflict-free rules RL_s_config_1_axiWriteSpecial_1 and\n  RL_s_config_1_axiWriteSpecial called conflicting methods enq and enq of\n  module instance s_config_writeSlave_out.\n");
  end
  // synopsys translate_on
endmodule  // mkAXIOffset

